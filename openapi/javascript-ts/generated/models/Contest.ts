/* tslint:disable */
/* eslint-disable */
/**
 * Ziqni Gamification Cloud API
 * This is the gamification cloud for Ziqni
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ContestAllOf,
    ContestAllOfFromJSON,
    ContestAllOfFromJSONTyped,
    ContestAllOfToJSON,
    ContestStatus,
    ContestStatusFromJSON,
    ContestStatusFromJSONTyped,
    ContestStatusToJSON,
    ModelDefault,
    ModelDefaultFromJSON,
    ModelDefaultFromJSONTyped,
    ModelDefaultToJSON,
    OptionalModelFields,
    OptionalModelFieldsFromJSON,
    OptionalModelFieldsFromJSONTyped,
    OptionalModelFieldsToJSON,
    RoundType,
    RoundTypeFromJSON,
    RoundTypeFromJSONTyped,
    RoundTypeToJSON,
    Strategy,
    StrategyFromJSON,
    StrategyFromJSONTyped,
    StrategyToJSON,
} from './';

/**
 * This is a contest model
 * @export
 * @interface Contest
 */
export interface Contest {
    /**
     * 
     * @type {string}
     * @memberof Contest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Contest
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Contest
     */
    termsAndConditions?: string;
    /**
     * A unique identifier of a Competition
     * @type {string}
     * @memberof Contest
     */
    competitionId?: string;
    /**
     * To what round does the contest belong
     * @type {number}
     * @memberof Contest
     */
    round?: number;
    /**
     * 
     * @type {RoundType}
     * @memberof Contest
     */
    roundType?: RoundType;
    /**
     * Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2
     * @type {number}
     * @memberof Contest
     */
    groupStage?: number;
    /**
     * The name of the group stages
     * @type {string}
     * @memberof Contest
     */
    groupStageLabel?: string;
    /**
     * Maximum number of entrants for the contest
     * @type {number}
     * @memberof Contest
     */
    maxNumberOfEntrants?: number;
    /**
     * Minimum number of entrants for the contest
     * @type {number}
     * @memberof Contest
     */
    minNumberOfEntrants?: number;
    /**
     * ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
     * @type {Date}
     * @memberof Contest
     */
    scheduledStartDate?: Date;
    /**
     * ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
     * @type {Date}
     * @memberof Contest
     */
    scheduledEndDate?: Date;
    /**
     * ISO8601 timestamp for when a Competition started. All records are stored in UTC time zone
     * @type {Date}
     * @memberof Contest
     */
    readonly actualStartDate?: Date;
    /**
     * ISO8601 timestamp for when a Competition ended. All records are stored in UTC time zone
     * @type {Date}
     * @memberof Contest
     */
    readonly actualEndDate?: Date;
    /**
     * 
     * @type {Strategy}
     * @memberof Contest
     */
    strategies?: Strategy;
    /**
     * 
     * @type {ContestStatus}
     * @memberof Contest
     */
    status?: ContestStatus;
    /**
     * The code of the contest
     * @type {number}
     * @memberof Contest
     */
    readonly statusCode?: number;
    /**
     * Additional constraints
     * @type {Array<string>}
     * @memberof Contest
     */
    constraints?: Array<string>;
    /**
     * Ziqni id of the model
     * @type {string}
     * @memberof Contest
     */
    id: string;
    /**
     * This is the space name which is linked to the account
     * @type {string}
     * @memberof Contest
     */
    spaceName?: string;
    /**
     * ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
     * @type {Date}
     * @memberof Contest
     */
    created?: Date;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof Contest
     */
    customFields?: { [key: string]: object; };
    /**
     * A list of id's used to tag models
     * @type {Array<string>}
     * @memberof Contest
     */
    tags?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Contest
     */
    metadata?: { [key: string]: string; };
}

export function ContestFromJSON(json: any): Contest {
    return ContestFromJSONTyped(json, false);
}

export function ContestFromJSONTyped(json: any, ignoreDiscriminator: boolean): Contest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'termsAndConditions': !exists(json, 'termsAndConditions') ? undefined : json['termsAndConditions'],
        'competitionId': !exists(json, 'competitionId') ? undefined : json['competitionId'],
        'round': !exists(json, 'round') ? undefined : json['round'],
        'roundType': !exists(json, 'roundType') ? undefined : RoundTypeFromJSON(json['roundType']),
        'groupStage': !exists(json, 'groupStage') ? undefined : json['groupStage'],
        'groupStageLabel': !exists(json, 'groupStageLabel') ? undefined : json['groupStageLabel'],
        'maxNumberOfEntrants': !exists(json, 'maxNumberOfEntrants') ? undefined : json['maxNumberOfEntrants'],
        'minNumberOfEntrants': !exists(json, 'minNumberOfEntrants') ? undefined : json['minNumberOfEntrants'],
        'scheduledStartDate': !exists(json, 'scheduledStartDate') ? undefined : (new Date(json['scheduledStartDate'])),
        'scheduledEndDate': !exists(json, 'scheduledEndDate') ? undefined : (new Date(json['scheduledEndDate'])),
        'actualStartDate': !exists(json, 'actualStartDate') ? undefined : (new Date(json['actualStartDate'])),
        'actualEndDate': !exists(json, 'actualEndDate') ? undefined : (new Date(json['actualEndDate'])),
        'strategies': !exists(json, 'strategies') ? undefined : StrategyFromJSON(json['strategies']),
        'status': !exists(json, 'status') ? undefined : ContestStatusFromJSON(json['status']),
        'statusCode': !exists(json, 'statusCode') ? undefined : json['statusCode'],
        'constraints': !exists(json, 'constraints') ? undefined : json['constraints'],
        'id': json['id'],
        'spaceName': !exists(json, 'spaceName') ? undefined : json['spaceName'],
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
        'customFields': !exists(json, 'customFields') ? undefined : json['customFields'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
    };
}

export function ContestToJSON(value?: Contest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
        'termsAndConditions': value.termsAndConditions,
        'competitionId': value.competitionId,
        'round': value.round,
        'roundType': RoundTypeToJSON(value.roundType),
        'groupStage': value.groupStage,
        'groupStageLabel': value.groupStageLabel,
        'maxNumberOfEntrants': value.maxNumberOfEntrants,
        'minNumberOfEntrants': value.minNumberOfEntrants,
        'scheduledStartDate': value.scheduledStartDate === undefined ? undefined : (value.scheduledStartDate.toISOString()),
        'scheduledEndDate': value.scheduledEndDate === undefined ? undefined : (value.scheduledEndDate.toISOString()),
        'strategies': StrategyToJSON(value.strategies),
        'status': ContestStatusToJSON(value.status),
        'constraints': value.constraints,
        'id': value.id,
        'spaceName': value.spaceName,
        'created': value.created === undefined ? undefined : (value.created.toISOString()),
        'customFields': value.customFields,
        'tags': value.tags,
        'metadata': value.metadata,
    };
}

