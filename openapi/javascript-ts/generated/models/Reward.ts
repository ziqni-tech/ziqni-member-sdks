/* tslint:disable */
/* eslint-disable */
/**
 * Ziqni Gamification Cloud API
 * This is the gamification cloud for Ziqni
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EntityType,
    EntityTypeFromJSON,
    EntityTypeFromJSONTyped,
    EntityTypeToJSON,
    RewardTypeReduced,
    RewardTypeReducedFromJSON,
    RewardTypeReducedFromJSONTyped,
    RewardTypeReducedToJSON,
} from './';

/**
 * 
 * @export
 * @interface Reward
 */
export interface Reward {
    /**
     * 
     * @type {EntityType}
     * @memberof Reward
     */
    entityType?: EntityType;
    /**
     * A unique identifier of an achievement or contest. Dependant on entityType
     * @type {string}
     * @memberof Reward
     */
    entityId?: string;
    /**
     * The name of a reward
     * @type {string}
     * @memberof Reward
     */
    name?: string;
    /**
     * The description of a Reward
     * @type {string}
     * @memberof Reward
     */
    description?: string;
    /**
     * If used in the context of contest this will associate with the rank of the leaderboard
     * @type {string}
     * @memberof Reward
     */
    rewardRank?: string;
    /**
     * Numerical value of the reward that will be issued based on the reward type
     * @type {number}
     * @memberof Reward
     */
    rewardValue?: number;
    /**
     * 
     * @type {RewardTypeReduced}
     * @memberof Reward
     */
    rewardType?: RewardTypeReduced;
    /**
     * An Icon id that has been pre uploaded to the system to display for reward
     * @type {string}
     * @memberof Reward
     */
    icon?: string;
    /**
     * how many of thsese rewards are
     * @type {number}
     * @memberof Reward
     */
    issueLimit?: number;
    /**
     * Delay of issuing a reward in minutes
     * @type {number}
     * @memberof Reward
     */
    delay?: number;
    /**
     * ISO8601 timestamp for when a Reward is available until a specific point in time. All records are stored in UTC time zone
     * @type {Date}
     * @memberof Reward
     */
    pointInTime?: Date;
    /**
     * Reward available for a period of time from issuing in minutes
     * @type {number}
     * @memberof Reward
     */
    period?: number;
    /**
     * Additional constraints
     * @type {Array<string>}
     * @memberof Reward
     */
    constraints?: Array<string>;
}

export function RewardFromJSON(json: any): Reward {
    return RewardFromJSONTyped(json, false);
}

export function RewardFromJSONTyped(json: any, ignoreDiscriminator: boolean): Reward {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'entityType': !exists(json, 'entityType') ? undefined : EntityTypeFromJSON(json['entityType']),
        'entityId': !exists(json, 'entityId') ? undefined : json['entityId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'rewardRank': !exists(json, 'rewardRank') ? undefined : json['rewardRank'],
        'rewardValue': !exists(json, 'rewardValue') ? undefined : json['rewardValue'],
        'rewardType': !exists(json, 'rewardType') ? undefined : RewardTypeReducedFromJSON(json['rewardType']),
        'icon': !exists(json, 'icon') ? undefined : json['icon'],
        'issueLimit': !exists(json, 'issueLimit') ? undefined : json['issueLimit'],
        'delay': !exists(json, 'delay') ? undefined : json['delay'],
        'pointInTime': !exists(json, 'pointInTime') ? undefined : (new Date(json['pointInTime'])),
        'period': !exists(json, 'period') ? undefined : json['period'],
        'constraints': !exists(json, 'constraints') ? undefined : json['constraints'],
    };
}

export function RewardToJSON(value?: Reward | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'entityType': EntityTypeToJSON(value.entityType),
        'entityId': value.entityId,
        'name': value.name,
        'description': value.description,
        'rewardRank': value.rewardRank,
        'rewardValue': value.rewardValue,
        'rewardType': RewardTypeReducedToJSON(value.rewardType),
        'icon': value.icon,
        'issueLimit': value.issueLimit,
        'delay': value.delay,
        'pointInTime': value.pointInTime === undefined ? undefined : (value.pointInTime.toISOString()),
        'period': value.period,
        'constraints': value.constraints,
    };
}

