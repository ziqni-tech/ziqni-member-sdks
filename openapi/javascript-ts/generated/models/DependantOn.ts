/* tslint:disable */
/* eslint-disable */
/**
 * Ziqni Gamification Cloud API
 * This is the gamification cloud for Ziqni
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DependantOn
 */
export interface DependantOn {
    /**
     * A rule indicating that it has to be included. Players that are in the EU group with a MUST rule - that means only players that have that group can participate
     * @type {Array<string>}
     * @memberof DependantOn
     */
    must?: Array<string>;
    /**
     * A rule indicating that it will not be included. Players that are in the EU group with a MUST-NOT rule - that means that players that have that group can NOT participate
     * @type {Array<string>}
     * @memberof DependantOn
     */
    mustNot?: Array<string>;
    /**
     * A rule indicating that some of them have to be included. Dependancy on shouldMatchAtLeast parameter. Players that are in the EU and DE groups with a SHOULD rule and a shouldMatchAtLeast with a value of 1 - that means that players that have 1 of the groups can participate
     * @type {Array<string>}
     * @memberof DependantOn
     */
    should?: Array<string>;
    /**
     * Dependant on should. Triggered when 2 or more should parameters selected
     * @type {number}
     * @memberof DependantOn
     */
    shouldMatchAtLeast?: number;
}

export function DependantOnFromJSON(json: any): DependantOn {
    return DependantOnFromJSONTyped(json, false);
}

export function DependantOnFromJSONTyped(json: any, ignoreDiscriminator: boolean): DependantOn {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'must': !exists(json, 'must') ? undefined : json['must'],
        'mustNot': !exists(json, 'mustNot') ? undefined : json['mustNot'],
        'should': !exists(json, 'should') ? undefined : json['should'],
        'shouldMatchAtLeast': !exists(json, 'shouldMatchAtLeast') ? undefined : json['shouldMatchAtLeast'],
    };
}

export function DependantOnToJSON(value?: DependantOn | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'must': value.must,
        'mustNot': value.mustNot,
        'should': value.should,
        'shouldMatchAtLeast': value.shouldMatchAtLeast,
    };
}

