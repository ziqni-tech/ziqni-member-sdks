/* tslint:disable */
/* eslint-disable */
/**
 * Ziqni Gamification Cloud API
 * This is the gamification cloud for Ziqni
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CompetitionStatus,
    CompetitionStatusFromJSON,
    CompetitionStatusFromJSONTyped,
    CompetitionStatusToJSON,
    CompetitionType,
    CompetitionTypeFromJSON,
    CompetitionTypeFromJSONTyped,
    CompetitionTypeToJSON,
    ProductReduced,
    ProductReducedFromJSON,
    ProductReducedFromJSONTyped,
    ProductReducedToJSON,
} from './';

/**
 * 
 * @export
 * @interface CompetitionAllOf
 */
export interface CompetitionAllOf {
    /**
     * 
     * @type {CompetitionType}
     * @memberof CompetitionAllOf
     */
    competitionType?: CompetitionType;
    /**
     * Number of rounds to be played in a competition
     * @type {number}
     * @memberof CompetitionAllOf
     */
    numberOfRounds?: number;
    /**
     * Number of group stages
     * @type {number}
     * @memberof CompetitionAllOf
     */
    numberOfGroupStages?: number;
    /**
     * Maximum number of partiipants allowed in a competition
     * @type {number}
     * @memberof CompetitionAllOf
     */
    maxNumberOfEntrants?: number;
    /**
     * Maximum number of partiipants allowed in a competition
     * @type {number}
     * @memberof CompetitionAllOf
     */
    minNumberOfEntrants?: number;
    /**
     * 
     * @type {string}
     * @memberof CompetitionAllOf
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CompetitionAllOf
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CompetitionAllOf
     */
    termsAndConditions?: string;
    /**
     * 
     * @type {string}
     * @memberof CompetitionAllOf
     */
    entrantMemberType?: string;
    /**
     * ISO8601 timestamp for when a Competition should start. All records are stored in UTC time zone
     * @type {Date}
     * @memberof CompetitionAllOf
     */
    scheduledStartDate?: Date;
    /**
     * ISO8601 timestamp for when a Competition should end. All records are stored in UTC time zone
     * @type {Date}
     * @memberof CompetitionAllOf
     */
    scheduledEndDate?: Date;
    /**
     * ISO8601 timestamp for when a Competition started. All records are stored in UTC time zone
     * @type {Date}
     * @memberof CompetitionAllOf
     */
    readonly actualStartDate?: Date;
    /**
     * ISO8601 timestamp for when a Competition ended. All records are stored in UTC time zone
     * @type {Date}
     * @memberof CompetitionAllOf
     */
    readonly actualEndDate?: Date;
    /**
     * 
     * @type {CompetitionStatus}
     * @memberof CompetitionAllOf
     */
    status?: CompetitionStatus;
    /**
     * The code of the competition
     * @type {number}
     * @memberof CompetitionAllOf
     */
    readonly statusCode?: number;
    /**
     * Additional constraints
     * @type {Set<string>}
     * @memberof CompetitionAllOf
     */
    constraints?: Set<string>;
    /**
     * 
     * @type {Array<ProductReduced>}
     * @memberof CompetitionAllOf
     */
    products?: Array<ProductReduced>;
}

export function CompetitionAllOfFromJSON(json: any): CompetitionAllOf {
    return CompetitionAllOfFromJSONTyped(json, false);
}

export function CompetitionAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): CompetitionAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'competitionType': !exists(json, 'competitionType') ? undefined : CompetitionTypeFromJSON(json['competitionType']),
        'numberOfRounds': !exists(json, 'numberOfRounds') ? undefined : json['numberOfRounds'],
        'numberOfGroupStages': !exists(json, 'numberOfGroupStages') ? undefined : json['numberOfGroupStages'],
        'maxNumberOfEntrants': !exists(json, 'maxNumberOfEntrants') ? undefined : json['maxNumberOfEntrants'],
        'minNumberOfEntrants': !exists(json, 'minNumberOfEntrants') ? undefined : json['minNumberOfEntrants'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'termsAndConditions': !exists(json, 'termsAndConditions') ? undefined : json['termsAndConditions'],
        'entrantMemberType': !exists(json, 'entrantMemberType') ? undefined : json['entrantMemberType'],
        'scheduledStartDate': !exists(json, 'scheduledStartDate') ? undefined : (new Date(json['scheduledStartDate'])),
        'scheduledEndDate': !exists(json, 'scheduledEndDate') ? undefined : (new Date(json['scheduledEndDate'])),
        'actualStartDate': !exists(json, 'actualStartDate') ? undefined : (new Date(json['actualStartDate'])),
        'actualEndDate': !exists(json, 'actualEndDate') ? undefined : (new Date(json['actualEndDate'])),
        'status': !exists(json, 'status') ? undefined : CompetitionStatusFromJSON(json['status']),
        'statusCode': !exists(json, 'statusCode') ? undefined : json['statusCode'],
        'constraints': !exists(json, 'constraints') ? undefined : json['constraints'],
        'products': !exists(json, 'products') ? undefined : ((json['products'] as Array<any>).map(ProductReducedFromJSON)),
    };
}

export function CompetitionAllOfToJSON(value?: CompetitionAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'competitionType': CompetitionTypeToJSON(value.competitionType),
        'numberOfRounds': value.numberOfRounds,
        'numberOfGroupStages': value.numberOfGroupStages,
        'maxNumberOfEntrants': value.maxNumberOfEntrants,
        'minNumberOfEntrants': value.minNumberOfEntrants,
        'name': value.name,
        'description': value.description,
        'termsAndConditions': value.termsAndConditions,
        'entrantMemberType': value.entrantMemberType,
        'scheduledStartDate': value.scheduledStartDate === undefined ? undefined : (value.scheduledStartDate.toISOString()),
        'scheduledEndDate': value.scheduledEndDate === undefined ? undefined : (value.scheduledEndDate.toISOString()),
        'status': CompetitionStatusToJSON(value.status),
        'constraints': value.constraints,
        'products': value.products === undefined ? undefined : ((value.products as Array<any>).map(ProductReducedToJSON)),
    };
}

