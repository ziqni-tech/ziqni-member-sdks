/* tslint:disable */
/* eslint-disable */
/**
 * Ziqni Gamification Cloud API
 * This is the gamification cloud for Ziqni
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ContestStatus,
    ContestStatusFromJSON,
    ContestStatusFromJSONTyped,
    ContestStatusToJSON,
    RewardReduced,
    RewardReducedFromJSON,
    RewardReducedFromJSONTyped,
    RewardReducedToJSON,
} from './';

/**
 * 
 * @export
 * @interface ContestReduced
 */
export interface ContestReduced {
    /**
     * A unique identifier of a Competition
     * @type {string}
     * @memberof ContestReduced
     */
    competitionId?: string;
    /**
     * The row number for displaying the Contest in a table
     * @type {number}
     * @memberof ContestReduced
     */
    row?: number;
    /**
     * A name for the Contest. Can be translated
     * @type {string}
     * @memberof ContestReduced
     */
    name?: string;
    /**
     * To what round does the contest belong
     * @type {number}
     * @memberof ContestReduced
     */
    round?: number;
    /**
     * Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2
     * @type {number}
     * @memberof ContestReduced
     */
    groupStage?: number;
    /**
     * A list of Ziqni contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional.
     * @type {Array<string>}
     * @memberof ContestReduced
     */
    entrantsFromContest?: Array<string>;
    /**
     * 
     * @type {ContestStatus}
     * @memberof ContestReduced
     */
    status?: ContestStatus;
    /**
     * The code of the contest
     * @type {number}
     * @memberof ContestReduced
     */
    readonly statusCode?: number;
    /**
     * ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
     * @type {Date}
     * @memberof ContestReduced
     */
    scheduledStartDate?: Date;
    /**
     * ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
     * @type {Date}
     * @memberof ContestReduced
     */
    scheduledEndDate?: Date;
    /**
     * ISO8601 timestamp for when a Contest started. All records are stored in UTC time zone
     * @type {Date}
     * @memberof ContestReduced
     */
    readonly actualStartDate?: Date;
    /**
     * ISO8601 timestamp for when a Contest ended. All records are stored in UTC time zone
     * @type {Date}
     * @memberof ContestReduced
     */
    readonly actualEndDate?: Date;
    /**
     * A list of id's used to tag
     * @type {Array<string>}
     * @memberof ContestReduced
     */
    tags?: Array<string>;
    /**
     * 
     * @type {Array<RewardReduced>}
     * @memberof ContestReduced
     */
    rewards?: Array<RewardReduced>;
}

export function ContestReducedFromJSON(json: any): ContestReduced {
    return ContestReducedFromJSONTyped(json, false);
}

export function ContestReducedFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContestReduced {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'competitionId': !exists(json, 'competitionId') ? undefined : json['competitionId'],
        'row': !exists(json, 'row') ? undefined : json['row'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'round': !exists(json, 'round') ? undefined : json['round'],
        'groupStage': !exists(json, 'groupStage') ? undefined : json['groupStage'],
        'entrantsFromContest': !exists(json, 'entrantsFromContest') ? undefined : json['entrantsFromContest'],
        'status': !exists(json, 'status') ? undefined : ContestStatusFromJSON(json['status']),
        'statusCode': !exists(json, 'statusCode') ? undefined : json['statusCode'],
        'scheduledStartDate': !exists(json, 'scheduledStartDate') ? undefined : (new Date(json['scheduledStartDate'])),
        'scheduledEndDate': !exists(json, 'scheduledEndDate') ? undefined : (new Date(json['scheduledEndDate'])),
        'actualStartDate': !exists(json, 'actualStartDate') ? undefined : (new Date(json['actualStartDate'])),
        'actualEndDate': !exists(json, 'actualEndDate') ? undefined : (new Date(json['actualEndDate'])),
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'rewards': !exists(json, 'rewards') ? undefined : ((json['rewards'] as Array<any>).map(RewardReducedFromJSON)),
    };
}

export function ContestReducedToJSON(value?: ContestReduced | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'competitionId': value.competitionId,
        'row': value.row,
        'name': value.name,
        'round': value.round,
        'groupStage': value.groupStage,
        'entrantsFromContest': value.entrantsFromContest,
        'status': ContestStatusToJSON(value.status),
        'scheduledStartDate': value.scheduledStartDate === undefined ? undefined : (value.scheduledStartDate.toISOString()),
        'scheduledEndDate': value.scheduledEndDate === undefined ? undefined : (value.scheduledEndDate.toISOString()),
        'tags': value.tags,
        'rewards': value.rewards === undefined ? undefined : ((value.rewards as Array<any>).map(RewardReducedToJSON)),
    };
}

