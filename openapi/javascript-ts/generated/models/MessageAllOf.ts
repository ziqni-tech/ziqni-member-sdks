/* tslint:disable */
/* eslint-disable */
/**
 * Ziqni Gamification Cloud API
 * This is the gamification cloud for Ziqni
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EventRefType,
    EventRefTypeFromJSON,
    EventRefTypeFromJSONTyped,
    EventRefTypeToJSON,
    MessageStatus,
    MessageStatusFromJSON,
    MessageStatusFromJSONTyped,
    MessageStatusToJSON,
    MessageType,
    MessageTypeFromJSON,
    MessageTypeFromJSONTyped,
    MessageTypeToJSON,
    Translation,
    TranslationFromJSON,
    TranslationFromJSONTyped,
    TranslationToJSON,
} from './';

/**
 * 
 * @export
 * @interface MessageAllOf
 */
export interface MessageAllOf {
    /**
     * 
     * @type {EventRefType}
     * @memberof MessageAllOf
     */
    eventRefType?: EventRefType;
    /**
     * The reference ID of the event object
     * @type {string}
     * @memberof MessageAllOf
     */
    eventRefId?: string;
    /**
     * 
     * @type {MessageType}
     * @memberof MessageAllOf
     */
    messageType?: MessageType;
    /**
     * The title of the message
     * @type {string}
     * @memberof MessageAllOf
     */
    subject?: string;
    /**
     * The context of the message
     * @type {string}
     * @memberof MessageAllOf
     */
    body?: string;
    /**
     * Unique system identifier of an Award
     * @type {string}
     * @memberof MessageAllOf
     */
    readonly prize?: string;
    /**
     * 
     * @type {MessageStatus}
     * @memberof MessageAllOf
     */
    status?: MessageStatus;
    /**
     * The time that the message will disappear after. ISO8601 timestamp
     * @type {Date}
     * @memberof MessageAllOf
     */
    expiry?: Date;
    /**
     * The reference ID of the event object
     * @type {Array<string>}
     * @memberof MessageAllOf
     */
    memberId?: Array<string>;
    /**
     * 
     * @type {Array<Translation>}
     * @memberof MessageAllOf
     */
    translations?: Array<Translation>;
    /**
     * Message translatable fields
     * @type {Array<string>}
     * @memberof MessageAllOf
     */
    readonly translatableFields?: Array<string>;
}

export function MessageAllOfFromJSON(json: any): MessageAllOf {
    return MessageAllOfFromJSONTyped(json, false);
}

export function MessageAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eventRefType': !exists(json, 'eventRefType') ? undefined : EventRefTypeFromJSON(json['eventRefType']),
        'eventRefId': !exists(json, 'eventRefId') ? undefined : json['eventRefId'],
        'messageType': !exists(json, 'messageType') ? undefined : MessageTypeFromJSON(json['messageType']),
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'body': !exists(json, 'body') ? undefined : json['body'],
        'prize': !exists(json, 'prize') ? undefined : json['prize'],
        'status': !exists(json, 'status') ? undefined : MessageStatusFromJSON(json['status']),
        'expiry': !exists(json, 'expiry') ? undefined : (new Date(json['expiry'])),
        'memberId': !exists(json, 'memberId') ? undefined : json['memberId'],
        'translations': !exists(json, 'translations') ? undefined : ((json['translations'] as Array<any>).map(TranslationFromJSON)),
        'translatableFields': !exists(json, 'translatableFields') ? undefined : json['translatableFields'],
    };
}

export function MessageAllOfToJSON(value?: MessageAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'eventRefType': EventRefTypeToJSON(value.eventRefType),
        'eventRefId': value.eventRefId,
        'messageType': MessageTypeToJSON(value.messageType),
        'subject': value.subject,
        'body': value.body,
        'status': MessageStatusToJSON(value.status),
        'expiry': value.expiry === undefined ? undefined : (value.expiry.toISOString()),
        'memberId': value.memberId,
        'translations': value.translations === undefined ? undefined : ((value.translations as Array<any>).map(TranslationToJSON)),
    };
}

