/* tslint:disable */
/* eslint-disable */
/**
 * Ziqni Gamification Cloud API
 * This is the gamification cloud for Ziqni
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EventRefType,
    EventRefTypeFromJSON,
    EventRefTypeFromJSONTyped,
    EventRefTypeToJSON,
    MessageAllOf,
    MessageAllOfFromJSON,
    MessageAllOfFromJSONTyped,
    MessageAllOfToJSON,
    MessageStatus,
    MessageStatusFromJSON,
    MessageStatusFromJSONTyped,
    MessageStatusToJSON,
    MessageType,
    MessageTypeFromJSON,
    MessageTypeFromJSONTyped,
    MessageTypeToJSON,
    ModelDefault,
    ModelDefaultFromJSON,
    ModelDefaultFromJSONTyped,
    ModelDefaultToJSON,
    OptionalModelFields,
    OptionalModelFieldsFromJSON,
    OptionalModelFieldsFromJSONTyped,
    OptionalModelFieldsToJSON,
    Translation,
    TranslationFromJSON,
    TranslationFromJSONTyped,
    TranslationToJSON,
} from './';

/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {EventRefType}
     * @memberof Message
     */
    eventRefType?: EventRefType;
    /**
     * The reference ID of the event object
     * @type {string}
     * @memberof Message
     */
    eventRefId?: string;
    /**
     * 
     * @type {MessageType}
     * @memberof Message
     */
    messageType?: MessageType;
    /**
     * The title of the message
     * @type {string}
     * @memberof Message
     */
    subject?: string;
    /**
     * The context of the message
     * @type {string}
     * @memberof Message
     */
    body?: string;
    /**
     * Unique system identifier of an Award
     * @type {string}
     * @memberof Message
     */
    readonly prize?: string;
    /**
     * 
     * @type {MessageStatus}
     * @memberof Message
     */
    status?: MessageStatus;
    /**
     * The time that the message will disappear after. ISO8601 timestamp
     * @type {Date}
     * @memberof Message
     */
    expiry?: Date;
    /**
     * The reference ID of the event object
     * @type {Array<string>}
     * @memberof Message
     */
    memberId?: Array<string>;
    /**
     * 
     * @type {Array<Translation>}
     * @memberof Message
     */
    translations?: Array<Translation>;
    /**
     * Message translatable fields
     * @type {Array<string>}
     * @memberof Message
     */
    readonly translatableFields?: Array<string>;
    /**
     * Ziqni id of the model
     * @type {string}
     * @memberof Message
     */
    id: string;
    /**
     * This is the space name which is linked to the account
     * @type {string}
     * @memberof Message
     */
    spaceName?: string;
    /**
     * ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
     * @type {Date}
     * @memberof Message
     */
    created?: Date;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof Message
     */
    customFields?: { [key: string]: object; };
    /**
     * A list of id's used to tag models
     * @type {Array<string>}
     * @memberof Message
     */
    tags?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Message
     */
    metadata?: { [key: string]: string; };
}

export function MessageFromJSON(json: any): Message {
    return MessageFromJSONTyped(json, false);
}

export function MessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): Message {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eventRefType': !exists(json, 'eventRefType') ? undefined : EventRefTypeFromJSON(json['eventRefType']),
        'eventRefId': !exists(json, 'eventRefId') ? undefined : json['eventRefId'],
        'messageType': !exists(json, 'messageType') ? undefined : MessageTypeFromJSON(json['messageType']),
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'body': !exists(json, 'body') ? undefined : json['body'],
        'prize': !exists(json, 'prize') ? undefined : json['prize'],
        'status': !exists(json, 'status') ? undefined : MessageStatusFromJSON(json['status']),
        'expiry': !exists(json, 'expiry') ? undefined : (new Date(json['expiry'])),
        'memberId': !exists(json, 'memberId') ? undefined : json['memberId'],
        'translations': !exists(json, 'translations') ? undefined : ((json['translations'] as Array<any>).map(TranslationFromJSON)),
        'translatableFields': !exists(json, 'translatableFields') ? undefined : json['translatableFields'],
        'id': json['id'],
        'spaceName': !exists(json, 'spaceName') ? undefined : json['spaceName'],
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
        'customFields': !exists(json, 'customFields') ? undefined : json['customFields'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
    };
}

export function MessageToJSON(value?: Message | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'eventRefType': EventRefTypeToJSON(value.eventRefType),
        'eventRefId': value.eventRefId,
        'messageType': MessageTypeToJSON(value.messageType),
        'subject': value.subject,
        'body': value.body,
        'status': MessageStatusToJSON(value.status),
        'expiry': value.expiry === undefined ? undefined : (value.expiry.toISOString()),
        'memberId': value.memberId,
        'translations': value.translations === undefined ? undefined : ((value.translations as Array<any>).map(TranslationToJSON)),
        'id': value.id,
        'spaceName': value.spaceName,
        'created': value.created === undefined ? undefined : (value.created.toISOString()),
        'customFields': value.customFields,
        'tags': value.tags,
        'metadata': value.metadata,
    };
}

