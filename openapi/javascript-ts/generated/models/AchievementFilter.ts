/* tslint:disable */
/* eslint-disable */
/**
 * Ziqni Gamification Cloud API
 * This is the gamification cloud for Ziqni
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    QuerySortBy,
    QuerySortByFromJSON,
    QuerySortByFromJSONTyped,
    QuerySortByToJSON,
    RangeQuery,
    RangeQueryFromJSON,
    RangeQueryFromJSONTyped,
    RangeQueryToJSON,
} from './';

/**
 * 
 * @export
 * @interface AchievementFilter
 */
export interface AchievementFilter {
    /**
     * 
     * @type {Array<string>}
     * @memberof AchievementFilter
     */
    productIds?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AchievementFilter
     */
    tags?: Array<string>;
    /**
     * 
     * @type {RangeQuery}
     * @memberof AchievementFilter
     */
    startDate?: RangeQuery;
    /**
     * 
     * @type {RangeQuery}
     * @memberof AchievementFilter
     */
    endDate?: RangeQuery;
    /**
     * 
     * @type {Array<string>}
     * @memberof AchievementFilter
     */
    ids?: Array<string>;
    /**
     * Achievement status
     * @type {Array<string>}
     * @memberof AchievementFilter
     */
    status?: Array<string>;
    /**
     * 
     * @type {Array<QuerySortBy>}
     * @memberof AchievementFilter
     */
    sortBy?: Array<QuerySortBy>;
    /**
     * 
     * @type {number}
     * @memberof AchievementFilter
     */
    skip?: number;
    /**
     * 
     * @type {number}
     * @memberof AchievementFilter
     */
    limit?: number;
    /**
     * Achievement status code
     * @type {Array<number>}
     * @memberof AchievementFilter
     */
    statusCode?: Array<number>;
    /**
     * Specify the constraints that need to be applied to the filter.
     * @type {Array<string>}
     * @memberof AchievementFilter
     */
    constraints?: Array<string>;
}

export function AchievementFilterFromJSON(json: any): AchievementFilter {
    return AchievementFilterFromJSONTyped(json, false);
}

export function AchievementFilterFromJSONTyped(json: any, ignoreDiscriminator: boolean): AchievementFilter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'productIds': !exists(json, 'productIds') ? undefined : json['productIds'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'startDate': !exists(json, 'startDate') ? undefined : RangeQueryFromJSON(json['startDate']),
        'endDate': !exists(json, 'endDate') ? undefined : RangeQueryFromJSON(json['endDate']),
        'ids': !exists(json, 'ids') ? undefined : json['ids'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'sortBy': !exists(json, 'sortBy') ? undefined : ((json['sortBy'] as Array<any>).map(QuerySortByFromJSON)),
        'skip': !exists(json, 'skip') ? undefined : json['skip'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'statusCode': !exists(json, 'statusCode') ? undefined : json['statusCode'],
        'constraints': !exists(json, 'constraints') ? undefined : json['constraints'],
    };
}

export function AchievementFilterToJSON(value?: AchievementFilter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'productIds': value.productIds,
        'tags': value.tags,
        'startDate': RangeQueryToJSON(value.startDate),
        'endDate': RangeQueryToJSON(value.endDate),
        'ids': value.ids,
        'status': value.status,
        'sortBy': value.sortBy === undefined ? undefined : ((value.sortBy as Array<any>).map(QuerySortByToJSON)),
        'skip': value.skip,
        'limit': value.limit,
        'statusCode': value.statusCode,
        'constraints': value.constraints,
    };
}

