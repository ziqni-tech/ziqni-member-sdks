/* tslint:disable */
/* eslint-disable */
/**
 * Ziqni Gamification Cloud API
 * This is the gamification cloud for Ziqni
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    RuleExpression,
    RuleExpressionFromJSON,
    RuleExpressionFromJSONTyped,
    RuleExpressionToJSON,
} from './';

/**
 * 
 * @export
 * @interface Rule
 */
export interface Rule {
    /**
     * The id of the context object this rule refers to
     * @type {string}
     * @memberof Rule
     */
    entityId?: string;
    /**
     * The action this rule describes, like start.contest, or points.awarded
     * @type {string}
     * @memberof Rule
     */
    action?: string;
    /**
     * The context of this rule like achievement, competition, or contest 
     * @type {string}
     * @memberof Rule
     */
    context?: string;
    /**
     * 
     * @type {RuleExpression}
     * @memberof Rule
     */
    rules?: RuleExpression;
    /**
     * Unique system identifier of a Main Rule
     * @type {string}
     * @memberof Rule
     */
    readonly id?: string;
    /**
     * 
     * @type {string}
     * @memberof Rule
     */
    entityType?: string;
}

export function RuleFromJSON(json: any): Rule {
    return RuleFromJSONTyped(json, false);
}

export function RuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Rule {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'entityId': !exists(json, 'entityId') ? undefined : json['entityId'],
        'action': !exists(json, 'action') ? undefined : json['action'],
        'context': !exists(json, 'context') ? undefined : json['context'],
        'rules': !exists(json, 'rules') ? undefined : RuleExpressionFromJSON(json['rules']),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'entityType': !exists(json, 'entityType') ? undefined : json['entityType'],
    };
}

export function RuleToJSON(value?: Rule | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'entityId': value.entityId,
        'action': value.action,
        'context': value.context,
        'rules': RuleExpressionToJSON(value.rules),
        'entityType': value.entityType,
    };
}

