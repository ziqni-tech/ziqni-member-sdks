/* tslint:disable */
/* eslint-disable */
/**
 * Ziqni Gamification Cloud API
 * This is the gamification cloud for Ziqni
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AwardAllOf,
    AwardAllOfFromJSON,
    AwardAllOfFromJSONTyped,
    AwardAllOfToJSON,
    EntityType,
    EntityTypeFromJSON,
    EntityTypeFromJSONTyped,
    EntityTypeToJSON,
    ModelDefault,
    ModelDefaultFromJSON,
    ModelDefaultFromJSONTyped,
    ModelDefaultToJSON,
    RewardTypeReduced,
    RewardTypeReducedFromJSON,
    RewardTypeReducedFromJSONTyped,
    RewardTypeReducedToJSON,
} from './';

/**
 * 
 * @export
 * @interface Award
 */
export interface Award {
    /**
     * A unique identifier of a Member
     * @type {string}
     * @memberof Award
     */
    memberId?: string;
    /**
     * A unique identifier of a Reward
     * @type {string}
     * @memberof Award
     */
    rewardId?: string;
    /**
     * 
     * @type {RewardTypeReduced}
     * @memberof Award
     */
    rewardType?: RewardTypeReduced;
    /**
     * If used in the context of contest this will associate with the rank of the leaderboard
     * @type {string}
     * @memberof Award
     */
    rewardRank?: string;
    /**
     * Numerical value of the reward that will be issued based on the reward type
     * @type {number}
     * @memberof Award
     */
    rewardValue?: number;
    /**
     * Delay of issuing a reward in minutes
     * @type {number}
     * @memberof Award
     */
    delay?: number;
    /**
     * 
     * @type {EntityType}
     * @memberof Award
     */
    entityType?: EntityType;
    /**
     * The Id of the contest or achievement related to this Award. Dependant on entityType
     * @type {string}
     * @memberof Award
     */
    entityId?: string;
    /**
     * ISO8601 timestamp for when an Award is available until a specific point in time. All records are stored in UTC time zone. * There can only be one time definition used for claim period either "pointInTime" or "period"
     * @type {Date}
     * @memberof Award
     */
    pointInTime?: Date;
    /**
     * Claimable duration in minutes, this value will set the controls until when the award is claimable. * There can only be one time definition used for claim period either "pointInTime" or "period"
     * @type {number}
     * @memberof Award
     */
    period?: number;
    /**
     * A list of Strings of groups that the reward belongs to.
     * @type {Array<string>}
     * @memberof Award
     */
    tags?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Award
     */
    metadata?: { [key: string]: string; };
    /**
     * Additional constraints, if the value is present it means the
     * @type {Array<string>}
     * @memberof Award
     */
    constraints?: Array<string>;
    /**
     * ISO8601 timestamp for when an Award is claimed. All records are stored in UTC time zone. *
     * @type {Date}
     * @memberof Award
     */
    claimedTimestamp?: Date;
    /**
     * Ziqni id of the model
     * @type {string}
     * @memberof Award
     */
    id: string;
    /**
     * This is the space name which is linked to the account
     * @type {string}
     * @memberof Award
     */
    spaceName?: string;
    /**
     * ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
     * @type {Date}
     * @memberof Award
     */
    created?: Date;
}

export function AwardFromJSON(json: any): Award {
    return AwardFromJSONTyped(json, false);
}

export function AwardFromJSONTyped(json: any, ignoreDiscriminator: boolean): Award {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'memberId': !exists(json, 'memberId') ? undefined : json['memberId'],
        'rewardId': !exists(json, 'rewardId') ? undefined : json['rewardId'],
        'rewardType': !exists(json, 'rewardType') ? undefined : RewardTypeReducedFromJSON(json['rewardType']),
        'rewardRank': !exists(json, 'rewardRank') ? undefined : json['rewardRank'],
        'rewardValue': !exists(json, 'rewardValue') ? undefined : json['rewardValue'],
        'delay': !exists(json, 'delay') ? undefined : json['delay'],
        'entityType': !exists(json, 'entityType') ? undefined : EntityTypeFromJSON(json['entityType']),
        'entityId': !exists(json, 'entityId') ? undefined : json['entityId'],
        'pointInTime': !exists(json, 'pointInTime') ? undefined : (new Date(json['pointInTime'])),
        'period': !exists(json, 'period') ? undefined : json['period'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'constraints': !exists(json, 'constraints') ? undefined : json['constraints'],
        'claimedTimestamp': !exists(json, 'claimedTimestamp') ? undefined : (new Date(json['claimedTimestamp'])),
        'id': json['id'],
        'spaceName': !exists(json, 'spaceName') ? undefined : json['spaceName'],
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
    };
}

export function AwardToJSON(value?: Award | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'memberId': value.memberId,
        'rewardId': value.rewardId,
        'rewardType': RewardTypeReducedToJSON(value.rewardType),
        'rewardRank': value.rewardRank,
        'rewardValue': value.rewardValue,
        'delay': value.delay,
        'entityType': EntityTypeToJSON(value.entityType),
        'entityId': value.entityId,
        'pointInTime': value.pointInTime === undefined ? undefined : (value.pointInTime.toISOString()),
        'period': value.period,
        'tags': value.tags,
        'metadata': value.metadata,
        'constraints': value.constraints,
        'claimedTimestamp': value.claimedTimestamp === undefined ? undefined : (value.claimedTimestamp.toISOString()),
        'id': value.id,
        'spaceName': value.spaceName,
        'created': value.created === undefined ? undefined : (value.created.toISOString()),
    };
}

