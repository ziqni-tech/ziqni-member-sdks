/* tslint:disable */
/* eslint-disable */
/**
 * Ziqni Gamification Cloud API
 * This is the gamification cloud for Ziqni
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ContestRequest,
    ContestRequestFromJSON,
    ContestRequestToJSON,
    ContestResponse,
    ContestResponseFromJSON,
    ContestResponseToJSON,
} from '../models';

export interface GetContestsRequest {
    contestRequest: ContestRequest;
}

/**
 * 
 */
export class ContestsApi extends runtime.BaseAPI {

    /**
     * Returns a list of contests for the provided member ref id and applied filters.
     * Get contests by member reference Id
     */
    async getContestsRaw(requestParameters: GetContestsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ContestResponse>> {
        if (requestParameters.contestRequest === null || requestParameters.contestRequest === undefined) {
            throw new runtime.RequiredError('contestRequest','Required parameter requestParameters.contestRequest was null or undefined when calling getContests.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["ViewContests"]);
        }

        const response = await this.request({
            path: `/contests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContestRequestToJSON(requestParameters.contestRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContestResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of contests for the provided member ref id and applied filters.
     * Get contests by member reference Id
     */
    async getContests(requestParameters: GetContestsRequest, initOverrides?: RequestInit): Promise<ContestResponse> {
        const response = await this.getContestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
