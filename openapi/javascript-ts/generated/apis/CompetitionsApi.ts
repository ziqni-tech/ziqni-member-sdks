/* tslint:disable */
/* eslint-disable */
/**
 * Ziqni Gamification Cloud API
 * This is the gamification cloud for Ziqni
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CompetitionRequest,
    CompetitionRequestFromJSON,
    CompetitionRequestToJSON,
    CompetitionResponse,
    CompetitionResponseFromJSON,
    CompetitionResponseToJSON,
} from '../models';

export interface GetCompetitionsRequest {
    competitionRequest: CompetitionRequest;
}

/**
 * 
 */
export class CompetitionsApi extends runtime.BaseAPI {

    /**
     * Returns a list of competitions for the provided member ref id and applied filters.
     * Get competitions by member reference id
     */
    async getCompetitionsRaw(requestParameters: GetCompetitionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CompetitionResponse>> {
        if (requestParameters.competitionRequest === null || requestParameters.competitionRequest === undefined) {
            throw new runtime.RequiredError('competitionRequest','Required parameter requestParameters.competitionRequest was null or undefined when calling getCompetitions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["ViewCompetitions"]);
        }

        const response = await this.request({
            path: `/competitions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompetitionRequestToJSON(requestParameters.competitionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompetitionResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of competitions for the provided member ref id and applied filters.
     * Get competitions by member reference id
     */
    async getCompetitions(requestParameters: GetCompetitionsRequest, initOverrides?: RequestInit): Promise<CompetitionResponse> {
        const response = await this.getCompetitionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
