/* tslint:disable */
/* eslint-disable */
/**
 * Ziqni Gamification Cloud API
 * This is the gamification cloud for Ziqni
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MemberOptinRequest,
    MemberOptinRequestFromJSON,
    MemberOptinRequestToJSON,
    MemberRequest,
    MemberRequestFromJSON,
    MemberRequestToJSON,
    MemberResponse,
    MemberResponseFromJSON,
    MemberResponseToJSON,
    MemberSessionRequest,
    MemberSessionRequestFromJSON,
    MemberSessionRequestToJSON,
    MemberSessionResponse,
    MemberSessionResponseFromJSON,
    MemberSessionResponseToJSON,
} from '../models';

export interface GetMemberRequest {
    memberRequest: MemberRequest;
}

export interface GetMemberOptinInfoRequest {
    memberOptinRequest: MemberOptinRequest;
}

export interface GetMemberSessionRequest {
    memberSessionRequest: MemberSessionRequest;
}

/**
 * 
 */
export class MembersApi extends runtime.BaseAPI {

    /**
     * Returns member information for the provided member reference id
     * Get member information by member reference id
     */
    async getMemberRaw(requestParameters: GetMemberRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MemberResponse>> {
        if (requestParameters.memberRequest === null || requestParameters.memberRequest === undefined) {
            throw new runtime.RequiredError('memberRequest','Required parameter requestParameters.memberRequest was null or undefined when calling getMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["ViewMembers"]);
        }

        const response = await this.request({
            path: `/member-info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MemberRequestToJSON(requestParameters.memberRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberResponseFromJSON(jsonValue));
    }

    /**
     * Returns member information for the provided member reference id
     * Get member information by member reference id
     */
    async getMember(requestParameters: GetMemberRequest, initOverrides?: RequestInit): Promise<MemberResponse> {
        const response = await this.getMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of member optin information
     * Get member optin information
     */
    async getMemberOptinInfoRaw(requestParameters: GetMemberOptinInfoRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MemberResponse>> {
        if (requestParameters.memberOptinRequest === null || requestParameters.memberOptinRequest === undefined) {
            throw new runtime.RequiredError('memberOptinRequest','Required parameter requestParameters.memberOptinRequest was null or undefined when calling getMemberOptinInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["ViewMembers"]);
        }

        const response = await this.request({
            path: `/member-manage-optin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MemberOptinRequestToJSON(requestParameters.memberOptinRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of member optin information
     * Get member optin information
     */
    async getMemberOptinInfo(requestParameters: GetMemberOptinInfoRequest, initOverrides?: RequestInit): Promise<MemberResponse> {
        const response = await this.getMemberOptinInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns member\'s active session information.
     * Get member session by member reference id
     */
    async getMemberSessionRaw(requestParameters: GetMemberSessionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MemberSessionResponse>> {
        if (requestParameters.memberSessionRequest === null || requestParameters.memberSessionRequest === undefined) {
            throw new runtime.RequiredError('memberSessionRequest','Required parameter requestParameters.memberSessionRequest was null or undefined when calling getMemberSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["ViewMembers"]);
        }

        const response = await this.request({
            path: `/member-session`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MemberSessionRequestToJSON(requestParameters.memberSessionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberSessionResponseFromJSON(jsonValue));
    }

    /**
     * Returns member\'s active session information.
     * Get member session by member reference id
     */
    async getMemberSession(requestParameters: GetMemberSessionRequest, initOverrides?: RequestInit): Promise<MemberSessionResponse> {
        const response = await this.getMemberSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
