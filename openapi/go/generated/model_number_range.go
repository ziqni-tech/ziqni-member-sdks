/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NumberRange 
type NumberRange struct {
	// 
	MoreThan *int64 `json:"moreThan,omitempty"`
	// 
	LessThan *int64 `json:"lessThan,omitempty"`
}

// NewNumberRange instantiates a new NumberRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNumberRange() *NumberRange {
	this := NumberRange{}
	return &this
}

// NewNumberRangeWithDefaults instantiates a new NumberRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNumberRangeWithDefaults() *NumberRange {
	this := NumberRange{}
	return &this
}

// GetMoreThan returns the MoreThan field value if set, zero value otherwise.
func (o *NumberRange) GetMoreThan() int64 {
	if o == nil || o.MoreThan == nil {
		var ret int64
		return ret
	}
	return *o.MoreThan
}

// GetMoreThanOk returns a tuple with the MoreThan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberRange) GetMoreThanOk() (*int64, bool) {
	if o == nil || o.MoreThan == nil {
		return nil, false
	}
	return o.MoreThan, true
}

// HasMoreThan returns a boolean if a field has been set.
func (o *NumberRange) HasMoreThan() bool {
	if o != nil && o.MoreThan != nil {
		return true
	}

	return false
}

// SetMoreThan gets a reference to the given int64 and assigns it to the MoreThan field.
func (o *NumberRange) SetMoreThan(v int64) {
	o.MoreThan = &v
}

// GetLessThan returns the LessThan field value if set, zero value otherwise.
func (o *NumberRange) GetLessThan() int64 {
	if o == nil || o.LessThan == nil {
		var ret int64
		return ret
	}
	return *o.LessThan
}

// GetLessThanOk returns a tuple with the LessThan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberRange) GetLessThanOk() (*int64, bool) {
	if o == nil || o.LessThan == nil {
		return nil, false
	}
	return o.LessThan, true
}

// HasLessThan returns a boolean if a field has been set.
func (o *NumberRange) HasLessThan() bool {
	if o != nil && o.LessThan != nil {
		return true
	}

	return false
}

// SetLessThan gets a reference to the given int64 and assigns it to the LessThan field.
func (o *NumberRange) SetLessThan(v int64) {
	o.LessThan = &v
}

func (o NumberRange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MoreThan != nil {
		toSerialize["moreThan"] = o.MoreThan
	}
	if o.LessThan != nil {
		toSerialize["lessThan"] = o.LessThan
	}
	return json.Marshal(toSerialize)
}

type NullableNumberRange struct {
	value *NumberRange
	isSet bool
}

func (v NullableNumberRange) Get() *NumberRange {
	return v.value
}

func (v *NullableNumberRange) Set(val *NumberRange) {
	v.value = val
	v.isSet = true
}

func (v NullableNumberRange) IsSet() bool {
	return v.isSet
}

func (v *NullableNumberRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumberRange(val *NumberRange) *NullableNumberRange {
	return &NullableNumberRange{value: val, isSet: true}
}

func (v NullableNumberRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumberRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


