/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EntityChangeSubscription Subscribes a client to receive out-of-band data
type EntityChangeSubscription struct {
	// 
	EntityType string `json:"entityType"`
	// 
	SubscriptionId string `json:"subscriptionId"`
	// Constraints of this subscription like gauranteedDelivery
	Constraints []string `json:"constraints,omitempty"`
	// /user/queue/callbacks
	Topic *string `json:"topic,omitempty"`
}

// NewEntityChangeSubscription instantiates a new EntityChangeSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityChangeSubscription(entityType string, subscriptionId string) *EntityChangeSubscription {
	this := EntityChangeSubscription{}
	this.EntityType = entityType
	this.SubscriptionId = subscriptionId
	return &this
}

// NewEntityChangeSubscriptionWithDefaults instantiates a new EntityChangeSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityChangeSubscriptionWithDefaults() *EntityChangeSubscription {
	this := EntityChangeSubscription{}
	return &this
}

// GetEntityType returns the EntityType field value
func (o *EntityChangeSubscription) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *EntityChangeSubscription) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *EntityChangeSubscription) SetEntityType(v string) {
	o.EntityType = v
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *EntityChangeSubscription) GetSubscriptionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *EntityChangeSubscription) GetSubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *EntityChangeSubscription) SetSubscriptionId(v string) {
	o.SubscriptionId = v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *EntityChangeSubscription) GetConstraints() []string {
	if o == nil || o.Constraints == nil {
		var ret []string
		return ret
	}
	return o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityChangeSubscription) GetConstraintsOk() ([]string, bool) {
	if o == nil || o.Constraints == nil {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *EntityChangeSubscription) HasConstraints() bool {
	if o != nil && o.Constraints != nil {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given []string and assigns it to the Constraints field.
func (o *EntityChangeSubscription) SetConstraints(v []string) {
	o.Constraints = v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *EntityChangeSubscription) GetTopic() string {
	if o == nil || o.Topic == nil {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityChangeSubscription) GetTopicOk() (*string, bool) {
	if o == nil || o.Topic == nil {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *EntityChangeSubscription) HasTopic() bool {
	if o != nil && o.Topic != nil {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *EntityChangeSubscription) SetTopic(v string) {
	o.Topic = &v
}

func (o EntityChangeSubscription) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["entityType"] = o.EntityType
	}
	if true {
		toSerialize["subscriptionId"] = o.SubscriptionId
	}
	if o.Constraints != nil {
		toSerialize["constraints"] = o.Constraints
	}
	if o.Topic != nil {
		toSerialize["topic"] = o.Topic
	}
	return json.Marshal(toSerialize)
}

type NullableEntityChangeSubscription struct {
	value *EntityChangeSubscription
	isSet bool
}

func (v NullableEntityChangeSubscription) Get() *EntityChangeSubscription {
	return v.value
}

func (v *NullableEntityChangeSubscription) Set(val *EntityChangeSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityChangeSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityChangeSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityChangeSubscription(val *EntityChangeSubscription) *NullableEntityChangeSubscription {
	return &NullableEntityChangeSubscription{value: val, isSet: true}
}

func (v NullableEntityChangeSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityChangeSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


