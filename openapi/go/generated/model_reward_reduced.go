/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RewardReduced 
type RewardReduced struct {
	// If used in the context of contest this will associate with the rank of the leaderboard
	RewardRank *string `json:"rewardRank,omitempty"`
	// The name of a reward
	Name *string `json:"name,omitempty"`
	// Numerical value of the reward that will be issued based on the reward type
	RewardValue *float64 `json:"rewardValue,omitempty"`
	// Reward Type key
	RewardType *string `json:"rewardType,omitempty"`
	// A unique id of the Reward Type
	RewardTypeId *string `json:"rewardTypeId,omitempty"`
}

// NewRewardReduced instantiates a new RewardReduced object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRewardReduced() *RewardReduced {
	this := RewardReduced{}
	return &this
}

// NewRewardReducedWithDefaults instantiates a new RewardReduced object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRewardReducedWithDefaults() *RewardReduced {
	this := RewardReduced{}
	return &this
}

// GetRewardRank returns the RewardRank field value if set, zero value otherwise.
func (o *RewardReduced) GetRewardRank() string {
	if o == nil || o.RewardRank == nil {
		var ret string
		return ret
	}
	return *o.RewardRank
}

// GetRewardRankOk returns a tuple with the RewardRank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RewardReduced) GetRewardRankOk() (*string, bool) {
	if o == nil || o.RewardRank == nil {
		return nil, false
	}
	return o.RewardRank, true
}

// HasRewardRank returns a boolean if a field has been set.
func (o *RewardReduced) HasRewardRank() bool {
	if o != nil && o.RewardRank != nil {
		return true
	}

	return false
}

// SetRewardRank gets a reference to the given string and assigns it to the RewardRank field.
func (o *RewardReduced) SetRewardRank(v string) {
	o.RewardRank = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RewardReduced) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RewardReduced) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RewardReduced) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RewardReduced) SetName(v string) {
	o.Name = &v
}

// GetRewardValue returns the RewardValue field value if set, zero value otherwise.
func (o *RewardReduced) GetRewardValue() float64 {
	if o == nil || o.RewardValue == nil {
		var ret float64
		return ret
	}
	return *o.RewardValue
}

// GetRewardValueOk returns a tuple with the RewardValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RewardReduced) GetRewardValueOk() (*float64, bool) {
	if o == nil || o.RewardValue == nil {
		return nil, false
	}
	return o.RewardValue, true
}

// HasRewardValue returns a boolean if a field has been set.
func (o *RewardReduced) HasRewardValue() bool {
	if o != nil && o.RewardValue != nil {
		return true
	}

	return false
}

// SetRewardValue gets a reference to the given float64 and assigns it to the RewardValue field.
func (o *RewardReduced) SetRewardValue(v float64) {
	o.RewardValue = &v
}

// GetRewardType returns the RewardType field value if set, zero value otherwise.
func (o *RewardReduced) GetRewardType() string {
	if o == nil || o.RewardType == nil {
		var ret string
		return ret
	}
	return *o.RewardType
}

// GetRewardTypeOk returns a tuple with the RewardType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RewardReduced) GetRewardTypeOk() (*string, bool) {
	if o == nil || o.RewardType == nil {
		return nil, false
	}
	return o.RewardType, true
}

// HasRewardType returns a boolean if a field has been set.
func (o *RewardReduced) HasRewardType() bool {
	if o != nil && o.RewardType != nil {
		return true
	}

	return false
}

// SetRewardType gets a reference to the given string and assigns it to the RewardType field.
func (o *RewardReduced) SetRewardType(v string) {
	o.RewardType = &v
}

// GetRewardTypeId returns the RewardTypeId field value if set, zero value otherwise.
func (o *RewardReduced) GetRewardTypeId() string {
	if o == nil || o.RewardTypeId == nil {
		var ret string
		return ret
	}
	return *o.RewardTypeId
}

// GetRewardTypeIdOk returns a tuple with the RewardTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RewardReduced) GetRewardTypeIdOk() (*string, bool) {
	if o == nil || o.RewardTypeId == nil {
		return nil, false
	}
	return o.RewardTypeId, true
}

// HasRewardTypeId returns a boolean if a field has been set.
func (o *RewardReduced) HasRewardTypeId() bool {
	if o != nil && o.RewardTypeId != nil {
		return true
	}

	return false
}

// SetRewardTypeId gets a reference to the given string and assigns it to the RewardTypeId field.
func (o *RewardReduced) SetRewardTypeId(v string) {
	o.RewardTypeId = &v
}

func (o RewardReduced) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RewardRank != nil {
		toSerialize["rewardRank"] = o.RewardRank
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.RewardValue != nil {
		toSerialize["rewardValue"] = o.RewardValue
	}
	if o.RewardType != nil {
		toSerialize["rewardType"] = o.RewardType
	}
	if o.RewardTypeId != nil {
		toSerialize["rewardTypeId"] = o.RewardTypeId
	}
	return json.Marshal(toSerialize)
}

type NullableRewardReduced struct {
	value *RewardReduced
	isSet bool
}

func (v NullableRewardReduced) Get() *RewardReduced {
	return v.value
}

func (v *NullableRewardReduced) Set(val *RewardReduced) {
	v.value = val
	v.isSet = true
}

func (v NullableRewardReduced) IsSet() bool {
	return v.isSet
}

func (v *NullableRewardReduced) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRewardReduced(val *RewardReduced) *NullableRewardReduced {
	return &NullableRewardReduced{value: val, isSet: true}
}

func (v NullableRewardReduced) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRewardReduced) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


