/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AchievementAllOf struct for AchievementAllOf
type AchievementAllOf struct {
	// 
	Name *string `json:"name,omitempty"`
	// 
	Description *string `json:"description,omitempty"`
	// 
	TermsAndConditions *string `json:"termsAndConditions,omitempty"`
	// Additional constraints, if set means true
	Constraints []string `json:"constraints,omitempty"`
	// Maximum number of issued achievements
	MaxNumberOfIssues *int32 `json:"maxNumberOfIssues,omitempty"`
	Scheduling *Scheduling `json:"scheduling,omitempty"`
	DependantOn *Dependancy `json:"dependantOn,omitempty"`
	// Achievement status
	Status *string `json:"status,omitempty"`
	// 
	StatusCode *int32 `json:"statusCode,omitempty"`
	MemberTagsFilter *DependantOn `json:"memberTagsFilter,omitempty"`
}

// NewAchievementAllOf instantiates a new AchievementAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAchievementAllOf() *AchievementAllOf {
	this := AchievementAllOf{}
	return &this
}

// NewAchievementAllOfWithDefaults instantiates a new AchievementAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAchievementAllOfWithDefaults() *AchievementAllOf {
	this := AchievementAllOf{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AchievementAllOf) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementAllOf) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AchievementAllOf) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AchievementAllOf) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AchievementAllOf) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementAllOf) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AchievementAllOf) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AchievementAllOf) SetDescription(v string) {
	o.Description = &v
}

// GetTermsAndConditions returns the TermsAndConditions field value if set, zero value otherwise.
func (o *AchievementAllOf) GetTermsAndConditions() string {
	if o == nil || o.TermsAndConditions == nil {
		var ret string
		return ret
	}
	return *o.TermsAndConditions
}

// GetTermsAndConditionsOk returns a tuple with the TermsAndConditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementAllOf) GetTermsAndConditionsOk() (*string, bool) {
	if o == nil || o.TermsAndConditions == nil {
		return nil, false
	}
	return o.TermsAndConditions, true
}

// HasTermsAndConditions returns a boolean if a field has been set.
func (o *AchievementAllOf) HasTermsAndConditions() bool {
	if o != nil && o.TermsAndConditions != nil {
		return true
	}

	return false
}

// SetTermsAndConditions gets a reference to the given string and assigns it to the TermsAndConditions field.
func (o *AchievementAllOf) SetTermsAndConditions(v string) {
	o.TermsAndConditions = &v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *AchievementAllOf) GetConstraints() []string {
	if o == nil || o.Constraints == nil {
		var ret []string
		return ret
	}
	return o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementAllOf) GetConstraintsOk() ([]string, bool) {
	if o == nil || o.Constraints == nil {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *AchievementAllOf) HasConstraints() bool {
	if o != nil && o.Constraints != nil {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given []string and assigns it to the Constraints field.
func (o *AchievementAllOf) SetConstraints(v []string) {
	o.Constraints = v
}

// GetMaxNumberOfIssues returns the MaxNumberOfIssues field value if set, zero value otherwise.
func (o *AchievementAllOf) GetMaxNumberOfIssues() int32 {
	if o == nil || o.MaxNumberOfIssues == nil {
		var ret int32
		return ret
	}
	return *o.MaxNumberOfIssues
}

// GetMaxNumberOfIssuesOk returns a tuple with the MaxNumberOfIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementAllOf) GetMaxNumberOfIssuesOk() (*int32, bool) {
	if o == nil || o.MaxNumberOfIssues == nil {
		return nil, false
	}
	return o.MaxNumberOfIssues, true
}

// HasMaxNumberOfIssues returns a boolean if a field has been set.
func (o *AchievementAllOf) HasMaxNumberOfIssues() bool {
	if o != nil && o.MaxNumberOfIssues != nil {
		return true
	}

	return false
}

// SetMaxNumberOfIssues gets a reference to the given int32 and assigns it to the MaxNumberOfIssues field.
func (o *AchievementAllOf) SetMaxNumberOfIssues(v int32) {
	o.MaxNumberOfIssues = &v
}

// GetScheduling returns the Scheduling field value if set, zero value otherwise.
func (o *AchievementAllOf) GetScheduling() Scheduling {
	if o == nil || o.Scheduling == nil {
		var ret Scheduling
		return ret
	}
	return *o.Scheduling
}

// GetSchedulingOk returns a tuple with the Scheduling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementAllOf) GetSchedulingOk() (*Scheduling, bool) {
	if o == nil || o.Scheduling == nil {
		return nil, false
	}
	return o.Scheduling, true
}

// HasScheduling returns a boolean if a field has been set.
func (o *AchievementAllOf) HasScheduling() bool {
	if o != nil && o.Scheduling != nil {
		return true
	}

	return false
}

// SetScheduling gets a reference to the given Scheduling and assigns it to the Scheduling field.
func (o *AchievementAllOf) SetScheduling(v Scheduling) {
	o.Scheduling = &v
}

// GetDependantOn returns the DependantOn field value if set, zero value otherwise.
func (o *AchievementAllOf) GetDependantOn() Dependancy {
	if o == nil || o.DependantOn == nil {
		var ret Dependancy
		return ret
	}
	return *o.DependantOn
}

// GetDependantOnOk returns a tuple with the DependantOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementAllOf) GetDependantOnOk() (*Dependancy, bool) {
	if o == nil || o.DependantOn == nil {
		return nil, false
	}
	return o.DependantOn, true
}

// HasDependantOn returns a boolean if a field has been set.
func (o *AchievementAllOf) HasDependantOn() bool {
	if o != nil && o.DependantOn != nil {
		return true
	}

	return false
}

// SetDependantOn gets a reference to the given Dependancy and assigns it to the DependantOn field.
func (o *AchievementAllOf) SetDependantOn(v Dependancy) {
	o.DependantOn = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AchievementAllOf) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementAllOf) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AchievementAllOf) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AchievementAllOf) SetStatus(v string) {
	o.Status = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *AchievementAllOf) GetStatusCode() int32 {
	if o == nil || o.StatusCode == nil {
		var ret int32
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementAllOf) GetStatusCodeOk() (*int32, bool) {
	if o == nil || o.StatusCode == nil {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *AchievementAllOf) HasStatusCode() bool {
	if o != nil && o.StatusCode != nil {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given int32 and assigns it to the StatusCode field.
func (o *AchievementAllOf) SetStatusCode(v int32) {
	o.StatusCode = &v
}

// GetMemberTagsFilter returns the MemberTagsFilter field value if set, zero value otherwise.
func (o *AchievementAllOf) GetMemberTagsFilter() DependantOn {
	if o == nil || o.MemberTagsFilter == nil {
		var ret DependantOn
		return ret
	}
	return *o.MemberTagsFilter
}

// GetMemberTagsFilterOk returns a tuple with the MemberTagsFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementAllOf) GetMemberTagsFilterOk() (*DependantOn, bool) {
	if o == nil || o.MemberTagsFilter == nil {
		return nil, false
	}
	return o.MemberTagsFilter, true
}

// HasMemberTagsFilter returns a boolean if a field has been set.
func (o *AchievementAllOf) HasMemberTagsFilter() bool {
	if o != nil && o.MemberTagsFilter != nil {
		return true
	}

	return false
}

// SetMemberTagsFilter gets a reference to the given DependantOn and assigns it to the MemberTagsFilter field.
func (o *AchievementAllOf) SetMemberTagsFilter(v DependantOn) {
	o.MemberTagsFilter = &v
}

func (o AchievementAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.TermsAndConditions != nil {
		toSerialize["termsAndConditions"] = o.TermsAndConditions
	}
	if o.Constraints != nil {
		toSerialize["constraints"] = o.Constraints
	}
	if o.MaxNumberOfIssues != nil {
		toSerialize["maxNumberOfIssues"] = o.MaxNumberOfIssues
	}
	if o.Scheduling != nil {
		toSerialize["scheduling"] = o.Scheduling
	}
	if o.DependantOn != nil {
		toSerialize["dependantOn"] = o.DependantOn
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.StatusCode != nil {
		toSerialize["statusCode"] = o.StatusCode
	}
	if o.MemberTagsFilter != nil {
		toSerialize["memberTagsFilter"] = o.MemberTagsFilter
	}
	return json.Marshal(toSerialize)
}

type NullableAchievementAllOf struct {
	value *AchievementAllOf
	isSet bool
}

func (v NullableAchievementAllOf) Get() *AchievementAllOf {
	return v.value
}

func (v *NullableAchievementAllOf) Set(val *AchievementAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAchievementAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAchievementAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAchievementAllOf(val *AchievementAllOf) *NullableAchievementAllOf {
	return &NullableAchievementAllOf{value: val, isSet: true}
}

func (v NullableAchievementAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAchievementAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


