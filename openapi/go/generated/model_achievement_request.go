/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AchievementRequest 
type AchievementRequest struct {
	AchievementFilter *AchievementFilter `json:"achievementFilter,omitempty"`
	// The language codes can be found in the settings/transalations section of the back office
	LanguageKey *string `json:"languageKey,omitempty"`
}

// NewAchievementRequest instantiates a new AchievementRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAchievementRequest() *AchievementRequest {
	this := AchievementRequest{}
	return &this
}

// NewAchievementRequestWithDefaults instantiates a new AchievementRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAchievementRequestWithDefaults() *AchievementRequest {
	this := AchievementRequest{}
	return &this
}

// GetAchievementFilter returns the AchievementFilter field value if set, zero value otherwise.
func (o *AchievementRequest) GetAchievementFilter() AchievementFilter {
	if o == nil || o.AchievementFilter == nil {
		var ret AchievementFilter
		return ret
	}
	return *o.AchievementFilter
}

// GetAchievementFilterOk returns a tuple with the AchievementFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementRequest) GetAchievementFilterOk() (*AchievementFilter, bool) {
	if o == nil || o.AchievementFilter == nil {
		return nil, false
	}
	return o.AchievementFilter, true
}

// HasAchievementFilter returns a boolean if a field has been set.
func (o *AchievementRequest) HasAchievementFilter() bool {
	if o != nil && o.AchievementFilter != nil {
		return true
	}

	return false
}

// SetAchievementFilter gets a reference to the given AchievementFilter and assigns it to the AchievementFilter field.
func (o *AchievementRequest) SetAchievementFilter(v AchievementFilter) {
	o.AchievementFilter = &v
}

// GetLanguageKey returns the LanguageKey field value if set, zero value otherwise.
func (o *AchievementRequest) GetLanguageKey() string {
	if o == nil || o.LanguageKey == nil {
		var ret string
		return ret
	}
	return *o.LanguageKey
}

// GetLanguageKeyOk returns a tuple with the LanguageKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementRequest) GetLanguageKeyOk() (*string, bool) {
	if o == nil || o.LanguageKey == nil {
		return nil, false
	}
	return o.LanguageKey, true
}

// HasLanguageKey returns a boolean if a field has been set.
func (o *AchievementRequest) HasLanguageKey() bool {
	if o != nil && o.LanguageKey != nil {
		return true
	}

	return false
}

// SetLanguageKey gets a reference to the given string and assigns it to the LanguageKey field.
func (o *AchievementRequest) SetLanguageKey(v string) {
	o.LanguageKey = &v
}

func (o AchievementRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AchievementFilter != nil {
		toSerialize["achievementFilter"] = o.AchievementFilter
	}
	if o.LanguageKey != nil {
		toSerialize["languageKey"] = o.LanguageKey
	}
	return json.Marshal(toSerialize)
}

type NullableAchievementRequest struct {
	value *AchievementRequest
	isSet bool
}

func (v NullableAchievementRequest) Get() *AchievementRequest {
	return v.value
}

func (v *NullableAchievementRequest) Set(val *AchievementRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAchievementRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAchievementRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAchievementRequest(val *AchievementRequest) *NullableAchievementRequest {
	return &NullableAchievementRequest{value: val, isSet: true}
}

func (v NullableAchievementRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAchievementRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


