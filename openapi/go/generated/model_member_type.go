/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MemberType Determines a member type
type MemberType string

// List of MemberType
const (
	INDIVIDUAL MemberType = "Individual"
)

// All allowed values of MemberType enum
var AllowedMemberTypeEnumValues = []MemberType{
	"Individual",
}

func (v *MemberType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MemberType(value)
	for _, existing := range AllowedMemberTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MemberType", value)
}

// NewMemberTypeFromValue returns a pointer to a valid MemberType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMemberTypeFromValue(v string) (*MemberType, error) {
	ev := MemberType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MemberType: valid values are %v", v, AllowedMemberTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MemberType) IsValid() bool {
	for _, existing := range AllowedMemberTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MemberType value
func (v MemberType) Ptr() *MemberType {
	return &v
}

type NullableMemberType struct {
	value *MemberType
	isSet bool
}

func (v NullableMemberType) Get() *MemberType {
	return v.value
}

func (v *NullableMemberType) Set(val *MemberType) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberType) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberType(val *MemberType) *NullableMemberType {
	return &NullableMemberType{value: val, isSet: true}
}

func (v NullableMemberType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

