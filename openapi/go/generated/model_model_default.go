/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ModelDefault 
type ModelDefault struct {
	// Ziqni id of the model
	Id string `json:"id"`
	// This is the space name which is linked to the account
	SpaceName *string `json:"spaceName,omitempty"`
	// ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
	Created *time.Time `json:"created,omitempty"`
}

// NewModelDefault instantiates a new ModelDefault object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelDefault(id string) *ModelDefault {
	this := ModelDefault{}
	this.Id = id
	return &this
}

// NewModelDefaultWithDefaults instantiates a new ModelDefault object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelDefaultWithDefaults() *ModelDefault {
	this := ModelDefault{}
	return &this
}

// GetId returns the Id field value
func (o *ModelDefault) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ModelDefault) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ModelDefault) SetId(v string) {
	o.Id = v
}

// GetSpaceName returns the SpaceName field value if set, zero value otherwise.
func (o *ModelDefault) GetSpaceName() string {
	if o == nil || o.SpaceName == nil {
		var ret string
		return ret
	}
	return *o.SpaceName
}

// GetSpaceNameOk returns a tuple with the SpaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelDefault) GetSpaceNameOk() (*string, bool) {
	if o == nil || o.SpaceName == nil {
		return nil, false
	}
	return o.SpaceName, true
}

// HasSpaceName returns a boolean if a field has been set.
func (o *ModelDefault) HasSpaceName() bool {
	if o != nil && o.SpaceName != nil {
		return true
	}

	return false
}

// SetSpaceName gets a reference to the given string and assigns it to the SpaceName field.
func (o *ModelDefault) SetSpaceName(v string) {
	o.SpaceName = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ModelDefault) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelDefault) GetCreatedOk() (*time.Time, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ModelDefault) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *ModelDefault) SetCreated(v time.Time) {
	o.Created = &v
}

func (o ModelDefault) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.SpaceName != nil {
		toSerialize["spaceName"] = o.SpaceName
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	return json.Marshal(toSerialize)
}

type NullableModelDefault struct {
	value *ModelDefault
	isSet bool
}

func (v NullableModelDefault) Get() *ModelDefault {
	return v.value
}

func (v *NullableModelDefault) Set(val *ModelDefault) {
	v.value = val
	v.isSet = true
}

func (v NullableModelDefault) IsSet() bool {
	return v.isSet
}

func (v *NullableModelDefault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelDefault(val *ModelDefault) *NullableModelDefault {
	return &NullableModelDefault{value: val, isSet: true}
}

func (v NullableModelDefault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelDefault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


