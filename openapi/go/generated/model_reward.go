/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Reward 
type Reward struct {
	EntityType *EntityType `json:"entityType,omitempty"`
	// A unique identifier of an achievement or contest. Dependant on entityType
	EntityId *string `json:"entityId,omitempty"`
	// The name of a reward
	Name *string `json:"name,omitempty"`
	// The description of a Reward
	Description *string `json:"description,omitempty"`
	// If used in the context of contest this will associate with the rank of the leaderboard
	RewardRank *string `json:"rewardRank,omitempty"`
	// Numerical value of the reward that will be issued based on the reward type
	RewardValue *float64 `json:"rewardValue,omitempty"`
	RewardType *RewardTypeReduced `json:"rewardType,omitempty"`
	// An Icon id that has been pre uploaded to the system to display for reward
	Icon *string `json:"icon,omitempty"`
	// how many of thsese rewards are
	IssueLimit *int32 `json:"issueLimit,omitempty"`
	// Delay of issuing a reward in minutes
	Delay *int32 `json:"delay,omitempty"`
	// ISO8601 timestamp for when a Reward is available until a specific point in time. All records are stored in UTC time zone
	PointInTime *time.Time `json:"pointInTime,omitempty"`
	// Reward available for a period of time from issuing in minutes
	Period *int32 `json:"period,omitempty"`
	// Additional constraints
	Constraints []string `json:"constraints,omitempty"`
}

// NewReward instantiates a new Reward object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReward() *Reward {
	this := Reward{}
	return &this
}

// NewRewardWithDefaults instantiates a new Reward object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRewardWithDefaults() *Reward {
	this := Reward{}
	return &this
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *Reward) GetEntityType() EntityType {
	if o == nil || o.EntityType == nil {
		var ret EntityType
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reward) GetEntityTypeOk() (*EntityType, bool) {
	if o == nil || o.EntityType == nil {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *Reward) HasEntityType() bool {
	if o != nil && o.EntityType != nil {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given EntityType and assigns it to the EntityType field.
func (o *Reward) SetEntityType(v EntityType) {
	o.EntityType = &v
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *Reward) GetEntityId() string {
	if o == nil || o.EntityId == nil {
		var ret string
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reward) GetEntityIdOk() (*string, bool) {
	if o == nil || o.EntityId == nil {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *Reward) HasEntityId() bool {
	if o != nil && o.EntityId != nil {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given string and assigns it to the EntityId field.
func (o *Reward) SetEntityId(v string) {
	o.EntityId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Reward) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reward) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Reward) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Reward) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Reward) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reward) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Reward) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Reward) SetDescription(v string) {
	o.Description = &v
}

// GetRewardRank returns the RewardRank field value if set, zero value otherwise.
func (o *Reward) GetRewardRank() string {
	if o == nil || o.RewardRank == nil {
		var ret string
		return ret
	}
	return *o.RewardRank
}

// GetRewardRankOk returns a tuple with the RewardRank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reward) GetRewardRankOk() (*string, bool) {
	if o == nil || o.RewardRank == nil {
		return nil, false
	}
	return o.RewardRank, true
}

// HasRewardRank returns a boolean if a field has been set.
func (o *Reward) HasRewardRank() bool {
	if o != nil && o.RewardRank != nil {
		return true
	}

	return false
}

// SetRewardRank gets a reference to the given string and assigns it to the RewardRank field.
func (o *Reward) SetRewardRank(v string) {
	o.RewardRank = &v
}

// GetRewardValue returns the RewardValue field value if set, zero value otherwise.
func (o *Reward) GetRewardValue() float64 {
	if o == nil || o.RewardValue == nil {
		var ret float64
		return ret
	}
	return *o.RewardValue
}

// GetRewardValueOk returns a tuple with the RewardValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reward) GetRewardValueOk() (*float64, bool) {
	if o == nil || o.RewardValue == nil {
		return nil, false
	}
	return o.RewardValue, true
}

// HasRewardValue returns a boolean if a field has been set.
func (o *Reward) HasRewardValue() bool {
	if o != nil && o.RewardValue != nil {
		return true
	}

	return false
}

// SetRewardValue gets a reference to the given float64 and assigns it to the RewardValue field.
func (o *Reward) SetRewardValue(v float64) {
	o.RewardValue = &v
}

// GetRewardType returns the RewardType field value if set, zero value otherwise.
func (o *Reward) GetRewardType() RewardTypeReduced {
	if o == nil || o.RewardType == nil {
		var ret RewardTypeReduced
		return ret
	}
	return *o.RewardType
}

// GetRewardTypeOk returns a tuple with the RewardType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reward) GetRewardTypeOk() (*RewardTypeReduced, bool) {
	if o == nil || o.RewardType == nil {
		return nil, false
	}
	return o.RewardType, true
}

// HasRewardType returns a boolean if a field has been set.
func (o *Reward) HasRewardType() bool {
	if o != nil && o.RewardType != nil {
		return true
	}

	return false
}

// SetRewardType gets a reference to the given RewardTypeReduced and assigns it to the RewardType field.
func (o *Reward) SetRewardType(v RewardTypeReduced) {
	o.RewardType = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *Reward) GetIcon() string {
	if o == nil || o.Icon == nil {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reward) GetIconOk() (*string, bool) {
	if o == nil || o.Icon == nil {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *Reward) HasIcon() bool {
	if o != nil && o.Icon != nil {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *Reward) SetIcon(v string) {
	o.Icon = &v
}

// GetIssueLimit returns the IssueLimit field value if set, zero value otherwise.
func (o *Reward) GetIssueLimit() int32 {
	if o == nil || o.IssueLimit == nil {
		var ret int32
		return ret
	}
	return *o.IssueLimit
}

// GetIssueLimitOk returns a tuple with the IssueLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reward) GetIssueLimitOk() (*int32, bool) {
	if o == nil || o.IssueLimit == nil {
		return nil, false
	}
	return o.IssueLimit, true
}

// HasIssueLimit returns a boolean if a field has been set.
func (o *Reward) HasIssueLimit() bool {
	if o != nil && o.IssueLimit != nil {
		return true
	}

	return false
}

// SetIssueLimit gets a reference to the given int32 and assigns it to the IssueLimit field.
func (o *Reward) SetIssueLimit(v int32) {
	o.IssueLimit = &v
}

// GetDelay returns the Delay field value if set, zero value otherwise.
func (o *Reward) GetDelay() int32 {
	if o == nil || o.Delay == nil {
		var ret int32
		return ret
	}
	return *o.Delay
}

// GetDelayOk returns a tuple with the Delay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reward) GetDelayOk() (*int32, bool) {
	if o == nil || o.Delay == nil {
		return nil, false
	}
	return o.Delay, true
}

// HasDelay returns a boolean if a field has been set.
func (o *Reward) HasDelay() bool {
	if o != nil && o.Delay != nil {
		return true
	}

	return false
}

// SetDelay gets a reference to the given int32 and assigns it to the Delay field.
func (o *Reward) SetDelay(v int32) {
	o.Delay = &v
}

// GetPointInTime returns the PointInTime field value if set, zero value otherwise.
func (o *Reward) GetPointInTime() time.Time {
	if o == nil || o.PointInTime == nil {
		var ret time.Time
		return ret
	}
	return *o.PointInTime
}

// GetPointInTimeOk returns a tuple with the PointInTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reward) GetPointInTimeOk() (*time.Time, bool) {
	if o == nil || o.PointInTime == nil {
		return nil, false
	}
	return o.PointInTime, true
}

// HasPointInTime returns a boolean if a field has been set.
func (o *Reward) HasPointInTime() bool {
	if o != nil && o.PointInTime != nil {
		return true
	}

	return false
}

// SetPointInTime gets a reference to the given time.Time and assigns it to the PointInTime field.
func (o *Reward) SetPointInTime(v time.Time) {
	o.PointInTime = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *Reward) GetPeriod() int32 {
	if o == nil || o.Period == nil {
		var ret int32
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reward) GetPeriodOk() (*int32, bool) {
	if o == nil || o.Period == nil {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *Reward) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given int32 and assigns it to the Period field.
func (o *Reward) SetPeriod(v int32) {
	o.Period = &v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *Reward) GetConstraints() []string {
	if o == nil || o.Constraints == nil {
		var ret []string
		return ret
	}
	return o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reward) GetConstraintsOk() ([]string, bool) {
	if o == nil || o.Constraints == nil {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *Reward) HasConstraints() bool {
	if o != nil && o.Constraints != nil {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given []string and assigns it to the Constraints field.
func (o *Reward) SetConstraints(v []string) {
	o.Constraints = v
}

func (o Reward) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EntityType != nil {
		toSerialize["entityType"] = o.EntityType
	}
	if o.EntityId != nil {
		toSerialize["entityId"] = o.EntityId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.RewardRank != nil {
		toSerialize["rewardRank"] = o.RewardRank
	}
	if o.RewardValue != nil {
		toSerialize["rewardValue"] = o.RewardValue
	}
	if o.RewardType != nil {
		toSerialize["rewardType"] = o.RewardType
	}
	if o.Icon != nil {
		toSerialize["icon"] = o.Icon
	}
	if o.IssueLimit != nil {
		toSerialize["issueLimit"] = o.IssueLimit
	}
	if o.Delay != nil {
		toSerialize["delay"] = o.Delay
	}
	if o.PointInTime != nil {
		toSerialize["pointInTime"] = o.PointInTime
	}
	if o.Period != nil {
		toSerialize["period"] = o.Period
	}
	if o.Constraints != nil {
		toSerialize["constraints"] = o.Constraints
	}
	return json.Marshal(toSerialize)
}

type NullableReward struct {
	value *Reward
	isSet bool
}

func (v NullableReward) Get() *Reward {
	return v.value
}

func (v *NullableReward) Set(val *Reward) {
	v.value = val
	v.isSet = true
}

func (v NullableReward) IsSet() bool {
	return v.isSet
}

func (v *NullableReward) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReward(val *Reward) *NullableReward {
	return &NullableReward{value: val, isSet: true}
}

func (v NullableReward) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReward) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


