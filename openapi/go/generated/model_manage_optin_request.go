/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ManageOptinRequest 
type ManageOptinRequest struct {
	// 
	EntityId *string `json:"entityId,omitempty"`
	// 
	EntityType *string `json:"entityType,omitempty"`
	// 
	Action *string `json:"action,omitempty"`
}

// NewManageOptinRequest instantiates a new ManageOptinRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManageOptinRequest() *ManageOptinRequest {
	this := ManageOptinRequest{}
	return &this
}

// NewManageOptinRequestWithDefaults instantiates a new ManageOptinRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManageOptinRequestWithDefaults() *ManageOptinRequest {
	this := ManageOptinRequest{}
	return &this
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *ManageOptinRequest) GetEntityId() string {
	if o == nil || o.EntityId == nil {
		var ret string
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageOptinRequest) GetEntityIdOk() (*string, bool) {
	if o == nil || o.EntityId == nil {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *ManageOptinRequest) HasEntityId() bool {
	if o != nil && o.EntityId != nil {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given string and assigns it to the EntityId field.
func (o *ManageOptinRequest) SetEntityId(v string) {
	o.EntityId = &v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *ManageOptinRequest) GetEntityType() string {
	if o == nil || o.EntityType == nil {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageOptinRequest) GetEntityTypeOk() (*string, bool) {
	if o == nil || o.EntityType == nil {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *ManageOptinRequest) HasEntityType() bool {
	if o != nil && o.EntityType != nil {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *ManageOptinRequest) SetEntityType(v string) {
	o.EntityType = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *ManageOptinRequest) GetAction() string {
	if o == nil || o.Action == nil {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageOptinRequest) GetActionOk() (*string, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *ManageOptinRequest) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *ManageOptinRequest) SetAction(v string) {
	o.Action = &v
}

func (o ManageOptinRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EntityId != nil {
		toSerialize["entityId"] = o.EntityId
	}
	if o.EntityType != nil {
		toSerialize["entityType"] = o.EntityType
	}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	return json.Marshal(toSerialize)
}

type NullableManageOptinRequest struct {
	value *ManageOptinRequest
	isSet bool
}

func (v NullableManageOptinRequest) Get() *ManageOptinRequest {
	return v.value
}

func (v *NullableManageOptinRequest) Set(val *ManageOptinRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableManageOptinRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableManageOptinRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManageOptinRequest(val *ManageOptinRequest) *NullableManageOptinRequest {
	return &NullableManageOptinRequest{value: val, isSet: true}
}

func (v NullableManageOptinRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManageOptinRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


