/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CompetitionStatus 
type CompetitionStatus string

// List of CompetitionStatus
const (
	UNKNOWN CompetitionStatus = "Unknown"
	DELETING CompetitionStatus = "Deleting"
	DELETED CompetitionStatus = "Deleted"
	DRAFT CompetitionStatus = "Draft"
	TEMPLATE CompetitionStatus = "Template"
	PREPARING CompetitionStatus = "Preparing"
	READY CompetitionStatus = "Ready"
	STARTING CompetitionStatus = "Starting"
	ACTIVE CompetitionStatus = "Active"
	FINISHING CompetitionStatus = "Finishing"
	FINISHED CompetitionStatus = "Finished"
	CANCELLING CompetitionStatus = "Cancelling"
	CANCELLED CompetitionStatus = "Cancelled"
)

// All allowed values of CompetitionStatus enum
var AllowedCompetitionStatusEnumValues = []CompetitionStatus{
	"Unknown",
	"Deleting",
	"Deleted",
	"Draft",
	"Template",
	"Preparing",
	"Ready",
	"Starting",
	"Active",
	"Finishing",
	"Finished",
	"Cancelling",
	"Cancelled",
}

func (v *CompetitionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CompetitionStatus(value)
	for _, existing := range AllowedCompetitionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CompetitionStatus", value)
}

// NewCompetitionStatusFromValue returns a pointer to a valid CompetitionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCompetitionStatusFromValue(v string) (*CompetitionStatus, error) {
	ev := CompetitionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CompetitionStatus: valid values are %v", v, AllowedCompetitionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CompetitionStatus) IsValid() bool {
	for _, existing := range AllowedCompetitionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CompetitionStatus value
func (v CompetitionStatus) Ptr() *CompetitionStatus {
	return &v
}

type NullableCompetitionStatus struct {
	value *CompetitionStatus
	isSet bool
}

func (v NullableCompetitionStatus) Get() *CompetitionStatus {
	return v.value
}

func (v *NullableCompetitionStatus) Set(val *CompetitionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCompetitionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCompetitionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompetitionStatus(val *CompetitionStatus) *NullableCompetitionStatus {
	return &NullableCompetitionStatus{value: val, isSet: true}
}

func (v NullableCompetitionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompetitionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

