/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Scheduling struct for Scheduling
type Scheduling struct {
	ScheduleType ScheduleType `json:"scheduleType"`
	// A value indicating how many times it will be issued
	ScheduleOccurrencesLimit int32 `json:"scheduleOccurrencesLimit"`
	Every []int32 `json:"every"`
	// The start date and time of a schedule. ISO8601 timestamp
	StartDate time.Time `json:"startDate"`
	// The end date and time of a schedule. ISO8601 timestamp
	EndDate *time.Time `json:"endDate,omitempty"`
	// Additional constraints
	Constraints []string `json:"constraints"`
}

// NewScheduling instantiates a new Scheduling object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduling(scheduleType ScheduleType, scheduleOccurrencesLimit int32, every []int32, startDate time.Time, constraints []string) *Scheduling {
	this := Scheduling{}
	this.ScheduleType = scheduleType
	this.ScheduleOccurrencesLimit = scheduleOccurrencesLimit
	this.Every = every
	this.StartDate = startDate
	this.Constraints = constraints
	return &this
}

// NewSchedulingWithDefaults instantiates a new Scheduling object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchedulingWithDefaults() *Scheduling {
	this := Scheduling{}
	return &this
}

// GetScheduleType returns the ScheduleType field value
func (o *Scheduling) GetScheduleType() ScheduleType {
	if o == nil {
		var ret ScheduleType
		return ret
	}

	return o.ScheduleType
}

// GetScheduleTypeOk returns a tuple with the ScheduleType field value
// and a boolean to check if the value has been set.
func (o *Scheduling) GetScheduleTypeOk() (*ScheduleType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScheduleType, true
}

// SetScheduleType sets field value
func (o *Scheduling) SetScheduleType(v ScheduleType) {
	o.ScheduleType = v
}

// GetScheduleOccurrencesLimit returns the ScheduleOccurrencesLimit field value
func (o *Scheduling) GetScheduleOccurrencesLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ScheduleOccurrencesLimit
}

// GetScheduleOccurrencesLimitOk returns a tuple with the ScheduleOccurrencesLimit field value
// and a boolean to check if the value has been set.
func (o *Scheduling) GetScheduleOccurrencesLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScheduleOccurrencesLimit, true
}

// SetScheduleOccurrencesLimit sets field value
func (o *Scheduling) SetScheduleOccurrencesLimit(v int32) {
	o.ScheduleOccurrencesLimit = v
}

// GetEvery returns the Every field value
func (o *Scheduling) GetEvery() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Every
}

// GetEveryOk returns a tuple with the Every field value
// and a boolean to check if the value has been set.
func (o *Scheduling) GetEveryOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Every, true
}

// SetEvery sets field value
func (o *Scheduling) SetEvery(v []int32) {
	o.Every = v
}

// GetStartDate returns the StartDate field value
func (o *Scheduling) GetStartDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *Scheduling) GetStartDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *Scheduling) SetStartDate(v time.Time) {
	o.StartDate = v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *Scheduling) GetEndDate() time.Time {
	if o == nil || o.EndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduling) GetEndDateOk() (*time.Time, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *Scheduling) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *Scheduling) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetConstraints returns the Constraints field value
func (o *Scheduling) GetConstraints() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value
// and a boolean to check if the value has been set.
func (o *Scheduling) GetConstraintsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Constraints, true
}

// SetConstraints sets field value
func (o *Scheduling) SetConstraints(v []string) {
	o.Constraints = v
}

func (o Scheduling) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["scheduleType"] = o.ScheduleType
	}
	if true {
		toSerialize["scheduleOccurrencesLimit"] = o.ScheduleOccurrencesLimit
	}
	if true {
		toSerialize["every"] = o.Every
	}
	if true {
		toSerialize["startDate"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	if true {
		toSerialize["constraints"] = o.Constraints
	}
	return json.Marshal(toSerialize)
}

type NullableScheduling struct {
	value *Scheduling
	isSet bool
}

func (v NullableScheduling) Get() *Scheduling {
	return v.value
}

func (v *NullableScheduling) Set(val *Scheduling) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduling) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduling) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduling(val *Scheduling) *NullableScheduling {
	return &NullableScheduling{value: val, isSet: true}
}

func (v NullableScheduling) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduling) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


