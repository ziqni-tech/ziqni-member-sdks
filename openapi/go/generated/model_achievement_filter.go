/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AchievementFilter 
type AchievementFilter struct {
	// 
	ProductIds []string `json:"productIds,omitempty"`
	// 
	Tags []string `json:"tags,omitempty"`
	StartDate *DateRange `json:"startDate,omitempty"`
	EndDate *DateRange `json:"endDate,omitempty"`
	// 
	Ids []string `json:"ids,omitempty"`
	// Achievement status
	Status []string `json:"status,omitempty"`
	// 
	SortBy []QuerySortBy `json:"sortBy,omitempty"`
	// 
	Skip *int32 `json:"skip,omitempty"`
	// 
	Limit *int32 `json:"limit,omitempty"`
	StatusCode *NumberRange `json:"statusCode,omitempty"`
	// Specify the constraints that need to be applied to the filter.
	Constraints []string `json:"constraints,omitempty"`
}

// NewAchievementFilter instantiates a new AchievementFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAchievementFilter() *AchievementFilter {
	this := AchievementFilter{}
	return &this
}

// NewAchievementFilterWithDefaults instantiates a new AchievementFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAchievementFilterWithDefaults() *AchievementFilter {
	this := AchievementFilter{}
	return &this
}

// GetProductIds returns the ProductIds field value if set, zero value otherwise.
func (o *AchievementFilter) GetProductIds() []string {
	if o == nil || o.ProductIds == nil {
		var ret []string
		return ret
	}
	return o.ProductIds
}

// GetProductIdsOk returns a tuple with the ProductIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementFilter) GetProductIdsOk() ([]string, bool) {
	if o == nil || o.ProductIds == nil {
		return nil, false
	}
	return o.ProductIds, true
}

// HasProductIds returns a boolean if a field has been set.
func (o *AchievementFilter) HasProductIds() bool {
	if o != nil && o.ProductIds != nil {
		return true
	}

	return false
}

// SetProductIds gets a reference to the given []string and assigns it to the ProductIds field.
func (o *AchievementFilter) SetProductIds(v []string) {
	o.ProductIds = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *AchievementFilter) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementFilter) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *AchievementFilter) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *AchievementFilter) SetTags(v []string) {
	o.Tags = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *AchievementFilter) GetStartDate() DateRange {
	if o == nil || o.StartDate == nil {
		var ret DateRange
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementFilter) GetStartDateOk() (*DateRange, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *AchievementFilter) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given DateRange and assigns it to the StartDate field.
func (o *AchievementFilter) SetStartDate(v DateRange) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *AchievementFilter) GetEndDate() DateRange {
	if o == nil || o.EndDate == nil {
		var ret DateRange
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementFilter) GetEndDateOk() (*DateRange, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *AchievementFilter) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given DateRange and assigns it to the EndDate field.
func (o *AchievementFilter) SetEndDate(v DateRange) {
	o.EndDate = &v
}

// GetIds returns the Ids field value if set, zero value otherwise.
func (o *AchievementFilter) GetIds() []string {
	if o == nil || o.Ids == nil {
		var ret []string
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementFilter) GetIdsOk() ([]string, bool) {
	if o == nil || o.Ids == nil {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *AchievementFilter) HasIds() bool {
	if o != nil && o.Ids != nil {
		return true
	}

	return false
}

// SetIds gets a reference to the given []string and assigns it to the Ids field.
func (o *AchievementFilter) SetIds(v []string) {
	o.Ids = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AchievementFilter) GetStatus() []string {
	if o == nil || o.Status == nil {
		var ret []string
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementFilter) GetStatusOk() ([]string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AchievementFilter) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given []string and assigns it to the Status field.
func (o *AchievementFilter) SetStatus(v []string) {
	o.Status = v
}

// GetSortBy returns the SortBy field value if set, zero value otherwise.
func (o *AchievementFilter) GetSortBy() []QuerySortBy {
	if o == nil || o.SortBy == nil {
		var ret []QuerySortBy
		return ret
	}
	return o.SortBy
}

// GetSortByOk returns a tuple with the SortBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementFilter) GetSortByOk() ([]QuerySortBy, bool) {
	if o == nil || o.SortBy == nil {
		return nil, false
	}
	return o.SortBy, true
}

// HasSortBy returns a boolean if a field has been set.
func (o *AchievementFilter) HasSortBy() bool {
	if o != nil && o.SortBy != nil {
		return true
	}

	return false
}

// SetSortBy gets a reference to the given []QuerySortBy and assigns it to the SortBy field.
func (o *AchievementFilter) SetSortBy(v []QuerySortBy) {
	o.SortBy = v
}

// GetSkip returns the Skip field value if set, zero value otherwise.
func (o *AchievementFilter) GetSkip() int32 {
	if o == nil || o.Skip == nil {
		var ret int32
		return ret
	}
	return *o.Skip
}

// GetSkipOk returns a tuple with the Skip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementFilter) GetSkipOk() (*int32, bool) {
	if o == nil || o.Skip == nil {
		return nil, false
	}
	return o.Skip, true
}

// HasSkip returns a boolean if a field has been set.
func (o *AchievementFilter) HasSkip() bool {
	if o != nil && o.Skip != nil {
		return true
	}

	return false
}

// SetSkip gets a reference to the given int32 and assigns it to the Skip field.
func (o *AchievementFilter) SetSkip(v int32) {
	o.Skip = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *AchievementFilter) GetLimit() int32 {
	if o == nil || o.Limit == nil {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementFilter) GetLimitOk() (*int32, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *AchievementFilter) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *AchievementFilter) SetLimit(v int32) {
	o.Limit = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *AchievementFilter) GetStatusCode() NumberRange {
	if o == nil || o.StatusCode == nil {
		var ret NumberRange
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementFilter) GetStatusCodeOk() (*NumberRange, bool) {
	if o == nil || o.StatusCode == nil {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *AchievementFilter) HasStatusCode() bool {
	if o != nil && o.StatusCode != nil {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given NumberRange and assigns it to the StatusCode field.
func (o *AchievementFilter) SetStatusCode(v NumberRange) {
	o.StatusCode = &v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *AchievementFilter) GetConstraints() []string {
	if o == nil || o.Constraints == nil {
		var ret []string
		return ret
	}
	return o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementFilter) GetConstraintsOk() ([]string, bool) {
	if o == nil || o.Constraints == nil {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *AchievementFilter) HasConstraints() bool {
	if o != nil && o.Constraints != nil {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given []string and assigns it to the Constraints field.
func (o *AchievementFilter) SetConstraints(v []string) {
	o.Constraints = v
}

func (o AchievementFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ProductIds != nil {
		toSerialize["productIds"] = o.ProductIds
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	if o.Ids != nil {
		toSerialize["ids"] = o.Ids
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.SortBy != nil {
		toSerialize["sortBy"] = o.SortBy
	}
	if o.Skip != nil {
		toSerialize["skip"] = o.Skip
	}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	if o.StatusCode != nil {
		toSerialize["statusCode"] = o.StatusCode
	}
	if o.Constraints != nil {
		toSerialize["constraints"] = o.Constraints
	}
	return json.Marshal(toSerialize)
}

type NullableAchievementFilter struct {
	value *AchievementFilter
	isSet bool
}

func (v NullableAchievementFilter) Get() *AchievementFilter {
	return v.value
}

func (v *NullableAchievementFilter) Set(val *AchievementFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableAchievementFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableAchievementFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAchievementFilter(val *AchievementFilter) *NullableAchievementFilter {
	return &NullableAchievementFilter{value: val, isSet: true}
}

func (v NullableAchievementFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAchievementFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


