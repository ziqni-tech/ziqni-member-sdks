/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RuleRoutine 
type RuleRoutine struct {
	// A routine to execute if the conditional expressions in the matching group evaluted to true
	Routine *string `json:"routine,omitempty"`
	// The arguments of the routine.
	Arguments []RuleArgument `json:"arguments,omitempty"`
	// 
	LineNumber *int32 `json:"lineNumber,omitempty"`
}

// NewRuleRoutine instantiates a new RuleRoutine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleRoutine() *RuleRoutine {
	this := RuleRoutine{}
	return &this
}

// NewRuleRoutineWithDefaults instantiates a new RuleRoutine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleRoutineWithDefaults() *RuleRoutine {
	this := RuleRoutine{}
	return &this
}

// GetRoutine returns the Routine field value if set, zero value otherwise.
func (o *RuleRoutine) GetRoutine() string {
	if o == nil || o.Routine == nil {
		var ret string
		return ret
	}
	return *o.Routine
}

// GetRoutineOk returns a tuple with the Routine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleRoutine) GetRoutineOk() (*string, bool) {
	if o == nil || o.Routine == nil {
		return nil, false
	}
	return o.Routine, true
}

// HasRoutine returns a boolean if a field has been set.
func (o *RuleRoutine) HasRoutine() bool {
	if o != nil && o.Routine != nil {
		return true
	}

	return false
}

// SetRoutine gets a reference to the given string and assigns it to the Routine field.
func (o *RuleRoutine) SetRoutine(v string) {
	o.Routine = &v
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *RuleRoutine) GetArguments() []RuleArgument {
	if o == nil || o.Arguments == nil {
		var ret []RuleArgument
		return ret
	}
	return o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleRoutine) GetArgumentsOk() ([]RuleArgument, bool) {
	if o == nil || o.Arguments == nil {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *RuleRoutine) HasArguments() bool {
	if o != nil && o.Arguments != nil {
		return true
	}

	return false
}

// SetArguments gets a reference to the given []RuleArgument and assigns it to the Arguments field.
func (o *RuleRoutine) SetArguments(v []RuleArgument) {
	o.Arguments = v
}

// GetLineNumber returns the LineNumber field value if set, zero value otherwise.
func (o *RuleRoutine) GetLineNumber() int32 {
	if o == nil || o.LineNumber == nil {
		var ret int32
		return ret
	}
	return *o.LineNumber
}

// GetLineNumberOk returns a tuple with the LineNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleRoutine) GetLineNumberOk() (*int32, bool) {
	if o == nil || o.LineNumber == nil {
		return nil, false
	}
	return o.LineNumber, true
}

// HasLineNumber returns a boolean if a field has been set.
func (o *RuleRoutine) HasLineNumber() bool {
	if o != nil && o.LineNumber != nil {
		return true
	}

	return false
}

// SetLineNumber gets a reference to the given int32 and assigns it to the LineNumber field.
func (o *RuleRoutine) SetLineNumber(v int32) {
	o.LineNumber = &v
}

func (o RuleRoutine) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Routine != nil {
		toSerialize["routine"] = o.Routine
	}
	if o.Arguments != nil {
		toSerialize["arguments"] = o.Arguments
	}
	if o.LineNumber != nil {
		toSerialize["lineNumber"] = o.LineNumber
	}
	return json.Marshal(toSerialize)
}

type NullableRuleRoutine struct {
	value *RuleRoutine
	isSet bool
}

func (v NullableRuleRoutine) Get() *RuleRoutine {
	return v.value
}

func (v *NullableRuleRoutine) Set(val *RuleRoutine) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleRoutine) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleRoutine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleRoutine(val *RuleRoutine) *NullableRuleRoutine {
	return &NullableRuleRoutine{value: val, isSet: true}
}

func (v NullableRuleRoutine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleRoutine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


