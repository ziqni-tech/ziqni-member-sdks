/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ScoringStrategy 
type ScoringStrategy struct {
	// The scoring strategies types \"SumBest\" value
	LimitUpdatesTo *int32 `json:"limitUpdatesTo,omitempty"`
	// The scoring strategies types \"LimitedTo\" value
	SumBestXOf *int32 `json:"sumBestXOf,omitempty"`
	// The scoring strategies types \"FirstTo\" value
	LastUpdateTimeStamp *int64 `json:"lastUpdateTimeStamp,omitempty"`
	// Not supported at the moment
	RecordTimeWhenSumReaches *float64 `json:"recordTimeWhenSumReaches,omitempty"`
}

// NewScoringStrategy instantiates a new ScoringStrategy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScoringStrategy() *ScoringStrategy {
	this := ScoringStrategy{}
	return &this
}

// NewScoringStrategyWithDefaults instantiates a new ScoringStrategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScoringStrategyWithDefaults() *ScoringStrategy {
	this := ScoringStrategy{}
	return &this
}

// GetLimitUpdatesTo returns the LimitUpdatesTo field value if set, zero value otherwise.
func (o *ScoringStrategy) GetLimitUpdatesTo() int32 {
	if o == nil || o.LimitUpdatesTo == nil {
		var ret int32
		return ret
	}
	return *o.LimitUpdatesTo
}

// GetLimitUpdatesToOk returns a tuple with the LimitUpdatesTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScoringStrategy) GetLimitUpdatesToOk() (*int32, bool) {
	if o == nil || o.LimitUpdatesTo == nil {
		return nil, false
	}
	return o.LimitUpdatesTo, true
}

// HasLimitUpdatesTo returns a boolean if a field has been set.
func (o *ScoringStrategy) HasLimitUpdatesTo() bool {
	if o != nil && o.LimitUpdatesTo != nil {
		return true
	}

	return false
}

// SetLimitUpdatesTo gets a reference to the given int32 and assigns it to the LimitUpdatesTo field.
func (o *ScoringStrategy) SetLimitUpdatesTo(v int32) {
	o.LimitUpdatesTo = &v
}

// GetSumBestXOf returns the SumBestXOf field value if set, zero value otherwise.
func (o *ScoringStrategy) GetSumBestXOf() int32 {
	if o == nil || o.SumBestXOf == nil {
		var ret int32
		return ret
	}
	return *o.SumBestXOf
}

// GetSumBestXOfOk returns a tuple with the SumBestXOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScoringStrategy) GetSumBestXOfOk() (*int32, bool) {
	if o == nil || o.SumBestXOf == nil {
		return nil, false
	}
	return o.SumBestXOf, true
}

// HasSumBestXOf returns a boolean if a field has been set.
func (o *ScoringStrategy) HasSumBestXOf() bool {
	if o != nil && o.SumBestXOf != nil {
		return true
	}

	return false
}

// SetSumBestXOf gets a reference to the given int32 and assigns it to the SumBestXOf field.
func (o *ScoringStrategy) SetSumBestXOf(v int32) {
	o.SumBestXOf = &v
}

// GetLastUpdateTimeStamp returns the LastUpdateTimeStamp field value if set, zero value otherwise.
func (o *ScoringStrategy) GetLastUpdateTimeStamp() int64 {
	if o == nil || o.LastUpdateTimeStamp == nil {
		var ret int64
		return ret
	}
	return *o.LastUpdateTimeStamp
}

// GetLastUpdateTimeStampOk returns a tuple with the LastUpdateTimeStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScoringStrategy) GetLastUpdateTimeStampOk() (*int64, bool) {
	if o == nil || o.LastUpdateTimeStamp == nil {
		return nil, false
	}
	return o.LastUpdateTimeStamp, true
}

// HasLastUpdateTimeStamp returns a boolean if a field has been set.
func (o *ScoringStrategy) HasLastUpdateTimeStamp() bool {
	if o != nil && o.LastUpdateTimeStamp != nil {
		return true
	}

	return false
}

// SetLastUpdateTimeStamp gets a reference to the given int64 and assigns it to the LastUpdateTimeStamp field.
func (o *ScoringStrategy) SetLastUpdateTimeStamp(v int64) {
	o.LastUpdateTimeStamp = &v
}

// GetRecordTimeWhenSumReaches returns the RecordTimeWhenSumReaches field value if set, zero value otherwise.
func (o *ScoringStrategy) GetRecordTimeWhenSumReaches() float64 {
	if o == nil || o.RecordTimeWhenSumReaches == nil {
		var ret float64
		return ret
	}
	return *o.RecordTimeWhenSumReaches
}

// GetRecordTimeWhenSumReachesOk returns a tuple with the RecordTimeWhenSumReaches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScoringStrategy) GetRecordTimeWhenSumReachesOk() (*float64, bool) {
	if o == nil || o.RecordTimeWhenSumReaches == nil {
		return nil, false
	}
	return o.RecordTimeWhenSumReaches, true
}

// HasRecordTimeWhenSumReaches returns a boolean if a field has been set.
func (o *ScoringStrategy) HasRecordTimeWhenSumReaches() bool {
	if o != nil && o.RecordTimeWhenSumReaches != nil {
		return true
	}

	return false
}

// SetRecordTimeWhenSumReaches gets a reference to the given float64 and assigns it to the RecordTimeWhenSumReaches field.
func (o *ScoringStrategy) SetRecordTimeWhenSumReaches(v float64) {
	o.RecordTimeWhenSumReaches = &v
}

func (o ScoringStrategy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LimitUpdatesTo != nil {
		toSerialize["limitUpdatesTo"] = o.LimitUpdatesTo
	}
	if o.SumBestXOf != nil {
		toSerialize["sumBestXOf"] = o.SumBestXOf
	}
	if o.LastUpdateTimeStamp != nil {
		toSerialize["lastUpdateTimeStamp"] = o.LastUpdateTimeStamp
	}
	if o.RecordTimeWhenSumReaches != nil {
		toSerialize["recordTimeWhenSumReaches"] = o.RecordTimeWhenSumReaches
	}
	return json.Marshal(toSerialize)
}

type NullableScoringStrategy struct {
	value *ScoringStrategy
	isSet bool
}

func (v NullableScoringStrategy) Get() *ScoringStrategy {
	return v.value
}

func (v *NullableScoringStrategy) Set(val *ScoringStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableScoringStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableScoringStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScoringStrategy(val *ScoringStrategy) *NullableScoringStrategy {
	return &NullableScoringStrategy{value: val, isSet: true}
}

func (v NullableScoringStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScoringStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


