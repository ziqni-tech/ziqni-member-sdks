/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RangeQuery 
type RangeQuery struct {
	// Greater than value
	Gt *string `json:"gt,omitempty"`
	// Less than value
	Lt *string `json:"lt,omitempty"`
	// Additional constraints
	Constraints []string `json:"constraints,omitempty"`
}

// NewRangeQuery instantiates a new RangeQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRangeQuery() *RangeQuery {
	this := RangeQuery{}
	return &this
}

// NewRangeQueryWithDefaults instantiates a new RangeQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRangeQueryWithDefaults() *RangeQuery {
	this := RangeQuery{}
	return &this
}

// GetGt returns the Gt field value if set, zero value otherwise.
func (o *RangeQuery) GetGt() string {
	if o == nil || o.Gt == nil {
		var ret string
		return ret
	}
	return *o.Gt
}

// GetGtOk returns a tuple with the Gt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangeQuery) GetGtOk() (*string, bool) {
	if o == nil || o.Gt == nil {
		return nil, false
	}
	return o.Gt, true
}

// HasGt returns a boolean if a field has been set.
func (o *RangeQuery) HasGt() bool {
	if o != nil && o.Gt != nil {
		return true
	}

	return false
}

// SetGt gets a reference to the given string and assigns it to the Gt field.
func (o *RangeQuery) SetGt(v string) {
	o.Gt = &v
}

// GetLt returns the Lt field value if set, zero value otherwise.
func (o *RangeQuery) GetLt() string {
	if o == nil || o.Lt == nil {
		var ret string
		return ret
	}
	return *o.Lt
}

// GetLtOk returns a tuple with the Lt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangeQuery) GetLtOk() (*string, bool) {
	if o == nil || o.Lt == nil {
		return nil, false
	}
	return o.Lt, true
}

// HasLt returns a boolean if a field has been set.
func (o *RangeQuery) HasLt() bool {
	if o != nil && o.Lt != nil {
		return true
	}

	return false
}

// SetLt gets a reference to the given string and assigns it to the Lt field.
func (o *RangeQuery) SetLt(v string) {
	o.Lt = &v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *RangeQuery) GetConstraints() []string {
	if o == nil || o.Constraints == nil {
		var ret []string
		return ret
	}
	return o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangeQuery) GetConstraintsOk() ([]string, bool) {
	if o == nil || o.Constraints == nil {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *RangeQuery) HasConstraints() bool {
	if o != nil && o.Constraints != nil {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given []string and assigns it to the Constraints field.
func (o *RangeQuery) SetConstraints(v []string) {
	o.Constraints = v
}

func (o RangeQuery) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Gt != nil {
		toSerialize["gt"] = o.Gt
	}
	if o.Lt != nil {
		toSerialize["lt"] = o.Lt
	}
	if o.Constraints != nil {
		toSerialize["constraints"] = o.Constraints
	}
	return json.Marshal(toSerialize)
}

type NullableRangeQuery struct {
	value *RangeQuery
	isSet bool
}

func (v NullableRangeQuery) Get() *RangeQuery {
	return v.value
}

func (v *NullableRangeQuery) Set(val *RangeQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableRangeQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableRangeQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRangeQuery(val *RangeQuery) *NullableRangeQuery {
	return &NullableRangeQuery{value: val, isSet: true}
}

func (v NullableRangeQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRangeQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


