/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RankingStrategy 
type RankingStrategy struct {
	// scoreDesc - The Ranking that can be Ascending or Descending based on timeDesc. timeDesc - The Ranking that can be Ascending or Descending based on scoreDesc. scoreFirst - The Ranking that can be score first or time first ignoreTime - The Ranking when time is ignored ignoreScore - The Ranking when score is ignored
	Constraints []string `json:"constraints,omitempty"`
}

// NewRankingStrategy instantiates a new RankingStrategy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRankingStrategy() *RankingStrategy {
	this := RankingStrategy{}
	return &this
}

// NewRankingStrategyWithDefaults instantiates a new RankingStrategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRankingStrategyWithDefaults() *RankingStrategy {
	this := RankingStrategy{}
	return &this
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *RankingStrategy) GetConstraints() []string {
	if o == nil || o.Constraints == nil {
		var ret []string
		return ret
	}
	return o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RankingStrategy) GetConstraintsOk() ([]string, bool) {
	if o == nil || o.Constraints == nil {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *RankingStrategy) HasConstraints() bool {
	if o != nil && o.Constraints != nil {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given []string and assigns it to the Constraints field.
func (o *RankingStrategy) SetConstraints(v []string) {
	o.Constraints = v
}

func (o RankingStrategy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Constraints != nil {
		toSerialize["constraints"] = o.Constraints
	}
	return json.Marshal(toSerialize)
}

type NullableRankingStrategy struct {
	value *RankingStrategy
	isSet bool
}

func (v NullableRankingStrategy) Get() *RankingStrategy {
	return v.value
}

func (v *NullableRankingStrategy) Set(val *RankingStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableRankingStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableRankingStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRankingStrategy(val *RankingStrategy) *NullableRankingStrategy {
	return &NullableRankingStrategy{value: val, isSet: true}
}

func (v NullableRankingStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRankingStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


