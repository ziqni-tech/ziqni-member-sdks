/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// MessageAllOf struct for MessageAllOf
type MessageAllOf struct {
	EventRefType *EventRefType `json:"eventRefType,omitempty"`
	// The reference ID of the event object
	EventRefId *string `json:"eventRefId,omitempty"`
	MessageType *MessageType `json:"messageType,omitempty"`
	// The title of the message
	Subject *string `json:"subject,omitempty"`
	// The context of the message
	Body *string `json:"body,omitempty"`
	// Unique system identifier of an Award
	Prize *string `json:"prize,omitempty"`
	Status *MessageStatus `json:"status,omitempty"`
	// The time that the message will disappear after. ISO8601 timestamp
	Expiry *time.Time `json:"expiry,omitempty"`
	// The reference ID of the event object
	MemberId []string `json:"memberId,omitempty"`
	// 
	Id string `json:"id"`
}

// NewMessageAllOf instantiates a new MessageAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageAllOf(id string) *MessageAllOf {
	this := MessageAllOf{}
	this.Id = id
	return &this
}

// NewMessageAllOfWithDefaults instantiates a new MessageAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageAllOfWithDefaults() *MessageAllOf {
	this := MessageAllOf{}
	return &this
}

// GetEventRefType returns the EventRefType field value if set, zero value otherwise.
func (o *MessageAllOf) GetEventRefType() EventRefType {
	if o == nil || o.EventRefType == nil {
		var ret EventRefType
		return ret
	}
	return *o.EventRefType
}

// GetEventRefTypeOk returns a tuple with the EventRefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageAllOf) GetEventRefTypeOk() (*EventRefType, bool) {
	if o == nil || o.EventRefType == nil {
		return nil, false
	}
	return o.EventRefType, true
}

// HasEventRefType returns a boolean if a field has been set.
func (o *MessageAllOf) HasEventRefType() bool {
	if o != nil && o.EventRefType != nil {
		return true
	}

	return false
}

// SetEventRefType gets a reference to the given EventRefType and assigns it to the EventRefType field.
func (o *MessageAllOf) SetEventRefType(v EventRefType) {
	o.EventRefType = &v
}

// GetEventRefId returns the EventRefId field value if set, zero value otherwise.
func (o *MessageAllOf) GetEventRefId() string {
	if o == nil || o.EventRefId == nil {
		var ret string
		return ret
	}
	return *o.EventRefId
}

// GetEventRefIdOk returns a tuple with the EventRefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageAllOf) GetEventRefIdOk() (*string, bool) {
	if o == nil || o.EventRefId == nil {
		return nil, false
	}
	return o.EventRefId, true
}

// HasEventRefId returns a boolean if a field has been set.
func (o *MessageAllOf) HasEventRefId() bool {
	if o != nil && o.EventRefId != nil {
		return true
	}

	return false
}

// SetEventRefId gets a reference to the given string and assigns it to the EventRefId field.
func (o *MessageAllOf) SetEventRefId(v string) {
	o.EventRefId = &v
}

// GetMessageType returns the MessageType field value if set, zero value otherwise.
func (o *MessageAllOf) GetMessageType() MessageType {
	if o == nil || o.MessageType == nil {
		var ret MessageType
		return ret
	}
	return *o.MessageType
}

// GetMessageTypeOk returns a tuple with the MessageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageAllOf) GetMessageTypeOk() (*MessageType, bool) {
	if o == nil || o.MessageType == nil {
		return nil, false
	}
	return o.MessageType, true
}

// HasMessageType returns a boolean if a field has been set.
func (o *MessageAllOf) HasMessageType() bool {
	if o != nil && o.MessageType != nil {
		return true
	}

	return false
}

// SetMessageType gets a reference to the given MessageType and assigns it to the MessageType field.
func (o *MessageAllOf) SetMessageType(v MessageType) {
	o.MessageType = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *MessageAllOf) GetSubject() string {
	if o == nil || o.Subject == nil {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageAllOf) GetSubjectOk() (*string, bool) {
	if o == nil || o.Subject == nil {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *MessageAllOf) HasSubject() bool {
	if o != nil && o.Subject != nil {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *MessageAllOf) SetSubject(v string) {
	o.Subject = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *MessageAllOf) GetBody() string {
	if o == nil || o.Body == nil {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageAllOf) GetBodyOk() (*string, bool) {
	if o == nil || o.Body == nil {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *MessageAllOf) HasBody() bool {
	if o != nil && o.Body != nil {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *MessageAllOf) SetBody(v string) {
	o.Body = &v
}

// GetPrize returns the Prize field value if set, zero value otherwise.
func (o *MessageAllOf) GetPrize() string {
	if o == nil || o.Prize == nil {
		var ret string
		return ret
	}
	return *o.Prize
}

// GetPrizeOk returns a tuple with the Prize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageAllOf) GetPrizeOk() (*string, bool) {
	if o == nil || o.Prize == nil {
		return nil, false
	}
	return o.Prize, true
}

// HasPrize returns a boolean if a field has been set.
func (o *MessageAllOf) HasPrize() bool {
	if o != nil && o.Prize != nil {
		return true
	}

	return false
}

// SetPrize gets a reference to the given string and assigns it to the Prize field.
func (o *MessageAllOf) SetPrize(v string) {
	o.Prize = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MessageAllOf) GetStatus() MessageStatus {
	if o == nil || o.Status == nil {
		var ret MessageStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageAllOf) GetStatusOk() (*MessageStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MessageAllOf) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given MessageStatus and assigns it to the Status field.
func (o *MessageAllOf) SetStatus(v MessageStatus) {
	o.Status = &v
}

// GetExpiry returns the Expiry field value if set, zero value otherwise.
func (o *MessageAllOf) GetExpiry() time.Time {
	if o == nil || o.Expiry == nil {
		var ret time.Time
		return ret
	}
	return *o.Expiry
}

// GetExpiryOk returns a tuple with the Expiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageAllOf) GetExpiryOk() (*time.Time, bool) {
	if o == nil || o.Expiry == nil {
		return nil, false
	}
	return o.Expiry, true
}

// HasExpiry returns a boolean if a field has been set.
func (o *MessageAllOf) HasExpiry() bool {
	if o != nil && o.Expiry != nil {
		return true
	}

	return false
}

// SetExpiry gets a reference to the given time.Time and assigns it to the Expiry field.
func (o *MessageAllOf) SetExpiry(v time.Time) {
	o.Expiry = &v
}

// GetMemberId returns the MemberId field value if set, zero value otherwise.
func (o *MessageAllOf) GetMemberId() []string {
	if o == nil || o.MemberId == nil {
		var ret []string
		return ret
	}
	return o.MemberId
}

// GetMemberIdOk returns a tuple with the MemberId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageAllOf) GetMemberIdOk() ([]string, bool) {
	if o == nil || o.MemberId == nil {
		return nil, false
	}
	return o.MemberId, true
}

// HasMemberId returns a boolean if a field has been set.
func (o *MessageAllOf) HasMemberId() bool {
	if o != nil && o.MemberId != nil {
		return true
	}

	return false
}

// SetMemberId gets a reference to the given []string and assigns it to the MemberId field.
func (o *MessageAllOf) SetMemberId(v []string) {
	o.MemberId = v
}

// GetId returns the Id field value
func (o *MessageAllOf) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MessageAllOf) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MessageAllOf) SetId(v string) {
	o.Id = v
}

func (o MessageAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventRefType != nil {
		toSerialize["eventRefType"] = o.EventRefType
	}
	if o.EventRefId != nil {
		toSerialize["eventRefId"] = o.EventRefId
	}
	if o.MessageType != nil {
		toSerialize["messageType"] = o.MessageType
	}
	if o.Subject != nil {
		toSerialize["subject"] = o.Subject
	}
	if o.Body != nil {
		toSerialize["body"] = o.Body
	}
	if o.Prize != nil {
		toSerialize["prize"] = o.Prize
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Expiry != nil {
		toSerialize["expiry"] = o.Expiry
	}
	if o.MemberId != nil {
		toSerialize["memberId"] = o.MemberId
	}
	if true {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableMessageAllOf struct {
	value *MessageAllOf
	isSet bool
}

func (v NullableMessageAllOf) Get() *MessageAllOf {
	return v.value
}

func (v *NullableMessageAllOf) Set(val *MessageAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageAllOf(val *MessageAllOf) *NullableMessageAllOf {
	return &NullableMessageAllOf{value: val, isSet: true}
}

func (v NullableMessageAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


