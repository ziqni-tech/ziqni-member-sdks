/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CompetitionRequest 
type CompetitionRequest struct {
	// The language codes can be found in the settings/transalations section of the back office
	LanguageKey *string `json:"languageKey,omitempty"`
	CompetitionFilter *CompetitionFilter `json:"competitionFilter,omitempty"`
}

// NewCompetitionRequest instantiates a new CompetitionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompetitionRequest() *CompetitionRequest {
	this := CompetitionRequest{}
	return &this
}

// NewCompetitionRequestWithDefaults instantiates a new CompetitionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompetitionRequestWithDefaults() *CompetitionRequest {
	this := CompetitionRequest{}
	return &this
}

// GetLanguageKey returns the LanguageKey field value if set, zero value otherwise.
func (o *CompetitionRequest) GetLanguageKey() string {
	if o == nil || o.LanguageKey == nil {
		var ret string
		return ret
	}
	return *o.LanguageKey
}

// GetLanguageKeyOk returns a tuple with the LanguageKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompetitionRequest) GetLanguageKeyOk() (*string, bool) {
	if o == nil || o.LanguageKey == nil {
		return nil, false
	}
	return o.LanguageKey, true
}

// HasLanguageKey returns a boolean if a field has been set.
func (o *CompetitionRequest) HasLanguageKey() bool {
	if o != nil && o.LanguageKey != nil {
		return true
	}

	return false
}

// SetLanguageKey gets a reference to the given string and assigns it to the LanguageKey field.
func (o *CompetitionRequest) SetLanguageKey(v string) {
	o.LanguageKey = &v
}

// GetCompetitionFilter returns the CompetitionFilter field value if set, zero value otherwise.
func (o *CompetitionRequest) GetCompetitionFilter() CompetitionFilter {
	if o == nil || o.CompetitionFilter == nil {
		var ret CompetitionFilter
		return ret
	}
	return *o.CompetitionFilter
}

// GetCompetitionFilterOk returns a tuple with the CompetitionFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompetitionRequest) GetCompetitionFilterOk() (*CompetitionFilter, bool) {
	if o == nil || o.CompetitionFilter == nil {
		return nil, false
	}
	return o.CompetitionFilter, true
}

// HasCompetitionFilter returns a boolean if a field has been set.
func (o *CompetitionRequest) HasCompetitionFilter() bool {
	if o != nil && o.CompetitionFilter != nil {
		return true
	}

	return false
}

// SetCompetitionFilter gets a reference to the given CompetitionFilter and assigns it to the CompetitionFilter field.
func (o *CompetitionRequest) SetCompetitionFilter(v CompetitionFilter) {
	o.CompetitionFilter = &v
}

func (o CompetitionRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LanguageKey != nil {
		toSerialize["languageKey"] = o.LanguageKey
	}
	if o.CompetitionFilter != nil {
		toSerialize["competitionFilter"] = o.CompetitionFilter
	}
	return json.Marshal(toSerialize)
}

type NullableCompetitionRequest struct {
	value *CompetitionRequest
	isSet bool
}

func (v NullableCompetitionRequest) Get() *CompetitionRequest {
	return v.value
}

func (v *NullableCompetitionRequest) Set(val *CompetitionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCompetitionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCompetitionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompetitionRequest(val *CompetitionRequest) *NullableCompetitionRequest {
	return &NullableCompetitionRequest{value: val, isSet: true}
}

func (v NullableCompetitionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompetitionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


