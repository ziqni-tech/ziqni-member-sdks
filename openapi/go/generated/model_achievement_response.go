/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AchievementResponse         
type AchievementResponse struct {
	Meta *ResponseMeta `json:"meta,omitempty"`
	// 
	Data []Achievement `json:"data,omitempty"`
	// 
	Errors []Error `json:"errors,omitempty"`
}

// NewAchievementResponse instantiates a new AchievementResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAchievementResponse() *AchievementResponse {
	this := AchievementResponse{}
	return &this
}

// NewAchievementResponseWithDefaults instantiates a new AchievementResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAchievementResponseWithDefaults() *AchievementResponse {
	this := AchievementResponse{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *AchievementResponse) GetMeta() ResponseMeta {
	if o == nil || o.Meta == nil {
		var ret ResponseMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementResponse) GetMetaOk() (*ResponseMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *AchievementResponse) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given ResponseMeta and assigns it to the Meta field.
func (o *AchievementResponse) SetMeta(v ResponseMeta) {
	o.Meta = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *AchievementResponse) GetData() []Achievement {
	if o == nil || o.Data == nil {
		var ret []Achievement
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementResponse) GetDataOk() ([]Achievement, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *AchievementResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []Achievement and assigns it to the Data field.
func (o *AchievementResponse) SetData(v []Achievement) {
	o.Data = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *AchievementResponse) GetErrors() []Error {
	if o == nil || o.Errors == nil {
		var ret []Error
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AchievementResponse) GetErrorsOk() ([]Error, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *AchievementResponse) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []Error and assigns it to the Errors field.
func (o *AchievementResponse) SetErrors(v []Error) {
	o.Errors = v
}

func (o AchievementResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableAchievementResponse struct {
	value *AchievementResponse
	isSet bool
}

func (v NullableAchievementResponse) Get() *AchievementResponse {
	return v.value
}

func (v *NullableAchievementResponse) Set(val *AchievementResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAchievementResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAchievementResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAchievementResponse(val *AchievementResponse) *NullableAchievementResponse {
	return &NullableAchievementResponse{value: val, isSet: true}
}

func (v NullableAchievementResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAchievementResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


