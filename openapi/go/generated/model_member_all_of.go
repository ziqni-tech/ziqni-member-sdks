/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MemberAllOf struct for MemberAllOf
type MemberAllOf struct {
	// The name of the member that is used on leader boards and public displays
	Name *string `json:"name,omitempty"`
	// The reference to this member in your system
	MemberRefId *string `json:"memberRefId,omitempty"`
	MemberType *MemberType `json:"memberType,omitempty"`
	// A social group like Guilds
	TeamMembers []string `json:"teamMembers,omitempty"`
	// Additional constraints
	Constraints []string `json:"constraints,omitempty"`
	// To what time zone teh emmber belongs to
	TimeZoneOffset *string `json:"timeZoneOffset,omitempty"`
}

// NewMemberAllOf instantiates a new MemberAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberAllOf() *MemberAllOf {
	this := MemberAllOf{}
	return &this
}

// NewMemberAllOfWithDefaults instantiates a new MemberAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberAllOfWithDefaults() *MemberAllOf {
	this := MemberAllOf{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MemberAllOf) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberAllOf) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MemberAllOf) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MemberAllOf) SetName(v string) {
	o.Name = &v
}

// GetMemberRefId returns the MemberRefId field value if set, zero value otherwise.
func (o *MemberAllOf) GetMemberRefId() string {
	if o == nil || o.MemberRefId == nil {
		var ret string
		return ret
	}
	return *o.MemberRefId
}

// GetMemberRefIdOk returns a tuple with the MemberRefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberAllOf) GetMemberRefIdOk() (*string, bool) {
	if o == nil || o.MemberRefId == nil {
		return nil, false
	}
	return o.MemberRefId, true
}

// HasMemberRefId returns a boolean if a field has been set.
func (o *MemberAllOf) HasMemberRefId() bool {
	if o != nil && o.MemberRefId != nil {
		return true
	}

	return false
}

// SetMemberRefId gets a reference to the given string and assigns it to the MemberRefId field.
func (o *MemberAllOf) SetMemberRefId(v string) {
	o.MemberRefId = &v
}

// GetMemberType returns the MemberType field value if set, zero value otherwise.
func (o *MemberAllOf) GetMemberType() MemberType {
	if o == nil || o.MemberType == nil {
		var ret MemberType
		return ret
	}
	return *o.MemberType
}

// GetMemberTypeOk returns a tuple with the MemberType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberAllOf) GetMemberTypeOk() (*MemberType, bool) {
	if o == nil || o.MemberType == nil {
		return nil, false
	}
	return o.MemberType, true
}

// HasMemberType returns a boolean if a field has been set.
func (o *MemberAllOf) HasMemberType() bool {
	if o != nil && o.MemberType != nil {
		return true
	}

	return false
}

// SetMemberType gets a reference to the given MemberType and assigns it to the MemberType field.
func (o *MemberAllOf) SetMemberType(v MemberType) {
	o.MemberType = &v
}

// GetTeamMembers returns the TeamMembers field value if set, zero value otherwise.
func (o *MemberAllOf) GetTeamMembers() []string {
	if o == nil || o.TeamMembers == nil {
		var ret []string
		return ret
	}
	return o.TeamMembers
}

// GetTeamMembersOk returns a tuple with the TeamMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberAllOf) GetTeamMembersOk() ([]string, bool) {
	if o == nil || o.TeamMembers == nil {
		return nil, false
	}
	return o.TeamMembers, true
}

// HasTeamMembers returns a boolean if a field has been set.
func (o *MemberAllOf) HasTeamMembers() bool {
	if o != nil && o.TeamMembers != nil {
		return true
	}

	return false
}

// SetTeamMembers gets a reference to the given []string and assigns it to the TeamMembers field.
func (o *MemberAllOf) SetTeamMembers(v []string) {
	o.TeamMembers = v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *MemberAllOf) GetConstraints() []string {
	if o == nil || o.Constraints == nil {
		var ret []string
		return ret
	}
	return o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberAllOf) GetConstraintsOk() ([]string, bool) {
	if o == nil || o.Constraints == nil {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *MemberAllOf) HasConstraints() bool {
	if o != nil && o.Constraints != nil {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given []string and assigns it to the Constraints field.
func (o *MemberAllOf) SetConstraints(v []string) {
	o.Constraints = v
}

// GetTimeZoneOffset returns the TimeZoneOffset field value if set, zero value otherwise.
func (o *MemberAllOf) GetTimeZoneOffset() string {
	if o == nil || o.TimeZoneOffset == nil {
		var ret string
		return ret
	}
	return *o.TimeZoneOffset
}

// GetTimeZoneOffsetOk returns a tuple with the TimeZoneOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberAllOf) GetTimeZoneOffsetOk() (*string, bool) {
	if o == nil || o.TimeZoneOffset == nil {
		return nil, false
	}
	return o.TimeZoneOffset, true
}

// HasTimeZoneOffset returns a boolean if a field has been set.
func (o *MemberAllOf) HasTimeZoneOffset() bool {
	if o != nil && o.TimeZoneOffset != nil {
		return true
	}

	return false
}

// SetTimeZoneOffset gets a reference to the given string and assigns it to the TimeZoneOffset field.
func (o *MemberAllOf) SetTimeZoneOffset(v string) {
	o.TimeZoneOffset = &v
}

func (o MemberAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.MemberRefId != nil {
		toSerialize["memberRefId"] = o.MemberRefId
	}
	if o.MemberType != nil {
		toSerialize["memberType"] = o.MemberType
	}
	if o.TeamMembers != nil {
		toSerialize["teamMembers"] = o.TeamMembers
	}
	if o.Constraints != nil {
		toSerialize["constraints"] = o.Constraints
	}
	if o.TimeZoneOffset != nil {
		toSerialize["timeZoneOffset"] = o.TimeZoneOffset
	}
	return json.Marshal(toSerialize)
}

type NullableMemberAllOf struct {
	value *MemberAllOf
	isSet bool
}

func (v NullableMemberAllOf) Get() *MemberAllOf {
	return v.value
}

func (v *NullableMemberAllOf) Set(val *MemberAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberAllOf(val *MemberAllOf) *NullableMemberAllOf {
	return &NullableMemberAllOf{value: val, isSet: true}
}

func (v NullableMemberAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


