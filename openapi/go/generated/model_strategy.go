/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Strategy 
type Strategy struct {
	StrategyType *StrategyType `json:"strategyType,omitempty"`
	RankingStrategy *RankingStrategy `json:"rankingStrategy,omitempty"`
	ScoringStrategy *ScoringStrategy `json:"scoringStrategy,omitempty"`
}

// NewStrategy instantiates a new Strategy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStrategy() *Strategy {
	this := Strategy{}
	return &this
}

// NewStrategyWithDefaults instantiates a new Strategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStrategyWithDefaults() *Strategy {
	this := Strategy{}
	return &this
}

// GetStrategyType returns the StrategyType field value if set, zero value otherwise.
func (o *Strategy) GetStrategyType() StrategyType {
	if o == nil || o.StrategyType == nil {
		var ret StrategyType
		return ret
	}
	return *o.StrategyType
}

// GetStrategyTypeOk returns a tuple with the StrategyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Strategy) GetStrategyTypeOk() (*StrategyType, bool) {
	if o == nil || o.StrategyType == nil {
		return nil, false
	}
	return o.StrategyType, true
}

// HasStrategyType returns a boolean if a field has been set.
func (o *Strategy) HasStrategyType() bool {
	if o != nil && o.StrategyType != nil {
		return true
	}

	return false
}

// SetStrategyType gets a reference to the given StrategyType and assigns it to the StrategyType field.
func (o *Strategy) SetStrategyType(v StrategyType) {
	o.StrategyType = &v
}

// GetRankingStrategy returns the RankingStrategy field value if set, zero value otherwise.
func (o *Strategy) GetRankingStrategy() RankingStrategy {
	if o == nil || o.RankingStrategy == nil {
		var ret RankingStrategy
		return ret
	}
	return *o.RankingStrategy
}

// GetRankingStrategyOk returns a tuple with the RankingStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Strategy) GetRankingStrategyOk() (*RankingStrategy, bool) {
	if o == nil || o.RankingStrategy == nil {
		return nil, false
	}
	return o.RankingStrategy, true
}

// HasRankingStrategy returns a boolean if a field has been set.
func (o *Strategy) HasRankingStrategy() bool {
	if o != nil && o.RankingStrategy != nil {
		return true
	}

	return false
}

// SetRankingStrategy gets a reference to the given RankingStrategy and assigns it to the RankingStrategy field.
func (o *Strategy) SetRankingStrategy(v RankingStrategy) {
	o.RankingStrategy = &v
}

// GetScoringStrategy returns the ScoringStrategy field value if set, zero value otherwise.
func (o *Strategy) GetScoringStrategy() ScoringStrategy {
	if o == nil || o.ScoringStrategy == nil {
		var ret ScoringStrategy
		return ret
	}
	return *o.ScoringStrategy
}

// GetScoringStrategyOk returns a tuple with the ScoringStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Strategy) GetScoringStrategyOk() (*ScoringStrategy, bool) {
	if o == nil || o.ScoringStrategy == nil {
		return nil, false
	}
	return o.ScoringStrategy, true
}

// HasScoringStrategy returns a boolean if a field has been set.
func (o *Strategy) HasScoringStrategy() bool {
	if o != nil && o.ScoringStrategy != nil {
		return true
	}

	return false
}

// SetScoringStrategy gets a reference to the given ScoringStrategy and assigns it to the ScoringStrategy field.
func (o *Strategy) SetScoringStrategy(v ScoringStrategy) {
	o.ScoringStrategy = &v
}

func (o Strategy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StrategyType != nil {
		toSerialize["strategyType"] = o.StrategyType
	}
	if o.RankingStrategy != nil {
		toSerialize["rankingStrategy"] = o.RankingStrategy
	}
	if o.ScoringStrategy != nil {
		toSerialize["scoringStrategy"] = o.ScoringStrategy
	}
	return json.Marshal(toSerialize)
}

type NullableStrategy struct {
	value *Strategy
	isSet bool
}

func (v NullableStrategy) Get() *Strategy {
	return v.value
}

func (v *NullableStrategy) Set(val *Strategy) {
	v.value = val
	v.isSet = true
}

func (v NullableStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStrategy(val *Strategy) *NullableStrategy {
	return &NullableStrategy{value: val, isSet: true}
}

func (v NullableStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


