/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DependantOn struct for DependantOn
type DependantOn struct {
	// A rule indicating that it has to be included. Players that are in the EU group with a MUST rule - that means only players that have that group can participate
	Must []string `json:"must,omitempty"`
	// A rule indicating that it will not be included. Players that are in the EU group with a MUST-NOT rule - that means that players that have that group can NOT participate
	MustNot []string `json:"mustNot,omitempty"`
	// A rule indicating that some of them have to be included. Dependancy on shouldMatchAtLeast parameter. Players that are in the EU and DE groups with a SHOULD rule and a shouldMatchAtLeast with a value of 1 - that means that players that have 1 of the groups can participate
	Should []string `json:"should,omitempty"`
	// Dependant on should. Triggered when 2 or more should parameters selected
	ShouldMatchAtLeast *int32 `json:"shouldMatchAtLeast,omitempty"`
}

// NewDependantOn instantiates a new DependantOn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDependantOn() *DependantOn {
	this := DependantOn{}
	return &this
}

// NewDependantOnWithDefaults instantiates a new DependantOn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDependantOnWithDefaults() *DependantOn {
	this := DependantOn{}
	return &this
}

// GetMust returns the Must field value if set, zero value otherwise.
func (o *DependantOn) GetMust() []string {
	if o == nil || o.Must == nil {
		var ret []string
		return ret
	}
	return o.Must
}

// GetMustOk returns a tuple with the Must field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependantOn) GetMustOk() ([]string, bool) {
	if o == nil || o.Must == nil {
		return nil, false
	}
	return o.Must, true
}

// HasMust returns a boolean if a field has been set.
func (o *DependantOn) HasMust() bool {
	if o != nil && o.Must != nil {
		return true
	}

	return false
}

// SetMust gets a reference to the given []string and assigns it to the Must field.
func (o *DependantOn) SetMust(v []string) {
	o.Must = v
}

// GetMustNot returns the MustNot field value if set, zero value otherwise.
func (o *DependantOn) GetMustNot() []string {
	if o == nil || o.MustNot == nil {
		var ret []string
		return ret
	}
	return o.MustNot
}

// GetMustNotOk returns a tuple with the MustNot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependantOn) GetMustNotOk() ([]string, bool) {
	if o == nil || o.MustNot == nil {
		return nil, false
	}
	return o.MustNot, true
}

// HasMustNot returns a boolean if a field has been set.
func (o *DependantOn) HasMustNot() bool {
	if o != nil && o.MustNot != nil {
		return true
	}

	return false
}

// SetMustNot gets a reference to the given []string and assigns it to the MustNot field.
func (o *DependantOn) SetMustNot(v []string) {
	o.MustNot = v
}

// GetShould returns the Should field value if set, zero value otherwise.
func (o *DependantOn) GetShould() []string {
	if o == nil || o.Should == nil {
		var ret []string
		return ret
	}
	return o.Should
}

// GetShouldOk returns a tuple with the Should field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependantOn) GetShouldOk() ([]string, bool) {
	if o == nil || o.Should == nil {
		return nil, false
	}
	return o.Should, true
}

// HasShould returns a boolean if a field has been set.
func (o *DependantOn) HasShould() bool {
	if o != nil && o.Should != nil {
		return true
	}

	return false
}

// SetShould gets a reference to the given []string and assigns it to the Should field.
func (o *DependantOn) SetShould(v []string) {
	o.Should = v
}

// GetShouldMatchAtLeast returns the ShouldMatchAtLeast field value if set, zero value otherwise.
func (o *DependantOn) GetShouldMatchAtLeast() int32 {
	if o == nil || o.ShouldMatchAtLeast == nil {
		var ret int32
		return ret
	}
	return *o.ShouldMatchAtLeast
}

// GetShouldMatchAtLeastOk returns a tuple with the ShouldMatchAtLeast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependantOn) GetShouldMatchAtLeastOk() (*int32, bool) {
	if o == nil || o.ShouldMatchAtLeast == nil {
		return nil, false
	}
	return o.ShouldMatchAtLeast, true
}

// HasShouldMatchAtLeast returns a boolean if a field has been set.
func (o *DependantOn) HasShouldMatchAtLeast() bool {
	if o != nil && o.ShouldMatchAtLeast != nil {
		return true
	}

	return false
}

// SetShouldMatchAtLeast gets a reference to the given int32 and assigns it to the ShouldMatchAtLeast field.
func (o *DependantOn) SetShouldMatchAtLeast(v int32) {
	o.ShouldMatchAtLeast = &v
}

func (o DependantOn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Must != nil {
		toSerialize["must"] = o.Must
	}
	if o.MustNot != nil {
		toSerialize["mustNot"] = o.MustNot
	}
	if o.Should != nil {
		toSerialize["should"] = o.Should
	}
	if o.ShouldMatchAtLeast != nil {
		toSerialize["shouldMatchAtLeast"] = o.ShouldMatchAtLeast
	}
	return json.Marshal(toSerialize)
}

type NullableDependantOn struct {
	value *DependantOn
	isSet bool
}

func (v NullableDependantOn) Get() *DependantOn {
	return v.value
}

func (v *NullableDependantOn) Set(val *DependantOn) {
	v.value = val
	v.isSet = true
}

func (v NullableDependantOn) IsSet() bool {
	return v.isSet
}

func (v *NullableDependantOn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDependantOn(val *DependantOn) *NullableDependantOn {
	return &NullableDependantOn{value: val, isSet: true}
}

func (v NullableDependantOn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDependantOn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


