/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ContestReduced 
type ContestReduced struct {
	// A unique identifier of a Competition
	CompetitionId *string `json:"competitionId,omitempty"`
	// The row number for displaying the Contest in a table
	Row *int32 `json:"row,omitempty"`
	// A name for the Contest. Can be translated
	Name *string `json:"name,omitempty"`
	// To what round does the contest belong
	Round *int32 `json:"round,omitempty"`
	// Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2
	GroupStage *int32 `json:"groupStage,omitempty"`
	// A list of Ziqni contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional.
	EntrantsFromContest []string `json:"entrantsFromContest,omitempty"`
	Status *ContestStatus `json:"status,omitempty"`
	// The code of the contest
	StatusCode *int32 `json:"statusCode,omitempty"`
	// ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
	ScheduledStartDate *time.Time `json:"scheduledStartDate,omitempty"`
	// ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
	ScheduledEndDate *time.Time `json:"scheduledEndDate,omitempty"`
	// ISO8601 timestamp for when a Contest started. All records are stored in UTC time zone
	ActualStartDate *time.Time `json:"actualStartDate,omitempty"`
	// ISO8601 timestamp for when a Contest ended. All records are stored in UTC time zone
	ActualEndDate *time.Time `json:"actualEndDate,omitempty"`
	// A list of id's used to tag
	Tags []string `json:"tags,omitempty"`
	// 
	Rewards []RewardReduced `json:"rewards,omitempty"`
}

// NewContestReduced instantiates a new ContestReduced object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContestReduced() *ContestReduced {
	this := ContestReduced{}
	return &this
}

// NewContestReducedWithDefaults instantiates a new ContestReduced object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContestReducedWithDefaults() *ContestReduced {
	this := ContestReduced{}
	return &this
}

// GetCompetitionId returns the CompetitionId field value if set, zero value otherwise.
func (o *ContestReduced) GetCompetitionId() string {
	if o == nil || o.CompetitionId == nil {
		var ret string
		return ret
	}
	return *o.CompetitionId
}

// GetCompetitionIdOk returns a tuple with the CompetitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestReduced) GetCompetitionIdOk() (*string, bool) {
	if o == nil || o.CompetitionId == nil {
		return nil, false
	}
	return o.CompetitionId, true
}

// HasCompetitionId returns a boolean if a field has been set.
func (o *ContestReduced) HasCompetitionId() bool {
	if o != nil && o.CompetitionId != nil {
		return true
	}

	return false
}

// SetCompetitionId gets a reference to the given string and assigns it to the CompetitionId field.
func (o *ContestReduced) SetCompetitionId(v string) {
	o.CompetitionId = &v
}

// GetRow returns the Row field value if set, zero value otherwise.
func (o *ContestReduced) GetRow() int32 {
	if o == nil || o.Row == nil {
		var ret int32
		return ret
	}
	return *o.Row
}

// GetRowOk returns a tuple with the Row field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestReduced) GetRowOk() (*int32, bool) {
	if o == nil || o.Row == nil {
		return nil, false
	}
	return o.Row, true
}

// HasRow returns a boolean if a field has been set.
func (o *ContestReduced) HasRow() bool {
	if o != nil && o.Row != nil {
		return true
	}

	return false
}

// SetRow gets a reference to the given int32 and assigns it to the Row field.
func (o *ContestReduced) SetRow(v int32) {
	o.Row = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ContestReduced) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestReduced) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ContestReduced) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ContestReduced) SetName(v string) {
	o.Name = &v
}

// GetRound returns the Round field value if set, zero value otherwise.
func (o *ContestReduced) GetRound() int32 {
	if o == nil || o.Round == nil {
		var ret int32
		return ret
	}
	return *o.Round
}

// GetRoundOk returns a tuple with the Round field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestReduced) GetRoundOk() (*int32, bool) {
	if o == nil || o.Round == nil {
		return nil, false
	}
	return o.Round, true
}

// HasRound returns a boolean if a field has been set.
func (o *ContestReduced) HasRound() bool {
	if o != nil && o.Round != nil {
		return true
	}

	return false
}

// SetRound gets a reference to the given int32 and assigns it to the Round field.
func (o *ContestReduced) SetRound(v int32) {
	o.Round = &v
}

// GetGroupStage returns the GroupStage field value if set, zero value otherwise.
func (o *ContestReduced) GetGroupStage() int32 {
	if o == nil || o.GroupStage == nil {
		var ret int32
		return ret
	}
	return *o.GroupStage
}

// GetGroupStageOk returns a tuple with the GroupStage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestReduced) GetGroupStageOk() (*int32, bool) {
	if o == nil || o.GroupStage == nil {
		return nil, false
	}
	return o.GroupStage, true
}

// HasGroupStage returns a boolean if a field has been set.
func (o *ContestReduced) HasGroupStage() bool {
	if o != nil && o.GroupStage != nil {
		return true
	}

	return false
}

// SetGroupStage gets a reference to the given int32 and assigns it to the GroupStage field.
func (o *ContestReduced) SetGroupStage(v int32) {
	o.GroupStage = &v
}

// GetEntrantsFromContest returns the EntrantsFromContest field value if set, zero value otherwise.
func (o *ContestReduced) GetEntrantsFromContest() []string {
	if o == nil || o.EntrantsFromContest == nil {
		var ret []string
		return ret
	}
	return o.EntrantsFromContest
}

// GetEntrantsFromContestOk returns a tuple with the EntrantsFromContest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestReduced) GetEntrantsFromContestOk() ([]string, bool) {
	if o == nil || o.EntrantsFromContest == nil {
		return nil, false
	}
	return o.EntrantsFromContest, true
}

// HasEntrantsFromContest returns a boolean if a field has been set.
func (o *ContestReduced) HasEntrantsFromContest() bool {
	if o != nil && o.EntrantsFromContest != nil {
		return true
	}

	return false
}

// SetEntrantsFromContest gets a reference to the given []string and assigns it to the EntrantsFromContest field.
func (o *ContestReduced) SetEntrantsFromContest(v []string) {
	o.EntrantsFromContest = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ContestReduced) GetStatus() ContestStatus {
	if o == nil || o.Status == nil {
		var ret ContestStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestReduced) GetStatusOk() (*ContestStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ContestReduced) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ContestStatus and assigns it to the Status field.
func (o *ContestReduced) SetStatus(v ContestStatus) {
	o.Status = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *ContestReduced) GetStatusCode() int32 {
	if o == nil || o.StatusCode == nil {
		var ret int32
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestReduced) GetStatusCodeOk() (*int32, bool) {
	if o == nil || o.StatusCode == nil {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *ContestReduced) HasStatusCode() bool {
	if o != nil && o.StatusCode != nil {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given int32 and assigns it to the StatusCode field.
func (o *ContestReduced) SetStatusCode(v int32) {
	o.StatusCode = &v
}

// GetScheduledStartDate returns the ScheduledStartDate field value if set, zero value otherwise.
func (o *ContestReduced) GetScheduledStartDate() time.Time {
	if o == nil || o.ScheduledStartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ScheduledStartDate
}

// GetScheduledStartDateOk returns a tuple with the ScheduledStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestReduced) GetScheduledStartDateOk() (*time.Time, bool) {
	if o == nil || o.ScheduledStartDate == nil {
		return nil, false
	}
	return o.ScheduledStartDate, true
}

// HasScheduledStartDate returns a boolean if a field has been set.
func (o *ContestReduced) HasScheduledStartDate() bool {
	if o != nil && o.ScheduledStartDate != nil {
		return true
	}

	return false
}

// SetScheduledStartDate gets a reference to the given time.Time and assigns it to the ScheduledStartDate field.
func (o *ContestReduced) SetScheduledStartDate(v time.Time) {
	o.ScheduledStartDate = &v
}

// GetScheduledEndDate returns the ScheduledEndDate field value if set, zero value otherwise.
func (o *ContestReduced) GetScheduledEndDate() time.Time {
	if o == nil || o.ScheduledEndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ScheduledEndDate
}

// GetScheduledEndDateOk returns a tuple with the ScheduledEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestReduced) GetScheduledEndDateOk() (*time.Time, bool) {
	if o == nil || o.ScheduledEndDate == nil {
		return nil, false
	}
	return o.ScheduledEndDate, true
}

// HasScheduledEndDate returns a boolean if a field has been set.
func (o *ContestReduced) HasScheduledEndDate() bool {
	if o != nil && o.ScheduledEndDate != nil {
		return true
	}

	return false
}

// SetScheduledEndDate gets a reference to the given time.Time and assigns it to the ScheduledEndDate field.
func (o *ContestReduced) SetScheduledEndDate(v time.Time) {
	o.ScheduledEndDate = &v
}

// GetActualStartDate returns the ActualStartDate field value if set, zero value otherwise.
func (o *ContestReduced) GetActualStartDate() time.Time {
	if o == nil || o.ActualStartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ActualStartDate
}

// GetActualStartDateOk returns a tuple with the ActualStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestReduced) GetActualStartDateOk() (*time.Time, bool) {
	if o == nil || o.ActualStartDate == nil {
		return nil, false
	}
	return o.ActualStartDate, true
}

// HasActualStartDate returns a boolean if a field has been set.
func (o *ContestReduced) HasActualStartDate() bool {
	if o != nil && o.ActualStartDate != nil {
		return true
	}

	return false
}

// SetActualStartDate gets a reference to the given time.Time and assigns it to the ActualStartDate field.
func (o *ContestReduced) SetActualStartDate(v time.Time) {
	o.ActualStartDate = &v
}

// GetActualEndDate returns the ActualEndDate field value if set, zero value otherwise.
func (o *ContestReduced) GetActualEndDate() time.Time {
	if o == nil || o.ActualEndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ActualEndDate
}

// GetActualEndDateOk returns a tuple with the ActualEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestReduced) GetActualEndDateOk() (*time.Time, bool) {
	if o == nil || o.ActualEndDate == nil {
		return nil, false
	}
	return o.ActualEndDate, true
}

// HasActualEndDate returns a boolean if a field has been set.
func (o *ContestReduced) HasActualEndDate() bool {
	if o != nil && o.ActualEndDate != nil {
		return true
	}

	return false
}

// SetActualEndDate gets a reference to the given time.Time and assigns it to the ActualEndDate field.
func (o *ContestReduced) SetActualEndDate(v time.Time) {
	o.ActualEndDate = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ContestReduced) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestReduced) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ContestReduced) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ContestReduced) SetTags(v []string) {
	o.Tags = v
}

// GetRewards returns the Rewards field value if set, zero value otherwise.
func (o *ContestReduced) GetRewards() []RewardReduced {
	if o == nil || o.Rewards == nil {
		var ret []RewardReduced
		return ret
	}
	return o.Rewards
}

// GetRewardsOk returns a tuple with the Rewards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestReduced) GetRewardsOk() ([]RewardReduced, bool) {
	if o == nil || o.Rewards == nil {
		return nil, false
	}
	return o.Rewards, true
}

// HasRewards returns a boolean if a field has been set.
func (o *ContestReduced) HasRewards() bool {
	if o != nil && o.Rewards != nil {
		return true
	}

	return false
}

// SetRewards gets a reference to the given []RewardReduced and assigns it to the Rewards field.
func (o *ContestReduced) SetRewards(v []RewardReduced) {
	o.Rewards = v
}

func (o ContestReduced) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CompetitionId != nil {
		toSerialize["competitionId"] = o.CompetitionId
	}
	if o.Row != nil {
		toSerialize["row"] = o.Row
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Round != nil {
		toSerialize["round"] = o.Round
	}
	if o.GroupStage != nil {
		toSerialize["groupStage"] = o.GroupStage
	}
	if o.EntrantsFromContest != nil {
		toSerialize["entrantsFromContest"] = o.EntrantsFromContest
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.StatusCode != nil {
		toSerialize["statusCode"] = o.StatusCode
	}
	if o.ScheduledStartDate != nil {
		toSerialize["scheduledStartDate"] = o.ScheduledStartDate
	}
	if o.ScheduledEndDate != nil {
		toSerialize["scheduledEndDate"] = o.ScheduledEndDate
	}
	if o.ActualStartDate != nil {
		toSerialize["actualStartDate"] = o.ActualStartDate
	}
	if o.ActualEndDate != nil {
		toSerialize["actualEndDate"] = o.ActualEndDate
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Rewards != nil {
		toSerialize["rewards"] = o.Rewards
	}
	return json.Marshal(toSerialize)
}

type NullableContestReduced struct {
	value *ContestReduced
	isSet bool
}

func (v NullableContestReduced) Get() *ContestReduced {
	return v.value
}

func (v *NullableContestReduced) Set(val *ContestReduced) {
	v.value = val
	v.isSet = true
}

func (v NullableContestReduced) IsSet() bool {
	return v.isSet
}

func (v *NullableContestReduced) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContestReduced(val *ContestReduced) *NullableContestReduced {
	return &NullableContestReduced{value: val, isSet: true}
}

func (v NullableContestReduced) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContestReduced) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


