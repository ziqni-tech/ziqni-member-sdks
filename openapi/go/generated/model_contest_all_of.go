/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ContestAllOf struct for ContestAllOf
type ContestAllOf struct {
	// 
	Name *string `json:"name,omitempty"`
	// 
	Description *string `json:"description,omitempty"`
	// 
	TermsAndConditions *string `json:"termsAndConditions,omitempty"`
	// A unique identifier of a Competition
	CompetitionId *string `json:"competitionId,omitempty"`
	// To what round does the contest belong
	Round *int32 `json:"round,omitempty"`
	RoundType *RoundType `json:"roundType,omitempty"`
	// Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2
	GroupStage *int32 `json:"groupStage,omitempty"`
	// The name of the group stages
	GroupStageLabel *string `json:"groupStageLabel,omitempty"`
	// Maximum number of entrants for the contest
	MaxNumberOfEntrants *int32 `json:"maxNumberOfEntrants,omitempty"`
	// Minimum number of entrants for the contest
	MinNumberOfEntrants *int32 `json:"minNumberOfEntrants,omitempty"`
	// ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
	ScheduledStartDate *time.Time `json:"scheduledStartDate,omitempty"`
	// ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
	ScheduledEndDate *time.Time `json:"scheduledEndDate,omitempty"`
	// ISO8601 timestamp for when a Competition started. All records are stored in UTC time zone
	ActualStartDate *time.Time `json:"actualStartDate,omitempty"`
	// ISO8601 timestamp for when a Competition ended. All records are stored in UTC time zone
	ActualEndDate *time.Time `json:"actualEndDate,omitempty"`
	Strategies *Strategy `json:"strategies,omitempty"`
	Status *ContestStatus `json:"status,omitempty"`
	// The code of the contest
	StatusCode *int32 `json:"statusCode,omitempty"`
	MemberTagsFilter *DependantOn `json:"memberTagsFilter,omitempty"`
	// Additional constraints
	Constraints []string `json:"constraints,omitempty"`
}

// NewContestAllOf instantiates a new ContestAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContestAllOf() *ContestAllOf {
	this := ContestAllOf{}
	return &this
}

// NewContestAllOfWithDefaults instantiates a new ContestAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContestAllOfWithDefaults() *ContestAllOf {
	this := ContestAllOf{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ContestAllOf) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestAllOf) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ContestAllOf) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ContestAllOf) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ContestAllOf) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestAllOf) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ContestAllOf) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ContestAllOf) SetDescription(v string) {
	o.Description = &v
}

// GetTermsAndConditions returns the TermsAndConditions field value if set, zero value otherwise.
func (o *ContestAllOf) GetTermsAndConditions() string {
	if o == nil || o.TermsAndConditions == nil {
		var ret string
		return ret
	}
	return *o.TermsAndConditions
}

// GetTermsAndConditionsOk returns a tuple with the TermsAndConditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestAllOf) GetTermsAndConditionsOk() (*string, bool) {
	if o == nil || o.TermsAndConditions == nil {
		return nil, false
	}
	return o.TermsAndConditions, true
}

// HasTermsAndConditions returns a boolean if a field has been set.
func (o *ContestAllOf) HasTermsAndConditions() bool {
	if o != nil && o.TermsAndConditions != nil {
		return true
	}

	return false
}

// SetTermsAndConditions gets a reference to the given string and assigns it to the TermsAndConditions field.
func (o *ContestAllOf) SetTermsAndConditions(v string) {
	o.TermsAndConditions = &v
}

// GetCompetitionId returns the CompetitionId field value if set, zero value otherwise.
func (o *ContestAllOf) GetCompetitionId() string {
	if o == nil || o.CompetitionId == nil {
		var ret string
		return ret
	}
	return *o.CompetitionId
}

// GetCompetitionIdOk returns a tuple with the CompetitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestAllOf) GetCompetitionIdOk() (*string, bool) {
	if o == nil || o.CompetitionId == nil {
		return nil, false
	}
	return o.CompetitionId, true
}

// HasCompetitionId returns a boolean if a field has been set.
func (o *ContestAllOf) HasCompetitionId() bool {
	if o != nil && o.CompetitionId != nil {
		return true
	}

	return false
}

// SetCompetitionId gets a reference to the given string and assigns it to the CompetitionId field.
func (o *ContestAllOf) SetCompetitionId(v string) {
	o.CompetitionId = &v
}

// GetRound returns the Round field value if set, zero value otherwise.
func (o *ContestAllOf) GetRound() int32 {
	if o == nil || o.Round == nil {
		var ret int32
		return ret
	}
	return *o.Round
}

// GetRoundOk returns a tuple with the Round field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestAllOf) GetRoundOk() (*int32, bool) {
	if o == nil || o.Round == nil {
		return nil, false
	}
	return o.Round, true
}

// HasRound returns a boolean if a field has been set.
func (o *ContestAllOf) HasRound() bool {
	if o != nil && o.Round != nil {
		return true
	}

	return false
}

// SetRound gets a reference to the given int32 and assigns it to the Round field.
func (o *ContestAllOf) SetRound(v int32) {
	o.Round = &v
}

// GetRoundType returns the RoundType field value if set, zero value otherwise.
func (o *ContestAllOf) GetRoundType() RoundType {
	if o == nil || o.RoundType == nil {
		var ret RoundType
		return ret
	}
	return *o.RoundType
}

// GetRoundTypeOk returns a tuple with the RoundType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestAllOf) GetRoundTypeOk() (*RoundType, bool) {
	if o == nil || o.RoundType == nil {
		return nil, false
	}
	return o.RoundType, true
}

// HasRoundType returns a boolean if a field has been set.
func (o *ContestAllOf) HasRoundType() bool {
	if o != nil && o.RoundType != nil {
		return true
	}

	return false
}

// SetRoundType gets a reference to the given RoundType and assigns it to the RoundType field.
func (o *ContestAllOf) SetRoundType(v RoundType) {
	o.RoundType = &v
}

// GetGroupStage returns the GroupStage field value if set, zero value otherwise.
func (o *ContestAllOf) GetGroupStage() int32 {
	if o == nil || o.GroupStage == nil {
		var ret int32
		return ret
	}
	return *o.GroupStage
}

// GetGroupStageOk returns a tuple with the GroupStage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestAllOf) GetGroupStageOk() (*int32, bool) {
	if o == nil || o.GroupStage == nil {
		return nil, false
	}
	return o.GroupStage, true
}

// HasGroupStage returns a boolean if a field has been set.
func (o *ContestAllOf) HasGroupStage() bool {
	if o != nil && o.GroupStage != nil {
		return true
	}

	return false
}

// SetGroupStage gets a reference to the given int32 and assigns it to the GroupStage field.
func (o *ContestAllOf) SetGroupStage(v int32) {
	o.GroupStage = &v
}

// GetGroupStageLabel returns the GroupStageLabel field value if set, zero value otherwise.
func (o *ContestAllOf) GetGroupStageLabel() string {
	if o == nil || o.GroupStageLabel == nil {
		var ret string
		return ret
	}
	return *o.GroupStageLabel
}

// GetGroupStageLabelOk returns a tuple with the GroupStageLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestAllOf) GetGroupStageLabelOk() (*string, bool) {
	if o == nil || o.GroupStageLabel == nil {
		return nil, false
	}
	return o.GroupStageLabel, true
}

// HasGroupStageLabel returns a boolean if a field has been set.
func (o *ContestAllOf) HasGroupStageLabel() bool {
	if o != nil && o.GroupStageLabel != nil {
		return true
	}

	return false
}

// SetGroupStageLabel gets a reference to the given string and assigns it to the GroupStageLabel field.
func (o *ContestAllOf) SetGroupStageLabel(v string) {
	o.GroupStageLabel = &v
}

// GetMaxNumberOfEntrants returns the MaxNumberOfEntrants field value if set, zero value otherwise.
func (o *ContestAllOf) GetMaxNumberOfEntrants() int32 {
	if o == nil || o.MaxNumberOfEntrants == nil {
		var ret int32
		return ret
	}
	return *o.MaxNumberOfEntrants
}

// GetMaxNumberOfEntrantsOk returns a tuple with the MaxNumberOfEntrants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestAllOf) GetMaxNumberOfEntrantsOk() (*int32, bool) {
	if o == nil || o.MaxNumberOfEntrants == nil {
		return nil, false
	}
	return o.MaxNumberOfEntrants, true
}

// HasMaxNumberOfEntrants returns a boolean if a field has been set.
func (o *ContestAllOf) HasMaxNumberOfEntrants() bool {
	if o != nil && o.MaxNumberOfEntrants != nil {
		return true
	}

	return false
}

// SetMaxNumberOfEntrants gets a reference to the given int32 and assigns it to the MaxNumberOfEntrants field.
func (o *ContestAllOf) SetMaxNumberOfEntrants(v int32) {
	o.MaxNumberOfEntrants = &v
}

// GetMinNumberOfEntrants returns the MinNumberOfEntrants field value if set, zero value otherwise.
func (o *ContestAllOf) GetMinNumberOfEntrants() int32 {
	if o == nil || o.MinNumberOfEntrants == nil {
		var ret int32
		return ret
	}
	return *o.MinNumberOfEntrants
}

// GetMinNumberOfEntrantsOk returns a tuple with the MinNumberOfEntrants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestAllOf) GetMinNumberOfEntrantsOk() (*int32, bool) {
	if o == nil || o.MinNumberOfEntrants == nil {
		return nil, false
	}
	return o.MinNumberOfEntrants, true
}

// HasMinNumberOfEntrants returns a boolean if a field has been set.
func (o *ContestAllOf) HasMinNumberOfEntrants() bool {
	if o != nil && o.MinNumberOfEntrants != nil {
		return true
	}

	return false
}

// SetMinNumberOfEntrants gets a reference to the given int32 and assigns it to the MinNumberOfEntrants field.
func (o *ContestAllOf) SetMinNumberOfEntrants(v int32) {
	o.MinNumberOfEntrants = &v
}

// GetScheduledStartDate returns the ScheduledStartDate field value if set, zero value otherwise.
func (o *ContestAllOf) GetScheduledStartDate() time.Time {
	if o == nil || o.ScheduledStartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ScheduledStartDate
}

// GetScheduledStartDateOk returns a tuple with the ScheduledStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestAllOf) GetScheduledStartDateOk() (*time.Time, bool) {
	if o == nil || o.ScheduledStartDate == nil {
		return nil, false
	}
	return o.ScheduledStartDate, true
}

// HasScheduledStartDate returns a boolean if a field has been set.
func (o *ContestAllOf) HasScheduledStartDate() bool {
	if o != nil && o.ScheduledStartDate != nil {
		return true
	}

	return false
}

// SetScheduledStartDate gets a reference to the given time.Time and assigns it to the ScheduledStartDate field.
func (o *ContestAllOf) SetScheduledStartDate(v time.Time) {
	o.ScheduledStartDate = &v
}

// GetScheduledEndDate returns the ScheduledEndDate field value if set, zero value otherwise.
func (o *ContestAllOf) GetScheduledEndDate() time.Time {
	if o == nil || o.ScheduledEndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ScheduledEndDate
}

// GetScheduledEndDateOk returns a tuple with the ScheduledEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestAllOf) GetScheduledEndDateOk() (*time.Time, bool) {
	if o == nil || o.ScheduledEndDate == nil {
		return nil, false
	}
	return o.ScheduledEndDate, true
}

// HasScheduledEndDate returns a boolean if a field has been set.
func (o *ContestAllOf) HasScheduledEndDate() bool {
	if o != nil && o.ScheduledEndDate != nil {
		return true
	}

	return false
}

// SetScheduledEndDate gets a reference to the given time.Time and assigns it to the ScheduledEndDate field.
func (o *ContestAllOf) SetScheduledEndDate(v time.Time) {
	o.ScheduledEndDate = &v
}

// GetActualStartDate returns the ActualStartDate field value if set, zero value otherwise.
func (o *ContestAllOf) GetActualStartDate() time.Time {
	if o == nil || o.ActualStartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ActualStartDate
}

// GetActualStartDateOk returns a tuple with the ActualStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestAllOf) GetActualStartDateOk() (*time.Time, bool) {
	if o == nil || o.ActualStartDate == nil {
		return nil, false
	}
	return o.ActualStartDate, true
}

// HasActualStartDate returns a boolean if a field has been set.
func (o *ContestAllOf) HasActualStartDate() bool {
	if o != nil && o.ActualStartDate != nil {
		return true
	}

	return false
}

// SetActualStartDate gets a reference to the given time.Time and assigns it to the ActualStartDate field.
func (o *ContestAllOf) SetActualStartDate(v time.Time) {
	o.ActualStartDate = &v
}

// GetActualEndDate returns the ActualEndDate field value if set, zero value otherwise.
func (o *ContestAllOf) GetActualEndDate() time.Time {
	if o == nil || o.ActualEndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ActualEndDate
}

// GetActualEndDateOk returns a tuple with the ActualEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestAllOf) GetActualEndDateOk() (*time.Time, bool) {
	if o == nil || o.ActualEndDate == nil {
		return nil, false
	}
	return o.ActualEndDate, true
}

// HasActualEndDate returns a boolean if a field has been set.
func (o *ContestAllOf) HasActualEndDate() bool {
	if o != nil && o.ActualEndDate != nil {
		return true
	}

	return false
}

// SetActualEndDate gets a reference to the given time.Time and assigns it to the ActualEndDate field.
func (o *ContestAllOf) SetActualEndDate(v time.Time) {
	o.ActualEndDate = &v
}

// GetStrategies returns the Strategies field value if set, zero value otherwise.
func (o *ContestAllOf) GetStrategies() Strategy {
	if o == nil || o.Strategies == nil {
		var ret Strategy
		return ret
	}
	return *o.Strategies
}

// GetStrategiesOk returns a tuple with the Strategies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestAllOf) GetStrategiesOk() (*Strategy, bool) {
	if o == nil || o.Strategies == nil {
		return nil, false
	}
	return o.Strategies, true
}

// HasStrategies returns a boolean if a field has been set.
func (o *ContestAllOf) HasStrategies() bool {
	if o != nil && o.Strategies != nil {
		return true
	}

	return false
}

// SetStrategies gets a reference to the given Strategy and assigns it to the Strategies field.
func (o *ContestAllOf) SetStrategies(v Strategy) {
	o.Strategies = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ContestAllOf) GetStatus() ContestStatus {
	if o == nil || o.Status == nil {
		var ret ContestStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestAllOf) GetStatusOk() (*ContestStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ContestAllOf) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ContestStatus and assigns it to the Status field.
func (o *ContestAllOf) SetStatus(v ContestStatus) {
	o.Status = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *ContestAllOf) GetStatusCode() int32 {
	if o == nil || o.StatusCode == nil {
		var ret int32
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestAllOf) GetStatusCodeOk() (*int32, bool) {
	if o == nil || o.StatusCode == nil {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *ContestAllOf) HasStatusCode() bool {
	if o != nil && o.StatusCode != nil {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given int32 and assigns it to the StatusCode field.
func (o *ContestAllOf) SetStatusCode(v int32) {
	o.StatusCode = &v
}

// GetMemberTagsFilter returns the MemberTagsFilter field value if set, zero value otherwise.
func (o *ContestAllOf) GetMemberTagsFilter() DependantOn {
	if o == nil || o.MemberTagsFilter == nil {
		var ret DependantOn
		return ret
	}
	return *o.MemberTagsFilter
}

// GetMemberTagsFilterOk returns a tuple with the MemberTagsFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestAllOf) GetMemberTagsFilterOk() (*DependantOn, bool) {
	if o == nil || o.MemberTagsFilter == nil {
		return nil, false
	}
	return o.MemberTagsFilter, true
}

// HasMemberTagsFilter returns a boolean if a field has been set.
func (o *ContestAllOf) HasMemberTagsFilter() bool {
	if o != nil && o.MemberTagsFilter != nil {
		return true
	}

	return false
}

// SetMemberTagsFilter gets a reference to the given DependantOn and assigns it to the MemberTagsFilter field.
func (o *ContestAllOf) SetMemberTagsFilter(v DependantOn) {
	o.MemberTagsFilter = &v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *ContestAllOf) GetConstraints() []string {
	if o == nil || o.Constraints == nil {
		var ret []string
		return ret
	}
	return o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContestAllOf) GetConstraintsOk() ([]string, bool) {
	if o == nil || o.Constraints == nil {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *ContestAllOf) HasConstraints() bool {
	if o != nil && o.Constraints != nil {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given []string and assigns it to the Constraints field.
func (o *ContestAllOf) SetConstraints(v []string) {
	o.Constraints = v
}

func (o ContestAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.TermsAndConditions != nil {
		toSerialize["termsAndConditions"] = o.TermsAndConditions
	}
	if o.CompetitionId != nil {
		toSerialize["competitionId"] = o.CompetitionId
	}
	if o.Round != nil {
		toSerialize["round"] = o.Round
	}
	if o.RoundType != nil {
		toSerialize["roundType"] = o.RoundType
	}
	if o.GroupStage != nil {
		toSerialize["groupStage"] = o.GroupStage
	}
	if o.GroupStageLabel != nil {
		toSerialize["groupStageLabel"] = o.GroupStageLabel
	}
	if o.MaxNumberOfEntrants != nil {
		toSerialize["maxNumberOfEntrants"] = o.MaxNumberOfEntrants
	}
	if o.MinNumberOfEntrants != nil {
		toSerialize["minNumberOfEntrants"] = o.MinNumberOfEntrants
	}
	if o.ScheduledStartDate != nil {
		toSerialize["scheduledStartDate"] = o.ScheduledStartDate
	}
	if o.ScheduledEndDate != nil {
		toSerialize["scheduledEndDate"] = o.ScheduledEndDate
	}
	if o.ActualStartDate != nil {
		toSerialize["actualStartDate"] = o.ActualStartDate
	}
	if o.ActualEndDate != nil {
		toSerialize["actualEndDate"] = o.ActualEndDate
	}
	if o.Strategies != nil {
		toSerialize["strategies"] = o.Strategies
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.StatusCode != nil {
		toSerialize["statusCode"] = o.StatusCode
	}
	if o.MemberTagsFilter != nil {
		toSerialize["memberTagsFilter"] = o.MemberTagsFilter
	}
	if o.Constraints != nil {
		toSerialize["constraints"] = o.Constraints
	}
	return json.Marshal(toSerialize)
}

type NullableContestAllOf struct {
	value *ContestAllOf
	isSet bool
}

func (v NullableContestAllOf) Get() *ContestAllOf {
	return v.value
}

func (v *NullableContestAllOf) Set(val *ContestAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableContestAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableContestAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContestAllOf(val *ContestAllOf) *NullableContestAllOf {
	return &NullableContestAllOf{value: val, isSet: true}
}

func (v NullableContestAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContestAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


