/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StrategyType The scoring strategy type. SUMMARY: * \"TotalCumulative\": The basic strategy where all the points sum up and are shown in the Leaderboard. Depending on the Rules, all the points are Cumulative. * \"SumBest\": This strategy requires a value to indicate how many highest points will be calculated and shown on the leaderboard * \"LimitedTo\": This strategy requires a value to indicate how many events will be summed up and shown in the leaderboard. * \"FirstTo\": This strategy requires a value to indicate how many points have to be received to complete the mission. 
type StrategyType string

// List of StrategyType
const (
	TOTAL_CUMULATIVE StrategyType = "TotalCumulative"
	SUM_BEST StrategyType = "SumBest"
	LIMITED_TO StrategyType = "LimitedTo"
	FIRST_TO StrategyType = "FirstTo"
)

// All allowed values of StrategyType enum
var AllowedStrategyTypeEnumValues = []StrategyType{
	"TotalCumulative",
	"SumBest",
	"LimitedTo",
	"FirstTo",
}

func (v *StrategyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StrategyType(value)
	for _, existing := range AllowedStrategyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StrategyType", value)
}

// NewStrategyTypeFromValue returns a pointer to a valid StrategyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStrategyTypeFromValue(v string) (*StrategyType, error) {
	ev := StrategyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StrategyType: valid values are %v", v, AllowedStrategyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StrategyType) IsValid() bool {
	for _, existing := range AllowedStrategyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StrategyType value
func (v StrategyType) Ptr() *StrategyType {
	return &v
}

type NullableStrategyType struct {
	value *StrategyType
	isSet bool
}

func (v NullableStrategyType) Get() *StrategyType {
	return v.value
}

func (v *NullableStrategyType) Set(val *StrategyType) {
	v.value = val
	v.isSet = true
}

func (v NullableStrategyType) IsSet() bool {
	return v.isSet
}

func (v *NullableStrategyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStrategyType(val *StrategyType) *NullableStrategyType {
	return &NullableStrategyType{value: val, isSet: true}
}

func (v NullableStrategyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStrategyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

