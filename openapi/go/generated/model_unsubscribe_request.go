/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UnsubscribeRequest 
type UnsubscribeRequest struct {
	// 
	SunscriptionId string `json:"sunscriptionId"`
}

// NewUnsubscribeRequest instantiates a new UnsubscribeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnsubscribeRequest(sunscriptionId string) *UnsubscribeRequest {
	this := UnsubscribeRequest{}
	this.SunscriptionId = sunscriptionId
	return &this
}

// NewUnsubscribeRequestWithDefaults instantiates a new UnsubscribeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnsubscribeRequestWithDefaults() *UnsubscribeRequest {
	this := UnsubscribeRequest{}
	return &this
}

// GetSunscriptionId returns the SunscriptionId field value
func (o *UnsubscribeRequest) GetSunscriptionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SunscriptionId
}

// GetSunscriptionIdOk returns a tuple with the SunscriptionId field value
// and a boolean to check if the value has been set.
func (o *UnsubscribeRequest) GetSunscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SunscriptionId, true
}

// SetSunscriptionId sets field value
func (o *UnsubscribeRequest) SetSunscriptionId(v string) {
	o.SunscriptionId = v
}

func (o UnsubscribeRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sunscriptionId"] = o.SunscriptionId
	}
	return json.Marshal(toSerialize)
}

type NullableUnsubscribeRequest struct {
	value *UnsubscribeRequest
	isSet bool
}

func (v NullableUnsubscribeRequest) Get() *UnsubscribeRequest {
	return v.value
}

func (v *NullableUnsubscribeRequest) Set(val *UnsubscribeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUnsubscribeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUnsubscribeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnsubscribeRequest(val *UnsubscribeRequest) *NullableUnsubscribeRequest {
	return &NullableUnsubscribeRequest{value: val, isSet: true}
}

func (v NullableUnsubscribeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnsubscribeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


