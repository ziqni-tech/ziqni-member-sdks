/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Proxy 
type Proxy struct {
	// 
	Name *string `json:"name,omitempty"`
}

// NewProxy instantiates a new Proxy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProxy() *Proxy {
	this := Proxy{}
	return &this
}

// NewProxyWithDefaults instantiates a new Proxy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProxyWithDefaults() *Proxy {
	this := Proxy{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Proxy) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Proxy) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Proxy) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Proxy) SetName(v string) {
	o.Name = &v
}

func (o Proxy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableProxy struct {
	value *Proxy
	isSet bool
}

func (v NullableProxy) Get() *Proxy {
	return v.value
}

func (v *NullableProxy) Set(val *Proxy) {
	v.value = val
	v.isSet = true
}

func (v NullableProxy) IsSet() bool {
	return v.isSet
}

func (v *NullableProxy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProxy(val *Proxy) *NullableProxy {
	return &NullableProxy{value: val, isSet: true}
}

func (v NullableProxy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProxy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


