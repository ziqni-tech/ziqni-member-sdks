/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RuleArgument 
type RuleArgument struct {
	// 
	Argument string `json:"argument"`
	// 
	Value *string `json:"value,omitempty"`
	// 
	Type *string `json:"type,omitempty"`
	// 
	Order *int32 `json:"order,omitempty"`
}

// NewRuleArgument instantiates a new RuleArgument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleArgument(argument string) *RuleArgument {
	this := RuleArgument{}
	this.Argument = argument
	return &this
}

// NewRuleArgumentWithDefaults instantiates a new RuleArgument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleArgumentWithDefaults() *RuleArgument {
	this := RuleArgument{}
	return &this
}

// GetArgument returns the Argument field value
func (o *RuleArgument) GetArgument() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Argument
}

// GetArgumentOk returns a tuple with the Argument field value
// and a boolean to check if the value has been set.
func (o *RuleArgument) GetArgumentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Argument, true
}

// SetArgument sets field value
func (o *RuleArgument) SetArgument(v string) {
	o.Argument = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *RuleArgument) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleArgument) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *RuleArgument) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *RuleArgument) SetValue(v string) {
	o.Value = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RuleArgument) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleArgument) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RuleArgument) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RuleArgument) SetType(v string) {
	o.Type = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *RuleArgument) GetOrder() int32 {
	if o == nil || o.Order == nil {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleArgument) GetOrderOk() (*int32, bool) {
	if o == nil || o.Order == nil {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *RuleArgument) HasOrder() bool {
	if o != nil && o.Order != nil {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *RuleArgument) SetOrder(v int32) {
	o.Order = &v
}

func (o RuleArgument) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["argument"] = o.Argument
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Order != nil {
		toSerialize["order"] = o.Order
	}
	return json.Marshal(toSerialize)
}

type NullableRuleArgument struct {
	value *RuleArgument
	isSet bool
}

func (v NullableRuleArgument) Get() *RuleArgument {
	return v.value
}

func (v *NullableRuleArgument) Set(val *RuleArgument) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleArgument) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleArgument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleArgument(val *RuleArgument) *NullableRuleArgument {
	return &NullableRuleArgument{value: val, isSet: true}
}

func (v NullableRuleArgument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleArgument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


