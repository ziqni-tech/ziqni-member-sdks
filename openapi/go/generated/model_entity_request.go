/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EntityRequest 
type EntityRequest struct {
	// The language codes can be found in the settings/transalations section of the back office
	LanguageKey *string `json:"languageKey,omitempty"`
	// 
	EntityFilter []EntityFilter `json:"entityFilter,omitempty"`
	// 
	SortBy []QuerySortBy `json:"sortBy,omitempty"`
	// 
	Skip *int32 `json:"skip,omitempty"`
	// 
	Limit *int32 `json:"limit,omitempty"`
}

// NewEntityRequest instantiates a new EntityRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityRequest() *EntityRequest {
	this := EntityRequest{}
	return &this
}

// NewEntityRequestWithDefaults instantiates a new EntityRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityRequestWithDefaults() *EntityRequest {
	this := EntityRequest{}
	return &this
}

// GetLanguageKey returns the LanguageKey field value if set, zero value otherwise.
func (o *EntityRequest) GetLanguageKey() string {
	if o == nil || o.LanguageKey == nil {
		var ret string
		return ret
	}
	return *o.LanguageKey
}

// GetLanguageKeyOk returns a tuple with the LanguageKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityRequest) GetLanguageKeyOk() (*string, bool) {
	if o == nil || o.LanguageKey == nil {
		return nil, false
	}
	return o.LanguageKey, true
}

// HasLanguageKey returns a boolean if a field has been set.
func (o *EntityRequest) HasLanguageKey() bool {
	if o != nil && o.LanguageKey != nil {
		return true
	}

	return false
}

// SetLanguageKey gets a reference to the given string and assigns it to the LanguageKey field.
func (o *EntityRequest) SetLanguageKey(v string) {
	o.LanguageKey = &v
}

// GetEntityFilter returns the EntityFilter field value if set, zero value otherwise.
func (o *EntityRequest) GetEntityFilter() []EntityFilter {
	if o == nil || o.EntityFilter == nil {
		var ret []EntityFilter
		return ret
	}
	return o.EntityFilter
}

// GetEntityFilterOk returns a tuple with the EntityFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityRequest) GetEntityFilterOk() ([]EntityFilter, bool) {
	if o == nil || o.EntityFilter == nil {
		return nil, false
	}
	return o.EntityFilter, true
}

// HasEntityFilter returns a boolean if a field has been set.
func (o *EntityRequest) HasEntityFilter() bool {
	if o != nil && o.EntityFilter != nil {
		return true
	}

	return false
}

// SetEntityFilter gets a reference to the given []EntityFilter and assigns it to the EntityFilter field.
func (o *EntityRequest) SetEntityFilter(v []EntityFilter) {
	o.EntityFilter = v
}

// GetSortBy returns the SortBy field value if set, zero value otherwise.
func (o *EntityRequest) GetSortBy() []QuerySortBy {
	if o == nil || o.SortBy == nil {
		var ret []QuerySortBy
		return ret
	}
	return o.SortBy
}

// GetSortByOk returns a tuple with the SortBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityRequest) GetSortByOk() ([]QuerySortBy, bool) {
	if o == nil || o.SortBy == nil {
		return nil, false
	}
	return o.SortBy, true
}

// HasSortBy returns a boolean if a field has been set.
func (o *EntityRequest) HasSortBy() bool {
	if o != nil && o.SortBy != nil {
		return true
	}

	return false
}

// SetSortBy gets a reference to the given []QuerySortBy and assigns it to the SortBy field.
func (o *EntityRequest) SetSortBy(v []QuerySortBy) {
	o.SortBy = v
}

// GetSkip returns the Skip field value if set, zero value otherwise.
func (o *EntityRequest) GetSkip() int32 {
	if o == nil || o.Skip == nil {
		var ret int32
		return ret
	}
	return *o.Skip
}

// GetSkipOk returns a tuple with the Skip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityRequest) GetSkipOk() (*int32, bool) {
	if o == nil || o.Skip == nil {
		return nil, false
	}
	return o.Skip, true
}

// HasSkip returns a boolean if a field has been set.
func (o *EntityRequest) HasSkip() bool {
	if o != nil && o.Skip != nil {
		return true
	}

	return false
}

// SetSkip gets a reference to the given int32 and assigns it to the Skip field.
func (o *EntityRequest) SetSkip(v int32) {
	o.Skip = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *EntityRequest) GetLimit() int32 {
	if o == nil || o.Limit == nil {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityRequest) GetLimitOk() (*int32, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *EntityRequest) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *EntityRequest) SetLimit(v int32) {
	o.Limit = &v
}

func (o EntityRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LanguageKey != nil {
		toSerialize["languageKey"] = o.LanguageKey
	}
	if o.EntityFilter != nil {
		toSerialize["entityFilter"] = o.EntityFilter
	}
	if o.SortBy != nil {
		toSerialize["sortBy"] = o.SortBy
	}
	if o.Skip != nil {
		toSerialize["skip"] = o.Skip
	}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	return json.Marshal(toSerialize)
}

type NullableEntityRequest struct {
	value *EntityRequest
	isSet bool
}

func (v NullableEntityRequest) Get() *EntityRequest {
	return v.value
}

func (v *NullableEntityRequest) Set(val *EntityRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityRequest(val *EntityRequest) *NullableEntityRequest {
	return &NullableEntityRequest{value: val, isSet: true}
}

func (v NullableEntityRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


