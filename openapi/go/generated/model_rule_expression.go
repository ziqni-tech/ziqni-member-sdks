/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RuleExpression A conditional expressions is an element that declares either a rule expression, condition or routine to be evaluated or executed
type RuleExpression struct {
	// condition or expression or routine
	Type string `json:"type"`
	// All expressions in the condition must either evaluate to TRUE or FALSE if set to TRUE
	MustMatchAll *bool `json:"mustMatchAll,omitempty"`
	// All the expressions of this condition must either evaluate to TRUE or FALSE
	MustEvaluateTo *bool `json:"mustEvaluateTo,omitempty"`
	// The scope of the operand used in the expression
	Scope *string `json:"scope,omitempty"`
	// The order the rules have to be executed in.
	Operand *string `json:"operand,omitempty"`
	// [ *.* ] or [ .* ] or [ == ] or [ > ] or [ >= ] or [ <=]  or [ < ] or [ <> ]
	Operator *string `json:"operator,omitempty"`
	// The value associated with the expression
	Value *string `json:"value,omitempty"`
	// 
	Rules []RuleExpression `json:"rules,omitempty"`
	// 
	Then []RuleRoutine `json:"then,omitempty"`
	// 
	LineNumber *int32 `json:"lineNumber,omitempty"`
}

// NewRuleExpression instantiates a new RuleExpression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleExpression(type_ string) *RuleExpression {
	this := RuleExpression{}
	this.Type = type_
	return &this
}

// NewRuleExpressionWithDefaults instantiates a new RuleExpression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleExpressionWithDefaults() *RuleExpression {
	this := RuleExpression{}
	return &this
}

// GetType returns the Type field value
func (o *RuleExpression) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RuleExpression) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RuleExpression) SetType(v string) {
	o.Type = v
}

// GetMustMatchAll returns the MustMatchAll field value if set, zero value otherwise.
func (o *RuleExpression) GetMustMatchAll() bool {
	if o == nil || o.MustMatchAll == nil {
		var ret bool
		return ret
	}
	return *o.MustMatchAll
}

// GetMustMatchAllOk returns a tuple with the MustMatchAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleExpression) GetMustMatchAllOk() (*bool, bool) {
	if o == nil || o.MustMatchAll == nil {
		return nil, false
	}
	return o.MustMatchAll, true
}

// HasMustMatchAll returns a boolean if a field has been set.
func (o *RuleExpression) HasMustMatchAll() bool {
	if o != nil && o.MustMatchAll != nil {
		return true
	}

	return false
}

// SetMustMatchAll gets a reference to the given bool and assigns it to the MustMatchAll field.
func (o *RuleExpression) SetMustMatchAll(v bool) {
	o.MustMatchAll = &v
}

// GetMustEvaluateTo returns the MustEvaluateTo field value if set, zero value otherwise.
func (o *RuleExpression) GetMustEvaluateTo() bool {
	if o == nil || o.MustEvaluateTo == nil {
		var ret bool
		return ret
	}
	return *o.MustEvaluateTo
}

// GetMustEvaluateToOk returns a tuple with the MustEvaluateTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleExpression) GetMustEvaluateToOk() (*bool, bool) {
	if o == nil || o.MustEvaluateTo == nil {
		return nil, false
	}
	return o.MustEvaluateTo, true
}

// HasMustEvaluateTo returns a boolean if a field has been set.
func (o *RuleExpression) HasMustEvaluateTo() bool {
	if o != nil && o.MustEvaluateTo != nil {
		return true
	}

	return false
}

// SetMustEvaluateTo gets a reference to the given bool and assigns it to the MustEvaluateTo field.
func (o *RuleExpression) SetMustEvaluateTo(v bool) {
	o.MustEvaluateTo = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *RuleExpression) GetScope() string {
	if o == nil || o.Scope == nil {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleExpression) GetScopeOk() (*string, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *RuleExpression) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *RuleExpression) SetScope(v string) {
	o.Scope = &v
}

// GetOperand returns the Operand field value if set, zero value otherwise.
func (o *RuleExpression) GetOperand() string {
	if o == nil || o.Operand == nil {
		var ret string
		return ret
	}
	return *o.Operand
}

// GetOperandOk returns a tuple with the Operand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleExpression) GetOperandOk() (*string, bool) {
	if o == nil || o.Operand == nil {
		return nil, false
	}
	return o.Operand, true
}

// HasOperand returns a boolean if a field has been set.
func (o *RuleExpression) HasOperand() bool {
	if o != nil && o.Operand != nil {
		return true
	}

	return false
}

// SetOperand gets a reference to the given string and assigns it to the Operand field.
func (o *RuleExpression) SetOperand(v string) {
	o.Operand = &v
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *RuleExpression) GetOperator() string {
	if o == nil || o.Operator == nil {
		var ret string
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleExpression) GetOperatorOk() (*string, bool) {
	if o == nil || o.Operator == nil {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *RuleExpression) HasOperator() bool {
	if o != nil && o.Operator != nil {
		return true
	}

	return false
}

// SetOperator gets a reference to the given string and assigns it to the Operator field.
func (o *RuleExpression) SetOperator(v string) {
	o.Operator = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *RuleExpression) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleExpression) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *RuleExpression) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *RuleExpression) SetValue(v string) {
	o.Value = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *RuleExpression) GetRules() []RuleExpression {
	if o == nil || o.Rules == nil {
		var ret []RuleExpression
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleExpression) GetRulesOk() ([]RuleExpression, bool) {
	if o == nil || o.Rules == nil {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *RuleExpression) HasRules() bool {
	if o != nil && o.Rules != nil {
		return true
	}

	return false
}

// SetRules gets a reference to the given []RuleExpression and assigns it to the Rules field.
func (o *RuleExpression) SetRules(v []RuleExpression) {
	o.Rules = v
}

// GetThen returns the Then field value if set, zero value otherwise.
func (o *RuleExpression) GetThen() []RuleRoutine {
	if o == nil || o.Then == nil {
		var ret []RuleRoutine
		return ret
	}
	return o.Then
}

// GetThenOk returns a tuple with the Then field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleExpression) GetThenOk() ([]RuleRoutine, bool) {
	if o == nil || o.Then == nil {
		return nil, false
	}
	return o.Then, true
}

// HasThen returns a boolean if a field has been set.
func (o *RuleExpression) HasThen() bool {
	if o != nil && o.Then != nil {
		return true
	}

	return false
}

// SetThen gets a reference to the given []RuleRoutine and assigns it to the Then field.
func (o *RuleExpression) SetThen(v []RuleRoutine) {
	o.Then = v
}

// GetLineNumber returns the LineNumber field value if set, zero value otherwise.
func (o *RuleExpression) GetLineNumber() int32 {
	if o == nil || o.LineNumber == nil {
		var ret int32
		return ret
	}
	return *o.LineNumber
}

// GetLineNumberOk returns a tuple with the LineNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleExpression) GetLineNumberOk() (*int32, bool) {
	if o == nil || o.LineNumber == nil {
		return nil, false
	}
	return o.LineNumber, true
}

// HasLineNumber returns a boolean if a field has been set.
func (o *RuleExpression) HasLineNumber() bool {
	if o != nil && o.LineNumber != nil {
		return true
	}

	return false
}

// SetLineNumber gets a reference to the given int32 and assigns it to the LineNumber field.
func (o *RuleExpression) SetLineNumber(v int32) {
	o.LineNumber = &v
}

func (o RuleExpression) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.MustMatchAll != nil {
		toSerialize["mustMatchAll"] = o.MustMatchAll
	}
	if o.MustEvaluateTo != nil {
		toSerialize["mustEvaluateTo"] = o.MustEvaluateTo
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	if o.Operand != nil {
		toSerialize["operand"] = o.Operand
	}
	if o.Operator != nil {
		toSerialize["operator"] = o.Operator
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Rules != nil {
		toSerialize["rules"] = o.Rules
	}
	if o.Then != nil {
		toSerialize["then"] = o.Then
	}
	if o.LineNumber != nil {
		toSerialize["lineNumber"] = o.LineNumber
	}
	return json.Marshal(toSerialize)
}

type NullableRuleExpression struct {
	value *RuleExpression
	isSet bool
}

func (v NullableRuleExpression) Get() *RuleExpression {
	return v.value
}

func (v *NullableRuleExpression) Set(val *RuleExpression) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleExpression) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleExpression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleExpression(val *RuleExpression) *NullableRuleExpression {
	return &NullableRuleExpression{value: val, isSet: true}
}

func (v NullableRuleExpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleExpression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


