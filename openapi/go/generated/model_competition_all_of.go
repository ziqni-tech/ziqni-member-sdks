/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// CompetitionAllOf struct for CompetitionAllOf
type CompetitionAllOf struct {
	CompetitionType *CompetitionType `json:"competitionType,omitempty"`
	// Number of rounds to be played in a competition
	NumberOfRounds *int32 `json:"numberOfRounds,omitempty"`
	// Number of group stages
	NumberOfGroupStages *int32 `json:"numberOfGroupStages,omitempty"`
	// Maximum number of partiipants allowed in a competition
	MaxNumberOfEntrants *int32 `json:"maxNumberOfEntrants,omitempty"`
	// Maximum number of partiipants allowed in a competition
	MinNumberOfEntrants *int32 `json:"minNumberOfEntrants,omitempty"`
	// 
	Name *string `json:"name,omitempty"`
	// 
	Description *string `json:"description,omitempty"`
	// 
	TermsAndConditions *string `json:"termsAndConditions,omitempty"`
	EntrantMemberType *string `json:"entrantMemberType,omitempty"`
	// ISO8601 timestamp for when a Competition should start. All records are stored in UTC time zone
	ScheduledStartDate *time.Time `json:"scheduledStartDate,omitempty"`
	// ISO8601 timestamp for when a Competition should end. All records are stored in UTC time zone
	ScheduledEndDate *time.Time `json:"scheduledEndDate,omitempty"`
	// ISO8601 timestamp for when a Competition started. All records are stored in UTC time zone
	ActualStartDate *time.Time `json:"actualStartDate,omitempty"`
	// ISO8601 timestamp for when a Competition ended. All records are stored in UTC time zone
	ActualEndDate *time.Time `json:"actualEndDate,omitempty"`
	Status *CompetitionStatus `json:"status,omitempty"`
	// The code of the competition
	StatusCode *int32 `json:"statusCode,omitempty"`
	// Additional constraints
	Constraints []string `json:"constraints,omitempty"`
	// 
	Products []ProductReduced `json:"products,omitempty"`
	MemberTagsFilter *DependantOn `json:"memberTagsFilter,omitempty"`
}

// NewCompetitionAllOf instantiates a new CompetitionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompetitionAllOf() *CompetitionAllOf {
	this := CompetitionAllOf{}
	return &this
}

// NewCompetitionAllOfWithDefaults instantiates a new CompetitionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompetitionAllOfWithDefaults() *CompetitionAllOf {
	this := CompetitionAllOf{}
	return &this
}

// GetCompetitionType returns the CompetitionType field value if set, zero value otherwise.
func (o *CompetitionAllOf) GetCompetitionType() CompetitionType {
	if o == nil || o.CompetitionType == nil {
		var ret CompetitionType
		return ret
	}
	return *o.CompetitionType
}

// GetCompetitionTypeOk returns a tuple with the CompetitionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompetitionAllOf) GetCompetitionTypeOk() (*CompetitionType, bool) {
	if o == nil || o.CompetitionType == nil {
		return nil, false
	}
	return o.CompetitionType, true
}

// HasCompetitionType returns a boolean if a field has been set.
func (o *CompetitionAllOf) HasCompetitionType() bool {
	if o != nil && o.CompetitionType != nil {
		return true
	}

	return false
}

// SetCompetitionType gets a reference to the given CompetitionType and assigns it to the CompetitionType field.
func (o *CompetitionAllOf) SetCompetitionType(v CompetitionType) {
	o.CompetitionType = &v
}

// GetNumberOfRounds returns the NumberOfRounds field value if set, zero value otherwise.
func (o *CompetitionAllOf) GetNumberOfRounds() int32 {
	if o == nil || o.NumberOfRounds == nil {
		var ret int32
		return ret
	}
	return *o.NumberOfRounds
}

// GetNumberOfRoundsOk returns a tuple with the NumberOfRounds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompetitionAllOf) GetNumberOfRoundsOk() (*int32, bool) {
	if o == nil || o.NumberOfRounds == nil {
		return nil, false
	}
	return o.NumberOfRounds, true
}

// HasNumberOfRounds returns a boolean if a field has been set.
func (o *CompetitionAllOf) HasNumberOfRounds() bool {
	if o != nil && o.NumberOfRounds != nil {
		return true
	}

	return false
}

// SetNumberOfRounds gets a reference to the given int32 and assigns it to the NumberOfRounds field.
func (o *CompetitionAllOf) SetNumberOfRounds(v int32) {
	o.NumberOfRounds = &v
}

// GetNumberOfGroupStages returns the NumberOfGroupStages field value if set, zero value otherwise.
func (o *CompetitionAllOf) GetNumberOfGroupStages() int32 {
	if o == nil || o.NumberOfGroupStages == nil {
		var ret int32
		return ret
	}
	return *o.NumberOfGroupStages
}

// GetNumberOfGroupStagesOk returns a tuple with the NumberOfGroupStages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompetitionAllOf) GetNumberOfGroupStagesOk() (*int32, bool) {
	if o == nil || o.NumberOfGroupStages == nil {
		return nil, false
	}
	return o.NumberOfGroupStages, true
}

// HasNumberOfGroupStages returns a boolean if a field has been set.
func (o *CompetitionAllOf) HasNumberOfGroupStages() bool {
	if o != nil && o.NumberOfGroupStages != nil {
		return true
	}

	return false
}

// SetNumberOfGroupStages gets a reference to the given int32 and assigns it to the NumberOfGroupStages field.
func (o *CompetitionAllOf) SetNumberOfGroupStages(v int32) {
	o.NumberOfGroupStages = &v
}

// GetMaxNumberOfEntrants returns the MaxNumberOfEntrants field value if set, zero value otherwise.
func (o *CompetitionAllOf) GetMaxNumberOfEntrants() int32 {
	if o == nil || o.MaxNumberOfEntrants == nil {
		var ret int32
		return ret
	}
	return *o.MaxNumberOfEntrants
}

// GetMaxNumberOfEntrantsOk returns a tuple with the MaxNumberOfEntrants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompetitionAllOf) GetMaxNumberOfEntrantsOk() (*int32, bool) {
	if o == nil || o.MaxNumberOfEntrants == nil {
		return nil, false
	}
	return o.MaxNumberOfEntrants, true
}

// HasMaxNumberOfEntrants returns a boolean if a field has been set.
func (o *CompetitionAllOf) HasMaxNumberOfEntrants() bool {
	if o != nil && o.MaxNumberOfEntrants != nil {
		return true
	}

	return false
}

// SetMaxNumberOfEntrants gets a reference to the given int32 and assigns it to the MaxNumberOfEntrants field.
func (o *CompetitionAllOf) SetMaxNumberOfEntrants(v int32) {
	o.MaxNumberOfEntrants = &v
}

// GetMinNumberOfEntrants returns the MinNumberOfEntrants field value if set, zero value otherwise.
func (o *CompetitionAllOf) GetMinNumberOfEntrants() int32 {
	if o == nil || o.MinNumberOfEntrants == nil {
		var ret int32
		return ret
	}
	return *o.MinNumberOfEntrants
}

// GetMinNumberOfEntrantsOk returns a tuple with the MinNumberOfEntrants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompetitionAllOf) GetMinNumberOfEntrantsOk() (*int32, bool) {
	if o == nil || o.MinNumberOfEntrants == nil {
		return nil, false
	}
	return o.MinNumberOfEntrants, true
}

// HasMinNumberOfEntrants returns a boolean if a field has been set.
func (o *CompetitionAllOf) HasMinNumberOfEntrants() bool {
	if o != nil && o.MinNumberOfEntrants != nil {
		return true
	}

	return false
}

// SetMinNumberOfEntrants gets a reference to the given int32 and assigns it to the MinNumberOfEntrants field.
func (o *CompetitionAllOf) SetMinNumberOfEntrants(v int32) {
	o.MinNumberOfEntrants = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CompetitionAllOf) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompetitionAllOf) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CompetitionAllOf) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CompetitionAllOf) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CompetitionAllOf) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompetitionAllOf) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CompetitionAllOf) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CompetitionAllOf) SetDescription(v string) {
	o.Description = &v
}

// GetTermsAndConditions returns the TermsAndConditions field value if set, zero value otherwise.
func (o *CompetitionAllOf) GetTermsAndConditions() string {
	if o == nil || o.TermsAndConditions == nil {
		var ret string
		return ret
	}
	return *o.TermsAndConditions
}

// GetTermsAndConditionsOk returns a tuple with the TermsAndConditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompetitionAllOf) GetTermsAndConditionsOk() (*string, bool) {
	if o == nil || o.TermsAndConditions == nil {
		return nil, false
	}
	return o.TermsAndConditions, true
}

// HasTermsAndConditions returns a boolean if a field has been set.
func (o *CompetitionAllOf) HasTermsAndConditions() bool {
	if o != nil && o.TermsAndConditions != nil {
		return true
	}

	return false
}

// SetTermsAndConditions gets a reference to the given string and assigns it to the TermsAndConditions field.
func (o *CompetitionAllOf) SetTermsAndConditions(v string) {
	o.TermsAndConditions = &v
}

// GetEntrantMemberType returns the EntrantMemberType field value if set, zero value otherwise.
func (o *CompetitionAllOf) GetEntrantMemberType() string {
	if o == nil || o.EntrantMemberType == nil {
		var ret string
		return ret
	}
	return *o.EntrantMemberType
}

// GetEntrantMemberTypeOk returns a tuple with the EntrantMemberType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompetitionAllOf) GetEntrantMemberTypeOk() (*string, bool) {
	if o == nil || o.EntrantMemberType == nil {
		return nil, false
	}
	return o.EntrantMemberType, true
}

// HasEntrantMemberType returns a boolean if a field has been set.
func (o *CompetitionAllOf) HasEntrantMemberType() bool {
	if o != nil && o.EntrantMemberType != nil {
		return true
	}

	return false
}

// SetEntrantMemberType gets a reference to the given string and assigns it to the EntrantMemberType field.
func (o *CompetitionAllOf) SetEntrantMemberType(v string) {
	o.EntrantMemberType = &v
}

// GetScheduledStartDate returns the ScheduledStartDate field value if set, zero value otherwise.
func (o *CompetitionAllOf) GetScheduledStartDate() time.Time {
	if o == nil || o.ScheduledStartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ScheduledStartDate
}

// GetScheduledStartDateOk returns a tuple with the ScheduledStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompetitionAllOf) GetScheduledStartDateOk() (*time.Time, bool) {
	if o == nil || o.ScheduledStartDate == nil {
		return nil, false
	}
	return o.ScheduledStartDate, true
}

// HasScheduledStartDate returns a boolean if a field has been set.
func (o *CompetitionAllOf) HasScheduledStartDate() bool {
	if o != nil && o.ScheduledStartDate != nil {
		return true
	}

	return false
}

// SetScheduledStartDate gets a reference to the given time.Time and assigns it to the ScheduledStartDate field.
func (o *CompetitionAllOf) SetScheduledStartDate(v time.Time) {
	o.ScheduledStartDate = &v
}

// GetScheduledEndDate returns the ScheduledEndDate field value if set, zero value otherwise.
func (o *CompetitionAllOf) GetScheduledEndDate() time.Time {
	if o == nil || o.ScheduledEndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ScheduledEndDate
}

// GetScheduledEndDateOk returns a tuple with the ScheduledEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompetitionAllOf) GetScheduledEndDateOk() (*time.Time, bool) {
	if o == nil || o.ScheduledEndDate == nil {
		return nil, false
	}
	return o.ScheduledEndDate, true
}

// HasScheduledEndDate returns a boolean if a field has been set.
func (o *CompetitionAllOf) HasScheduledEndDate() bool {
	if o != nil && o.ScheduledEndDate != nil {
		return true
	}

	return false
}

// SetScheduledEndDate gets a reference to the given time.Time and assigns it to the ScheduledEndDate field.
func (o *CompetitionAllOf) SetScheduledEndDate(v time.Time) {
	o.ScheduledEndDate = &v
}

// GetActualStartDate returns the ActualStartDate field value if set, zero value otherwise.
func (o *CompetitionAllOf) GetActualStartDate() time.Time {
	if o == nil || o.ActualStartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ActualStartDate
}

// GetActualStartDateOk returns a tuple with the ActualStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompetitionAllOf) GetActualStartDateOk() (*time.Time, bool) {
	if o == nil || o.ActualStartDate == nil {
		return nil, false
	}
	return o.ActualStartDate, true
}

// HasActualStartDate returns a boolean if a field has been set.
func (o *CompetitionAllOf) HasActualStartDate() bool {
	if o != nil && o.ActualStartDate != nil {
		return true
	}

	return false
}

// SetActualStartDate gets a reference to the given time.Time and assigns it to the ActualStartDate field.
func (o *CompetitionAllOf) SetActualStartDate(v time.Time) {
	o.ActualStartDate = &v
}

// GetActualEndDate returns the ActualEndDate field value if set, zero value otherwise.
func (o *CompetitionAllOf) GetActualEndDate() time.Time {
	if o == nil || o.ActualEndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ActualEndDate
}

// GetActualEndDateOk returns a tuple with the ActualEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompetitionAllOf) GetActualEndDateOk() (*time.Time, bool) {
	if o == nil || o.ActualEndDate == nil {
		return nil, false
	}
	return o.ActualEndDate, true
}

// HasActualEndDate returns a boolean if a field has been set.
func (o *CompetitionAllOf) HasActualEndDate() bool {
	if o != nil && o.ActualEndDate != nil {
		return true
	}

	return false
}

// SetActualEndDate gets a reference to the given time.Time and assigns it to the ActualEndDate field.
func (o *CompetitionAllOf) SetActualEndDate(v time.Time) {
	o.ActualEndDate = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CompetitionAllOf) GetStatus() CompetitionStatus {
	if o == nil || o.Status == nil {
		var ret CompetitionStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompetitionAllOf) GetStatusOk() (*CompetitionStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CompetitionAllOf) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given CompetitionStatus and assigns it to the Status field.
func (o *CompetitionAllOf) SetStatus(v CompetitionStatus) {
	o.Status = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *CompetitionAllOf) GetStatusCode() int32 {
	if o == nil || o.StatusCode == nil {
		var ret int32
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompetitionAllOf) GetStatusCodeOk() (*int32, bool) {
	if o == nil || o.StatusCode == nil {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *CompetitionAllOf) HasStatusCode() bool {
	if o != nil && o.StatusCode != nil {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given int32 and assigns it to the StatusCode field.
func (o *CompetitionAllOf) SetStatusCode(v int32) {
	o.StatusCode = &v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *CompetitionAllOf) GetConstraints() []string {
	if o == nil || o.Constraints == nil {
		var ret []string
		return ret
	}
	return o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompetitionAllOf) GetConstraintsOk() ([]string, bool) {
	if o == nil || o.Constraints == nil {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *CompetitionAllOf) HasConstraints() bool {
	if o != nil && o.Constraints != nil {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given []string and assigns it to the Constraints field.
func (o *CompetitionAllOf) SetConstraints(v []string) {
	o.Constraints = v
}

// GetProducts returns the Products field value if set, zero value otherwise.
func (o *CompetitionAllOf) GetProducts() []ProductReduced {
	if o == nil || o.Products == nil {
		var ret []ProductReduced
		return ret
	}
	return o.Products
}

// GetProductsOk returns a tuple with the Products field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompetitionAllOf) GetProductsOk() ([]ProductReduced, bool) {
	if o == nil || o.Products == nil {
		return nil, false
	}
	return o.Products, true
}

// HasProducts returns a boolean if a field has been set.
func (o *CompetitionAllOf) HasProducts() bool {
	if o != nil && o.Products != nil {
		return true
	}

	return false
}

// SetProducts gets a reference to the given []ProductReduced and assigns it to the Products field.
func (o *CompetitionAllOf) SetProducts(v []ProductReduced) {
	o.Products = v
}

// GetMemberTagsFilter returns the MemberTagsFilter field value if set, zero value otherwise.
func (o *CompetitionAllOf) GetMemberTagsFilter() DependantOn {
	if o == nil || o.MemberTagsFilter == nil {
		var ret DependantOn
		return ret
	}
	return *o.MemberTagsFilter
}

// GetMemberTagsFilterOk returns a tuple with the MemberTagsFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompetitionAllOf) GetMemberTagsFilterOk() (*DependantOn, bool) {
	if o == nil || o.MemberTagsFilter == nil {
		return nil, false
	}
	return o.MemberTagsFilter, true
}

// HasMemberTagsFilter returns a boolean if a field has been set.
func (o *CompetitionAllOf) HasMemberTagsFilter() bool {
	if o != nil && o.MemberTagsFilter != nil {
		return true
	}

	return false
}

// SetMemberTagsFilter gets a reference to the given DependantOn and assigns it to the MemberTagsFilter field.
func (o *CompetitionAllOf) SetMemberTagsFilter(v DependantOn) {
	o.MemberTagsFilter = &v
}

func (o CompetitionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CompetitionType != nil {
		toSerialize["competitionType"] = o.CompetitionType
	}
	if o.NumberOfRounds != nil {
		toSerialize["numberOfRounds"] = o.NumberOfRounds
	}
	if o.NumberOfGroupStages != nil {
		toSerialize["numberOfGroupStages"] = o.NumberOfGroupStages
	}
	if o.MaxNumberOfEntrants != nil {
		toSerialize["maxNumberOfEntrants"] = o.MaxNumberOfEntrants
	}
	if o.MinNumberOfEntrants != nil {
		toSerialize["minNumberOfEntrants"] = o.MinNumberOfEntrants
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.TermsAndConditions != nil {
		toSerialize["termsAndConditions"] = o.TermsAndConditions
	}
	if o.EntrantMemberType != nil {
		toSerialize["entrantMemberType"] = o.EntrantMemberType
	}
	if o.ScheduledStartDate != nil {
		toSerialize["scheduledStartDate"] = o.ScheduledStartDate
	}
	if o.ScheduledEndDate != nil {
		toSerialize["scheduledEndDate"] = o.ScheduledEndDate
	}
	if o.ActualStartDate != nil {
		toSerialize["actualStartDate"] = o.ActualStartDate
	}
	if o.ActualEndDate != nil {
		toSerialize["actualEndDate"] = o.ActualEndDate
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.StatusCode != nil {
		toSerialize["statusCode"] = o.StatusCode
	}
	if o.Constraints != nil {
		toSerialize["constraints"] = o.Constraints
	}
	if o.Products != nil {
		toSerialize["products"] = o.Products
	}
	if o.MemberTagsFilter != nil {
		toSerialize["memberTagsFilter"] = o.MemberTagsFilter
	}
	return json.Marshal(toSerialize)
}

type NullableCompetitionAllOf struct {
	value *CompetitionAllOf
	isSet bool
}

func (v NullableCompetitionAllOf) Get() *CompetitionAllOf {
	return v.value
}

func (v *NullableCompetitionAllOf) Set(val *CompetitionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCompetitionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCompetitionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompetitionAllOf(val *CompetitionAllOf) *NullableCompetitionAllOf {
	return &NullableCompetitionAllOf{value: val, isSet: true}
}

func (v NullableCompetitionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompetitionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


