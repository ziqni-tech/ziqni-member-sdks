/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResponseMeta Response metadata   
type ResponseMeta struct {
	// 
	TotalRecordsFound int32 `json:"totalRecordsFound"`
	// 
	Skip int32 `json:"skip"`
	// 
	Limit int32 `json:"limit"`
	// 
	ObjectType *string `json:"objectType,omitempty"`
}

// NewResponseMeta instantiates a new ResponseMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseMeta(totalRecordsFound int32, skip int32, limit int32) *ResponseMeta {
	this := ResponseMeta{}
	this.TotalRecordsFound = totalRecordsFound
	this.Skip = skip
	this.Limit = limit
	return &this
}

// NewResponseMetaWithDefaults instantiates a new ResponseMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseMetaWithDefaults() *ResponseMeta {
	this := ResponseMeta{}
	return &this
}

// GetTotalRecordsFound returns the TotalRecordsFound field value
func (o *ResponseMeta) GetTotalRecordsFound() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalRecordsFound
}

// GetTotalRecordsFoundOk returns a tuple with the TotalRecordsFound field value
// and a boolean to check if the value has been set.
func (o *ResponseMeta) GetTotalRecordsFoundOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalRecordsFound, true
}

// SetTotalRecordsFound sets field value
func (o *ResponseMeta) SetTotalRecordsFound(v int32) {
	o.TotalRecordsFound = v
}

// GetSkip returns the Skip field value
func (o *ResponseMeta) GetSkip() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Skip
}

// GetSkipOk returns a tuple with the Skip field value
// and a boolean to check if the value has been set.
func (o *ResponseMeta) GetSkipOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Skip, true
}

// SetSkip sets field value
func (o *ResponseMeta) SetSkip(v int32) {
	o.Skip = v
}

// GetLimit returns the Limit field value
func (o *ResponseMeta) GetLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *ResponseMeta) GetLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *ResponseMeta) SetLimit(v int32) {
	o.Limit = v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *ResponseMeta) GetObjectType() string {
	if o == nil || o.ObjectType == nil {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseMeta) GetObjectTypeOk() (*string, bool) {
	if o == nil || o.ObjectType == nil {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *ResponseMeta) HasObjectType() bool {
	if o != nil && o.ObjectType != nil {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *ResponseMeta) SetObjectType(v string) {
	o.ObjectType = &v
}

func (o ResponseMeta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["totalRecordsFound"] = o.TotalRecordsFound
	}
	if true {
		toSerialize["skip"] = o.Skip
	}
	if true {
		toSerialize["limit"] = o.Limit
	}
	if o.ObjectType != nil {
		toSerialize["objectType"] = o.ObjectType
	}
	return json.Marshal(toSerialize)
}

type NullableResponseMeta struct {
	value *ResponseMeta
	isSet bool
}

func (v NullableResponseMeta) Get() *ResponseMeta {
	return v.value
}

func (v *NullableResponseMeta) Set(val *ResponseMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseMeta(val *ResponseMeta) *NullableResponseMeta {
	return &NullableResponseMeta{value: val, isSet: true}
}

func (v NullableResponseMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


