/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ContestStatus The status of contest
type ContestStatus string

// List of ContestStatus
const (
	DELETED ContestStatus = "Deleted"
	NOT_STARTED ContestStatus = "NotStarted"
	ACTIVE ContestStatus = "Active"
	FINISHED ContestStatus = "Finished"
	FINALISED ContestStatus = "Finalised"
	CANCELLED ContestStatus = "Cancelled"
)

// All allowed values of ContestStatus enum
var AllowedContestStatusEnumValues = []ContestStatus{
	"Deleted",
	"NotStarted",
	"Active",
	"Finished",
	"Finalised",
	"Cancelled",
}

func (v *ContestStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContestStatus(value)
	for _, existing := range AllowedContestStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContestStatus", value)
}

// NewContestStatusFromValue returns a pointer to a valid ContestStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContestStatusFromValue(v string) (*ContestStatus, error) {
	ev := ContestStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContestStatus: valid values are %v", v, AllowedContestStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContestStatus) IsValid() bool {
	for _, existing := range AllowedContestStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContestStatus value
func (v ContestStatus) Ptr() *ContestStatus {
	return &v
}

type NullableContestStatus struct {
	value *ContestStatus
	isSet bool
}

func (v NullableContestStatus) Get() *ContestStatus {
	return v.value
}

func (v *NullableContestStatus) Set(val *ContestStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableContestStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableContestStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContestStatus(val *ContestStatus) *NullableContestStatus {
	return &NullableContestStatus{value: val, isSet: true}
}

func (v NullableContestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContestStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

