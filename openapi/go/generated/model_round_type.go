/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RoundType The type of rounds in a contest
type RoundType string

// List of RoundType
const (
	TIME_BOUND RoundType = "TimeBound"
	TARGET_BASED RoundType = "TargetBased"
)

// All allowed values of RoundType enum
var AllowedRoundTypeEnumValues = []RoundType{
	"TimeBound",
	"TargetBased",
}

func (v *RoundType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoundType(value)
	for _, existing := range AllowedRoundTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoundType", value)
}

// NewRoundTypeFromValue returns a pointer to a valid RoundType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoundTypeFromValue(v string) (*RoundType, error) {
	ev := RoundType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoundType: valid values are %v", v, AllowedRoundTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoundType) IsValid() bool {
	for _, existing := range AllowedRoundTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoundType value
func (v RoundType) Ptr() *RoundType {
	return &v
}

type NullableRoundType struct {
	value *RoundType
	isSet bool
}

func (v NullableRoundType) Get() *RoundType {
	return v.value
}

func (v *NullableRoundType) Set(val *RoundType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoundType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoundType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoundType(val *RoundType) *NullableRoundType {
	return &NullableRoundType{value: val, isSet: true}
}

func (v NullableRoundType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoundType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

