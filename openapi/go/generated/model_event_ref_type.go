/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EventRefType Defines an even type attached to the message
type EventRefType string

// List of EventRefType
const (
	COMPETITION EventRefType = "Competition"
	CONTEST EventRefType = "Contest"
	ACHIEVEMENT EventRefType = "Achievement"
	USER EventRefType = "User"
	MEMBER_MESSAGE EventRefType = "MemberMessage"
)

// All allowed values of EventRefType enum
var AllowedEventRefTypeEnumValues = []EventRefType{
	"Competition",
	"Contest",
	"Achievement",
	"User",
	"MemberMessage",
}

func (v *EventRefType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventRefType(value)
	for _, existing := range AllowedEventRefTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventRefType", value)
}

// NewEventRefTypeFromValue returns a pointer to a valid EventRefType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventRefTypeFromValue(v string) (*EventRefType, error) {
	ev := EventRefType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventRefType: valid values are %v", v, AllowedEventRefTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventRefType) IsValid() bool {
	for _, existing := range AllowedEventRefTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EventRefType value
func (v EventRefType) Ptr() *EventRefType {
	return &v
}

type NullableEventRefType struct {
	value *EventRefType
	isSet bool
}

func (v NullableEventRefType) Get() *EventRefType {
	return v.value
}

func (v *NullableEventRefType) Set(val *EventRefType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventRefType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventRefType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventRefType(val *EventRefType) *NullableEventRefType {
	return &NullableEventRefType{value: val, isSet: true}
}

func (v NullableEventRefType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventRefType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

