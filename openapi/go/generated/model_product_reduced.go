/*
ZIQNI Member API

The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ProductReduced 
type ProductReduced struct {
	// The name of the product
	Name *string `json:"name,omitempty"`
	// The reference to this product in your system. The reference identifier can not be changed after the product has been created
	ProductRefId *string `json:"productRefId,omitempty"`
	// A list of Strings used to tag products with taxonomy terms
	Tags []string `json:"tags,omitempty"`
}

// NewProductReduced instantiates a new ProductReduced object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductReduced() *ProductReduced {
	this := ProductReduced{}
	return &this
}

// NewProductReducedWithDefaults instantiates a new ProductReduced object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductReducedWithDefaults() *ProductReduced {
	this := ProductReduced{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProductReduced) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductReduced) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProductReduced) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProductReduced) SetName(v string) {
	o.Name = &v
}

// GetProductRefId returns the ProductRefId field value if set, zero value otherwise.
func (o *ProductReduced) GetProductRefId() string {
	if o == nil || o.ProductRefId == nil {
		var ret string
		return ret
	}
	return *o.ProductRefId
}

// GetProductRefIdOk returns a tuple with the ProductRefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductReduced) GetProductRefIdOk() (*string, bool) {
	if o == nil || o.ProductRefId == nil {
		return nil, false
	}
	return o.ProductRefId, true
}

// HasProductRefId returns a boolean if a field has been set.
func (o *ProductReduced) HasProductRefId() bool {
	if o != nil && o.ProductRefId != nil {
		return true
	}

	return false
}

// SetProductRefId gets a reference to the given string and assigns it to the ProductRefId field.
func (o *ProductReduced) SetProductRefId(v string) {
	o.ProductRefId = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ProductReduced) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductReduced) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ProductReduced) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ProductReduced) SetTags(v []string) {
	o.Tags = v
}

func (o ProductReduced) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ProductRefId != nil {
		toSerialize["productRefId"] = o.ProductRefId
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableProductReduced struct {
	value *ProductReduced
	isSet bool
}

func (v NullableProductReduced) Get() *ProductReduced {
	return v.value
}

func (v *NullableProductReduced) Set(val *ProductReduced) {
	v.value = val
	v.isSet = true
}

func (v NullableProductReduced) IsSet() bool {
	return v.isSet
}

func (v *NullableProductReduced) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductReduced(val *ProductReduced) *NullableProductReduced {
	return &NullableProductReduced{value: val, isSet: true}
}

func (v NullableProductReduced) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductReduced) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


