//
// AchievementAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AchievementAllOf: Codable, Hashable {

    public var name: String?
    public var description: String?
    public var termsAndConditions: String?
    /** Additional constraints, if set means true [optinRequiredForEntrants, hasRules, hasRewards] */
    public var constraints: [String]?
    /** Maximum number of issued achievements */
    public var maxNumberOfIssues: Int?
    public var scheduling: Scheduling?
    /** Achievement status */
    public var status: String?
    public var statusCode: Int?
    public var memberTagsFilter: DependantOn?
    public var achievementDependencies: DependantOn?
    public var productTagsFilter: DependantOn?

    public init(name: String? = nil, description: String? = nil, termsAndConditions: String? = nil, constraints: [String]? = nil, maxNumberOfIssues: Int? = nil, scheduling: Scheduling? = nil, status: String? = nil, statusCode: Int? = nil, memberTagsFilter: DependantOn? = nil, achievementDependencies: DependantOn? = nil, productTagsFilter: DependantOn? = nil) {
        self.name = name
        self.description = description
        self.termsAndConditions = termsAndConditions
        self.constraints = constraints
        self.maxNumberOfIssues = maxNumberOfIssues
        self.scheduling = scheduling
        self.status = status
        self.statusCode = statusCode
        self.memberTagsFilter = memberTagsFilter
        self.achievementDependencies = achievementDependencies
        self.productTagsFilter = productTagsFilter
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case description
        case termsAndConditions
        case constraints
        case maxNumberOfIssues
        case scheduling
        case status
        case statusCode
        case memberTagsFilter
        case achievementDependencies
        case productTagsFilter
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(termsAndConditions, forKey: .termsAndConditions)
        try container.encodeIfPresent(constraints, forKey: .constraints)
        try container.encodeIfPresent(maxNumberOfIssues, forKey: .maxNumberOfIssues)
        try container.encodeIfPresent(scheduling, forKey: .scheduling)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(statusCode, forKey: .statusCode)
        try container.encodeIfPresent(memberTagsFilter, forKey: .memberTagsFilter)
        try container.encodeIfPresent(achievementDependencies, forKey: .achievementDependencies)
        try container.encodeIfPresent(productTagsFilter, forKey: .productTagsFilter)
    }
}

