//
// Message.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Message: Codable, Hashable {

    public var eventRefType: EventRefType?
    /** The reference ID of the event object */
    public var eventRefId: String?
    public var messageType: MessageType?
    /** The title of the message */
    public var subject: String?
    /** The context of the message */
    public var body: String?
    public var status: MessageStatus?
    /** The time that the message will disappear after. ISO8601 timestamp */
    public var expiry: Date?
    /** The reference ID of the event object */
    public var memberIds: [String]?
    public var memberTags: [String]?
    /** Ziqni id of the model */
    public var id: String
    /** This is the space name which is linked to the account */
    public var spaceName: String?
    /** ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone */
    public var created: Date?
    public var customFields: [String: AnyCodable]?
    /** A list of id's used to tag models */
    public var tags: [String]?
    public var metadata: [String: String]?

    public init(eventRefType: EventRefType? = nil, eventRefId: String? = nil, messageType: MessageType? = nil, subject: String? = nil, body: String? = nil, status: MessageStatus? = nil, expiry: Date? = nil, memberIds: [String]? = nil, memberTags: [String]? = nil, id: String, spaceName: String? = nil, created: Date? = nil, customFields: [String: AnyCodable]? = nil, tags: [String]? = nil, metadata: [String: String]? = nil) {
        self.eventRefType = eventRefType
        self.eventRefId = eventRefId
        self.messageType = messageType
        self.subject = subject
        self.body = body
        self.status = status
        self.expiry = expiry
        self.memberIds = memberIds
        self.memberTags = memberTags
        self.id = id
        self.spaceName = spaceName
        self.created = created
        self.customFields = customFields
        self.tags = tags
        self.metadata = metadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eventRefType
        case eventRefId
        case messageType
        case subject
        case body
        case status
        case expiry
        case memberIds
        case memberTags
        case id
        case spaceName
        case created
        case customFields
        case tags
        case metadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(eventRefType, forKey: .eventRefType)
        try container.encodeIfPresent(eventRefId, forKey: .eventRefId)
        try container.encodeIfPresent(messageType, forKey: .messageType)
        try container.encodeIfPresent(subject, forKey: .subject)
        try container.encodeIfPresent(body, forKey: .body)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(expiry, forKey: .expiry)
        try container.encodeIfPresent(memberIds, forKey: .memberIds)
        try container.encodeIfPresent(memberTags, forKey: .memberTags)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(spaceName, forKey: .spaceName)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(customFields, forKey: .customFields)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(metadata, forKey: .metadata)
    }
}

