//
// CompetitionAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CompetitionAllOf: Codable, Hashable {

    public var competitionType: CompetitionType?
    /** Number of rounds to be played in a competition */
    public var numberOfRounds: Int?
    /** Number of group stages */
    public var numberOfGroupStages: Int?
    /** Maximum number of partiipants allowed in a competition */
    public var maxNumberOfEntrants: Int?
    /** Maximum number of partiipants allowed in a competition */
    public var minNumberOfEntrants: Int?
    public var name: String?
    public var description: String?
    public var termsAndConditions: String?
    public var entrantMemberType: String?
    /** ISO8601 timestamp for when a Competition should start. All records are stored in UTC time zone */
    public var scheduledStartDate: Date?
    /** ISO8601 timestamp for when a Competition should end. All records are stored in UTC time zone */
    public var scheduledEndDate: Date?
    /** ISO8601 timestamp for when a Competition started. All records are stored in UTC time zone */
    public var actualStartDate: Date?
    /** ISO8601 timestamp for when a Competition ended. All records are stored in UTC time zone */
    public var actualEndDate: Date?
    public var status: CompetitionStatus?
    /** The code of the competition */
    public var statusCode: Int?
    /** Additional constraints */
    public var constraints: Set<String>?
    public var products: [ProductReduced]?
    public var memberTagsFilter: DependantOn?

    public init(competitionType: CompetitionType? = nil, numberOfRounds: Int? = nil, numberOfGroupStages: Int? = nil, maxNumberOfEntrants: Int? = nil, minNumberOfEntrants: Int? = nil, name: String? = nil, description: String? = nil, termsAndConditions: String? = nil, entrantMemberType: String? = nil, scheduledStartDate: Date? = nil, scheduledEndDate: Date? = nil, actualStartDate: Date? = nil, actualEndDate: Date? = nil, status: CompetitionStatus? = nil, statusCode: Int? = nil, constraints: Set<String>? = nil, products: [ProductReduced]? = nil, memberTagsFilter: DependantOn? = nil) {
        self.competitionType = competitionType
        self.numberOfRounds = numberOfRounds
        self.numberOfGroupStages = numberOfGroupStages
        self.maxNumberOfEntrants = maxNumberOfEntrants
        self.minNumberOfEntrants = minNumberOfEntrants
        self.name = name
        self.description = description
        self.termsAndConditions = termsAndConditions
        self.entrantMemberType = entrantMemberType
        self.scheduledStartDate = scheduledStartDate
        self.scheduledEndDate = scheduledEndDate
        self.actualStartDate = actualStartDate
        self.actualEndDate = actualEndDate
        self.status = status
        self.statusCode = statusCode
        self.constraints = constraints
        self.products = products
        self.memberTagsFilter = memberTagsFilter
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case competitionType
        case numberOfRounds
        case numberOfGroupStages
        case maxNumberOfEntrants
        case minNumberOfEntrants
        case name
        case description
        case termsAndConditions
        case entrantMemberType
        case scheduledStartDate
        case scheduledEndDate
        case actualStartDate
        case actualEndDate
        case status
        case statusCode
        case constraints
        case products
        case memberTagsFilter
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(competitionType, forKey: .competitionType)
        try container.encodeIfPresent(numberOfRounds, forKey: .numberOfRounds)
        try container.encodeIfPresent(numberOfGroupStages, forKey: .numberOfGroupStages)
        try container.encodeIfPresent(maxNumberOfEntrants, forKey: .maxNumberOfEntrants)
        try container.encodeIfPresent(minNumberOfEntrants, forKey: .minNumberOfEntrants)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(termsAndConditions, forKey: .termsAndConditions)
        try container.encodeIfPresent(entrantMemberType, forKey: .entrantMemberType)
        try container.encodeIfPresent(scheduledStartDate, forKey: .scheduledStartDate)
        try container.encodeIfPresent(scheduledEndDate, forKey: .scheduledEndDate)
        try container.encodeIfPresent(actualStartDate, forKey: .actualStartDate)
        try container.encodeIfPresent(actualEndDate, forKey: .actualEndDate)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(statusCode, forKey: .statusCode)
        try container.encodeIfPresent(constraints, forKey: .constraints)
        try container.encodeIfPresent(products, forKey: .products)
        try container.encodeIfPresent(memberTagsFilter, forKey: .memberTagsFilter)
    }
}

