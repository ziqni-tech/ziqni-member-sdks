//
// RewardReduced.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct RewardReduced: Codable, Hashable {

    /** If used in the context of contest this will associate with the rank of the leaderboard */
    public var rewardRank: String?
    /** The name of a reward */
    public var name: String?
    /** Numerical value of the reward that will be issued based on the reward type */
    public var rewardValue: Double?
    /** Reward Type key */
    public var rewardType: String?
    /** A unique id of the Reward Type */
    public var rewardTypeId: String?

    public init(rewardRank: String? = nil, name: String? = nil, rewardValue: Double? = nil, rewardType: String? = nil, rewardTypeId: String? = nil) {
        self.rewardRank = rewardRank
        self.name = name
        self.rewardValue = rewardValue
        self.rewardType = rewardType
        self.rewardTypeId = rewardTypeId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case rewardRank
        case name
        case rewardValue
        case rewardType
        case rewardTypeId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(rewardRank, forKey: .rewardRank)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(rewardValue, forKey: .rewardValue)
        try container.encodeIfPresent(rewardType, forKey: .rewardType)
        try container.encodeIfPresent(rewardTypeId, forKey: .rewardTypeId)
    }
}

