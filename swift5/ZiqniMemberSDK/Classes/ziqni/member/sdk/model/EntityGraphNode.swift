//
// EntityGraphNode.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Mission is a specialised view of connected achievements. The first achievement is the container, every dependant achievement is a chained dependency */
public struct EntityGraphNode: Codable, Hashable {

    public var name: String?
    public var optInStatus: OptinStatus
    /** isCompleted, etc */
    public var constraints: [String]?
    public var entityType: String?
    public var entityId: String
    public var entityStatusCode: Int?
    public var entityStatus: String?
    public var includes: [String: AnyCodable]?

    public init(name: String? = nil, optInStatus: OptinStatus, constraints: [String]? = nil, entityType: String? = nil, entityId: String, entityStatusCode: Int? = nil, entityStatus: String? = nil, includes: [String: AnyCodable]? = nil) {
        self.name = name
        self.optInStatus = optInStatus
        self.constraints = constraints
        self.entityType = entityType
        self.entityId = entityId
        self.entityStatusCode = entityStatusCode
        self.entityStatus = entityStatus
        self.includes = includes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case optInStatus
        case constraints
        case entityType
        case entityId
        case entityStatusCode
        case entityStatus
        case includes
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encode(optInStatus, forKey: .optInStatus)
        try container.encodeIfPresent(constraints, forKey: .constraints)
        try container.encodeIfPresent(entityType, forKey: .entityType)
        try container.encode(entityId, forKey: .entityId)
        try container.encodeIfPresent(entityStatusCode, forKey: .entityStatusCode)
        try container.encodeIfPresent(entityStatus, forKey: .entityStatus)
        try container.encodeIfPresent(includes, forKey: .includes)
    }
}

