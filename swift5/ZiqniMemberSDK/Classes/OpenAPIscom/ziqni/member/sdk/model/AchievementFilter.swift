//
// AchievementFilter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AchievementFilter: Codable, Hashable {

    public var tags: [String]?
    public var startDate: DateRange?
    public var endDate: DateRange?
    public var ids: [String]?
    public var sortBy: [QuerySortBy]?
    public var skip: Int?
    public var limit: Int?
    public var statusCode: NumberRange?
    /** Specify the constraints that need to be applied to the filter. */
    public var constraints: [String]?
    public var productTags: [String]?
    /** deprecated */
    public var productIds: [String]?

    public init(tags: [String]? = nil, startDate: DateRange? = nil, endDate: DateRange? = nil, ids: [String]? = nil, sortBy: [QuerySortBy]? = nil, skip: Int? = nil, limit: Int? = nil, statusCode: NumberRange? = nil, constraints: [String]? = nil, productTags: [String]? = nil, productIds: [String]? = nil) {
        self.tags = tags
        self.startDate = startDate
        self.endDate = endDate
        self.ids = ids
        self.sortBy = sortBy
        self.skip = skip
        self.limit = limit
        self.statusCode = statusCode
        self.constraints = constraints
        self.productTags = productTags
        self.productIds = productIds
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case tags
        case startDate
        case endDate
        case ids
        case sortBy
        case skip
        case limit
        case statusCode
        case constraints
        case productTags
        case productIds
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encodeIfPresent(ids, forKey: .ids)
        try container.encodeIfPresent(sortBy, forKey: .sortBy)
        try container.encodeIfPresent(skip, forKey: .skip)
        try container.encodeIfPresent(limit, forKey: .limit)
        try container.encodeIfPresent(statusCode, forKey: .statusCode)
        try container.encodeIfPresent(constraints, forKey: .constraints)
        try container.encodeIfPresent(productTags, forKey: .productTags)
        try container.encodeIfPresent(productIds, forKey: .productIds)
    }
}

