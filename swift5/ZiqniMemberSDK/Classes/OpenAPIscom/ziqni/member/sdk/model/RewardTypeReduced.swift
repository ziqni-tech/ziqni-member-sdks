//
// RewardTypeReduced.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct RewardTypeReduced: Codable, Hashable {

    /** A unique key that represents the reward type */
    public var key: String?
    /** The key assigned to the unit of measure  */
    public var uom: String?
    /** The ISO code assigned to the unit of measure */
    public var uomIsoCode: String?
    /** The symbol assigned to the unit of measure */
    public var uomSymbol: String?
    /**  The type of UOM, either Other Currency Mass Time Temperature ElectricCurrent AmountOfSubstance LuminousIntensity Distance */
    public var uomType: String?

    public init(key: String? = nil, uom: String? = nil, uomIsoCode: String? = nil, uomSymbol: String? = nil, uomType: String? = nil) {
        self.key = key
        self.uom = uom
        self.uomIsoCode = uomIsoCode
        self.uomSymbol = uomSymbol
        self.uomType = uomType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case key
        case uom
        case uomIsoCode
        case uomSymbol
        case uomType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(key, forKey: .key)
        try container.encodeIfPresent(uom, forKey: .uom)
        try container.encodeIfPresent(uomIsoCode, forKey: .uomIsoCode)
        try container.encodeIfPresent(uomSymbol, forKey: .uomSymbol)
        try container.encodeIfPresent(uomType, forKey: .uomType)
    }
}

