//
// AwardAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AwardAllOf: Codable, Hashable {

    /** A unique identifier of a Member */
    public var memberId: String?
    /** A unique identifier of a Reward */
    public var rewardId: String?
    public var rewardType: RewardTypeReduced?
    /** If used in the context of contest this will associate with the rank of the leaderboard */
    public var rewardRank: String?
    /** Numerical value of the reward that will be issued based on the reward type */
    public var rewardValue: Double?
    /** Delay of issuing a reward in minutes */
    public var delay: Int?
    public var entityType: EntityType?
    /** The Id of the contest or achievement related to this Award. Dependant on entityType */
    public var entityId: String?
    /** ISO8601 timestamp for when an Award is available until a specific point in time. All records are stored in UTC time zone. * There can only be one time definition used for claim period either \"pointInTime\" or \"period\" */
    public var pointInTime: Date?
    /** Claimable duration in minutes, this value will set the controls until when the award is claimable. * There can only be one time definition used for claim period either \"pointInTime\" or \"period\" */
    public var period: Int?
    /** A list of Strings of groups that the reward belongs to. */
    public var tags: [String]?
    /** The metadata associated with this award */
    public var metadata: [String: String]?
    /** The code of the award */
    public var statusCode: Int?
    /** Additional constraints, if the value is present it means the */
    public var constraints: [String]?
    /**  Award is claimed. */
    public var claimed: Bool?
    public var status: AwardStatus?
    /** name from reward */
    public var name: String?
    /** Text limited description */
    public var description: String?
    public var memberRefId: String?

    public init(memberId: String? = nil, rewardId: String? = nil, rewardType: RewardTypeReduced? = nil, rewardRank: String? = nil, rewardValue: Double? = nil, delay: Int? = nil, entityType: EntityType? = nil, entityId: String? = nil, pointInTime: Date? = nil, period: Int? = nil, tags: [String]? = nil, metadata: [String: String]? = nil, statusCode: Int? = nil, constraints: [String]? = nil, claimed: Bool? = nil, status: AwardStatus? = nil, name: String? = nil, description: String? = nil, memberRefId: String? = nil) {
        self.memberId = memberId
        self.rewardId = rewardId
        self.rewardType = rewardType
        self.rewardRank = rewardRank
        self.rewardValue = rewardValue
        self.delay = delay
        self.entityType = entityType
        self.entityId = entityId
        self.pointInTime = pointInTime
        self.period = period
        self.tags = tags
        self.metadata = metadata
        self.statusCode = statusCode
        self.constraints = constraints
        self.claimed = claimed
        self.status = status
        self.name = name
        self.description = description
        self.memberRefId = memberRefId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case memberId
        case rewardId
        case rewardType
        case rewardRank
        case rewardValue
        case delay
        case entityType
        case entityId
        case pointInTime
        case period
        case tags
        case metadata
        case statusCode
        case constraints
        case claimed
        case status
        case name
        case description
        case memberRefId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(memberId, forKey: .memberId)
        try container.encodeIfPresent(rewardId, forKey: .rewardId)
        try container.encodeIfPresent(rewardType, forKey: .rewardType)
        try container.encodeIfPresent(rewardRank, forKey: .rewardRank)
        try container.encodeIfPresent(rewardValue, forKey: .rewardValue)
        try container.encodeIfPresent(delay, forKey: .delay)
        try container.encodeIfPresent(entityType, forKey: .entityType)
        try container.encodeIfPresent(entityId, forKey: .entityId)
        try container.encodeIfPresent(pointInTime, forKey: .pointInTime)
        try container.encodeIfPresent(period, forKey: .period)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(metadata, forKey: .metadata)
        try container.encodeIfPresent(statusCode, forKey: .statusCode)
        try container.encodeIfPresent(constraints, forKey: .constraints)
        try container.encodeIfPresent(claimed, forKey: .claimed)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(memberRefId, forKey: .memberRefId)
    }
}

