/**
 * ZIQNI Member API
 * The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClientStomp', 'model/AwardRequest', 'model/AwardResponse', 'model/ClaimAwardRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClientStomp'), require('../model/AwardRequest'), require('../model/AwardResponse'), require('../model/ClaimAwardRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.ZiqniMemberApi) {
      root.ZiqniMemberApi = {};
    }
    root.ZiqniMemberApi.AwardsApi = factory(root.ZiqniMemberApi.ApiClientStomp, root.ZiqniMemberApi.AwardRequest, root.ZiqniMemberApi.AwardResponse, root.ZiqniMemberApi.ClaimAwardRequest);
  }
}(this, function(ApiClientStomp, AwardRequest, AwardResponse, ClaimAwardRequest) {
  'use strict';

  /**
   * Awards service.
   * @module api/AwardsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AwardsApi. 
   * @alias module:api/AwardsApi
   * @class
   * @param {module:ApiClientStomp} [apiClientStomp] Optional API client implementation to use,
   * default to {@link module:ApiClientStomp#instance} if unspecified.
   */
  var exports = function(apiClientStomp) {
    this.apiClientStomp = apiClientStomp || ApiClientStomp.instance;


    /**
     * Callback function to receive the result of the claimAwards operation.
     * @callback module:api/AwardsApi~claimAwardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim awards.
     * This operation enables a member to claim awards.
     * @param {module:model/ClaimAwardRequest} claimAwardRequest 
     * @param {module:api/AwardsApi~claimAwardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardResponse}
     */
    this.claimAwards = function(claimAwardRequest, callback) {
      var postBody = claimAwardRequest;
      // verify the required parameter 'claimAwardRequest' is set
      if (claimAwardRequest === undefined || claimAwardRequest === null) {
        throw new Error("Missing the required parameter 'claimAwardRequest' when calling claimAwards");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };
      var destination = '/gapi/claimAwards';

      var returnType = AwardResponse;
      return this.apiClientStomp.sendRpc(destination, callback, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, returnType);
    }

    /**
     * Callback function to receive the result of the getAwards operation.
     * @callback module:api/AwardsApi~getAwardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get awards.
     * This operation supports retrieval of awards for one or many entities.
     * @param {module:model/AwardRequest} awardRequest 
     * @param {module:api/AwardsApi~getAwardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardResponse}
     */
    this.getAwards = function(awardRequest, callback) {
      var postBody = awardRequest;
      // verify the required parameter 'awardRequest' is set
      if (awardRequest === undefined || awardRequest === null) {
        throw new Error("Missing the required parameter 'awardRequest' when calling getAwards");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };
      var destination = '/gapi/getAwards';

      var returnType = AwardResponse;
      return this.apiClientStomp.sendRpc(destination, callback, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, returnType);
    }
  };

  return exports;
}));
