/**
 * ZIQNI Member API
 * The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.
 *
 * The version of the OpenAPI document: 1.0.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OptinStatus from './OptinStatus';

/**
 * The MissionState model module.
 * @module model/MissionState
 * @version 1.0.17
 */
class MissionState {
    /**
     * Constructs a new <code>MissionState</code>.
     * Mission is a specialised view of connected achievements. The first achievement is the container, every dependant achievement is a chained dependency
     * @alias module:model/MissionState
     * @param optInStatus {module:model/OptinStatus} 
     * @param entityId {String} 
     */
    constructor(optInStatus, entityId) { 
        
        MissionState.initialize(this, optInStatus, entityId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, optInStatus, entityId) { 
        obj['optInStatus'] = optInStatus;
        obj['entityId'] = entityId;
    }

    /**
     * Constructs a <code>MissionState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MissionState} obj Optional instance to populate.
     * @return {module:model/MissionState} The populated <code>MissionState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MissionState();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('optInStatus')) {
                obj['optInStatus'] = OptinStatus.constructFromObject(data['optInStatus']);
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = ApiClient.convertToType(data['constraints'], ['String']);
            }
            if (data.hasOwnProperty('entityType')) {
                obj['entityType'] = ApiClient.convertToType(data['entityType'], 'String');
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('entityStatusCode')) {
                obj['entityStatusCode'] = ApiClient.convertToType(data['entityStatusCode'], 'Number');
            }
            if (data.hasOwnProperty('entityStatus')) {
                obj['entityStatus'] = ApiClient.convertToType(data['entityStatus'], 'String');
            }
            if (data.hasOwnProperty('includes')) {
                obj['includes'] = ApiClient.convertToType(data['includes'], {'String': Object});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MissionState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MissionState</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MissionState.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `optInStatus`
        if (data['optInStatus']) { // data not null
          OptinStatus.validateJSON(data['optInStatus']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['constraints'])) {
            throw new Error("Expected the field `constraints` to be an array in the JSON data but got " + data['constraints']);
        }
        // ensure the json data is a string
        if (data['entityType'] && !(typeof data['entityType'] === 'string' || data['entityType'] instanceof String)) {
            throw new Error("Expected the field `entityType` to be a primitive type in the JSON string but got " + data['entityType']);
        }
        // ensure the json data is a string
        if (data['entityId'] && !(typeof data['entityId'] === 'string' || data['entityId'] instanceof String)) {
            throw new Error("Expected the field `entityId` to be a primitive type in the JSON string but got " + data['entityId']);
        }
        // ensure the json data is a string
        if (data['entityStatus'] && !(typeof data['entityStatus'] === 'string' || data['entityStatus'] instanceof String)) {
            throw new Error("Expected the field `entityStatus` to be a primitive type in the JSON string but got " + data['entityStatus']);
        }

        return true;
    }


}

MissionState.RequiredProperties = ["optInStatus", "entityId"];

/**
 * 
 * @member {String} name
 */
MissionState.prototype['name'] = undefined;

/**
 * @member {module:model/OptinStatus} optInStatus
 */
MissionState.prototype['optInStatus'] = undefined;

/**
 * isCompleted, etc
 * @member {Array.<String>} constraints
 */
MissionState.prototype['constraints'] = undefined;

/**
 * 
 * @member {String} entityType
 */
MissionState.prototype['entityType'] = undefined;

/**
 * 
 * @member {String} entityId
 */
MissionState.prototype['entityId'] = undefined;

/**
 * 
 * @member {Number} entityStatusCode
 */
MissionState.prototype['entityStatusCode'] = undefined;

/**
 * 
 * @member {String} entityStatus
 */
MissionState.prototype['entityStatus'] = undefined;

/**
 * 
 * @member {Object.<String, Object>} includes
 */
MissionState.prototype['includes'] = undefined;






export default MissionState;

