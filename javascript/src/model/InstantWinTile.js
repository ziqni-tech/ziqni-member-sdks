/**
 * ZIQNI Member API
 * The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.
 *
 * The version of the OpenAPI document: 1.0.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GridLocation from './GridLocation';
import RewardReduced from './RewardReduced';

/**
 * The InstantWinTile model module.
 * @module model/InstantWinTile
 * @version 1.0.17
 */
class InstantWinTile {
    /**
     * Constructs a new <code>InstantWinTile</code>.
     * 
     * @alias module:model/InstantWinTile
     * @param icon {String} The id to the image file
     * @param probability {Number} 
     * @param location {module:model/GridLocation} 
     * @param background {String} 
     */
    constructor(icon, probability, location, background) { 
        
        InstantWinTile.initialize(this, icon, probability, location, background);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, icon, probability, location, background) { 
        obj['icon'] = icon;
        obj['probability'] = probability;
        obj['location'] = location;
        obj['background'] = background;
    }

    /**
     * Constructs a <code>InstantWinTile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstantWinTile} obj Optional instance to populate.
     * @return {module:model/InstantWinTile} The populated <code>InstantWinTile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstantWinTile();

            if (data.hasOwnProperty('icon')) {
                obj['icon'] = ApiClient.convertToType(data['icon'], 'String');
            }
            if (data.hasOwnProperty('iconLink')) {
                obj['iconLink'] = ApiClient.convertToType(data['iconLink'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('reward')) {
                obj['reward'] = RewardReduced.constructFromObject(data['reward']);
            }
            if (data.hasOwnProperty('probability')) {
                obj['probability'] = ApiClient.convertToType(data['probability'], 'Number');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = GridLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('background')) {
                obj['background'] = ApiClient.convertToType(data['background'], 'String');
            }
            if (data.hasOwnProperty('contraints')) {
                obj['contraints'] = ApiClient.convertToType(data['contraints'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InstantWinTile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InstantWinTile</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InstantWinTile.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['icon'] && !(typeof data['icon'] === 'string' || data['icon'] instanceof String)) {
            throw new Error("Expected the field `icon` to be a primitive type in the JSON string but got " + data['icon']);
        }
        // ensure the json data is a string
        if (data['iconLink'] && !(typeof data['iconLink'] === 'string' || data['iconLink'] instanceof String)) {
            throw new Error("Expected the field `iconLink` to be a primitive type in the JSON string but got " + data['iconLink']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // validate the optional field `reward`
        if (data['reward']) { // data not null
          RewardReduced.validateJSON(data['reward']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          GridLocation.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['background'] && !(typeof data['background'] === 'string' || data['background'] instanceof String)) {
            throw new Error("Expected the field `background` to be a primitive type in the JSON string but got " + data['background']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['contraints'])) {
            throw new Error("Expected the field `contraints` to be an array in the JSON data but got " + data['contraints']);
        }

        return true;
    }


}

InstantWinTile.RequiredProperties = ["icon", "probability", "location", "background"];

/**
 * The id to the image file
 * @member {String} icon
 */
InstantWinTile.prototype['icon'] = undefined;

/**
 * The uri to this image
 * @member {String} iconLink
 */
InstantWinTile.prototype['iconLink'] = undefined;

/**
 * 
 * @member {String} text
 */
InstantWinTile.prototype['text'] = undefined;

/**
 * @member {module:model/RewardReduced} reward
 */
InstantWinTile.prototype['reward'] = undefined;

/**
 * 
 * @member {Number} probability
 */
InstantWinTile.prototype['probability'] = undefined;

/**
 * @member {module:model/GridLocation} location
 */
InstantWinTile.prototype['location'] = undefined;

/**
 * 
 * @member {String} background
 */
InstantWinTile.prototype['background'] = undefined;

/**
 * hasPrizes, glow
 * @member {Array.<String>} contraints
 */
InstantWinTile.prototype['contraints'] = undefined;






export default InstantWinTile;

