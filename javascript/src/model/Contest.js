/**
 * Ziqni Gamification Cloud API
 * This is the gamification cloud for Ziqni
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContestAllOf from './ContestAllOf';
import ContestStatus from './ContestStatus';
import ModelDefault from './ModelDefault';
import OptionalModelFields from './OptionalModelFields';
import RoundType from './RoundType';
import Strategy from './Strategy';

/**
 * The Contest model module.
 * @module model/Contest
 * @version 0.0.1
 */
class Contest {
    /**
     * Constructs a new <code>Contest</code>.
     * This is a contest model
     * @alias module:model/Contest
     * @implements module:model/ContestAllOf
     * @implements module:model/ModelDefault
     * @implements module:model/OptionalModelFields
     * @param id {String} Ziqni id of the model
     */
    constructor(id) { 
        ContestAllOf.initialize(this);ModelDefault.initialize(this, id);OptionalModelFields.initialize(this);
        Contest.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>Contest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Contest} obj Optional instance to populate.
     * @return {module:model/Contest} The populated <code>Contest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Contest();
            ContestAllOf.constructFromObject(data, obj);
            ModelDefault.constructFromObject(data, obj);
            OptionalModelFields.constructFromObject(data, obj);

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('termsAndConditions')) {
                obj['termsAndConditions'] = ApiClient.convertToType(data['termsAndConditions'], 'String');
            }
            if (data.hasOwnProperty('competitionId')) {
                obj['competitionId'] = ApiClient.convertToType(data['competitionId'], 'String');
            }
            if (data.hasOwnProperty('round')) {
                obj['round'] = ApiClient.convertToType(data['round'], 'Number');
            }
            if (data.hasOwnProperty('roundType')) {
                obj['roundType'] = RoundType.constructFromObject(data['roundType']);
            }
            if (data.hasOwnProperty('groupStage')) {
                obj['groupStage'] = ApiClient.convertToType(data['groupStage'], 'Number');
            }
            if (data.hasOwnProperty('groupStageLabel')) {
                obj['groupStageLabel'] = ApiClient.convertToType(data['groupStageLabel'], 'String');
            }
            if (data.hasOwnProperty('maxNumberOfEntrants')) {
                obj['maxNumberOfEntrants'] = ApiClient.convertToType(data['maxNumberOfEntrants'], 'Number');
            }
            if (data.hasOwnProperty('minNumberOfEntrants')) {
                obj['minNumberOfEntrants'] = ApiClient.convertToType(data['minNumberOfEntrants'], 'Number');
            }
            if (data.hasOwnProperty('scheduledStartDate')) {
                obj['scheduledStartDate'] = ApiClient.convertToType(data['scheduledStartDate'], 'Date');
            }
            if (data.hasOwnProperty('scheduledEndDate')) {
                obj['scheduledEndDate'] = ApiClient.convertToType(data['scheduledEndDate'], 'Date');
            }
            if (data.hasOwnProperty('actualStartDate')) {
                obj['actualStartDate'] = ApiClient.convertToType(data['actualStartDate'], 'Date');
            }
            if (data.hasOwnProperty('actualEndDate')) {
                obj['actualEndDate'] = ApiClient.convertToType(data['actualEndDate'], 'Date');
            }
            if (data.hasOwnProperty('strategies')) {
                obj['strategies'] = Strategy.constructFromObject(data['strategies']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ContestStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('statusCode')) {
                obj['statusCode'] = ApiClient.convertToType(data['statusCode'], 'Number');
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = ApiClient.convertToType(data['constraints'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('spaceName')) {
                obj['spaceName'] = ApiClient.convertToType(data['spaceName'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('customFields')) {
                obj['customFields'] = ApiClient.convertToType(data['customFields'], {'String': Object});
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
        }
        return obj;
    }


}

/**
 * @member {String} name
 */
Contest.prototype['name'] = undefined;

/**
 * @member {String} description
 */
Contest.prototype['description'] = undefined;

/**
 * @member {String} termsAndConditions
 */
Contest.prototype['termsAndConditions'] = undefined;

/**
 * A unique identifier of a Competition
 * @member {String} competitionId
 */
Contest.prototype['competitionId'] = undefined;

/**
 * To what round does the contest belong
 * @member {Number} round
 */
Contest.prototype['round'] = undefined;

/**
 * @member {module:model/RoundType} roundType
 */
Contest.prototype['roundType'] = undefined;

/**
 * Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2
 * @member {Number} groupStage
 */
Contest.prototype['groupStage'] = undefined;

/**
 * The name of the group stages
 * @member {String} groupStageLabel
 */
Contest.prototype['groupStageLabel'] = undefined;

/**
 * Maximum number of entrants for the contest
 * @member {Number} maxNumberOfEntrants
 */
Contest.prototype['maxNumberOfEntrants'] = undefined;

/**
 * Minimum number of entrants for the contest
 * @member {Number} minNumberOfEntrants
 */
Contest.prototype['minNumberOfEntrants'] = undefined;

/**
 * ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
 * @member {Date} scheduledStartDate
 */
Contest.prototype['scheduledStartDate'] = undefined;

/**
 * ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
 * @member {Date} scheduledEndDate
 */
Contest.prototype['scheduledEndDate'] = undefined;

/**
 * ISO8601 timestamp for when a Competition started. All records are stored in UTC time zone
 * @member {Date} actualStartDate
 */
Contest.prototype['actualStartDate'] = undefined;

/**
 * ISO8601 timestamp for when a Competition ended. All records are stored in UTC time zone
 * @member {Date} actualEndDate
 */
Contest.prototype['actualEndDate'] = undefined;

/**
 * @member {module:model/Strategy} strategies
 */
Contest.prototype['strategies'] = undefined;

/**
 * @member {module:model/ContestStatus} status
 */
Contest.prototype['status'] = undefined;

/**
 * The code of the contest
 * @member {Number} statusCode
 */
Contest.prototype['statusCode'] = undefined;

/**
 * Additional constraints
 * @member {Array.<String>} constraints
 */
Contest.prototype['constraints'] = undefined;

/**
 * Ziqni id of the model
 * @member {String} id
 */
Contest.prototype['id'] = undefined;

/**
 * This is the space name which is linked to the account
 * @member {String} spaceName
 */
Contest.prototype['spaceName'] = undefined;

/**
 * ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
 * @member {Date} created
 */
Contest.prototype['created'] = undefined;

/**
 * @member {Object.<String, Object>} customFields
 */
Contest.prototype['customFields'] = undefined;

/**
 * A list of id's used to tag models
 * @member {Array.<String>} tags
 */
Contest.prototype['tags'] = undefined;

/**
 * @member {Object.<String, String>} metadata
 */
Contest.prototype['metadata'] = undefined;


// Implement ContestAllOf interface:
/**
 * @member {String} name
 */
ContestAllOf.prototype['name'] = undefined;
/**
 * @member {String} description
 */
ContestAllOf.prototype['description'] = undefined;
/**
 * @member {String} termsAndConditions
 */
ContestAllOf.prototype['termsAndConditions'] = undefined;
/**
 * A unique identifier of a Competition
 * @member {String} competitionId
 */
ContestAllOf.prototype['competitionId'] = undefined;
/**
 * To what round does the contest belong
 * @member {Number} round
 */
ContestAllOf.prototype['round'] = undefined;
/**
 * @member {module:model/RoundType} roundType
 */
ContestAllOf.prototype['roundType'] = undefined;
/**
 * Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2
 * @member {Number} groupStage
 */
ContestAllOf.prototype['groupStage'] = undefined;
/**
 * The name of the group stages
 * @member {String} groupStageLabel
 */
ContestAllOf.prototype['groupStageLabel'] = undefined;
/**
 * Maximum number of entrants for the contest
 * @member {Number} maxNumberOfEntrants
 */
ContestAllOf.prototype['maxNumberOfEntrants'] = undefined;
/**
 * Minimum number of entrants for the contest
 * @member {Number} minNumberOfEntrants
 */
ContestAllOf.prototype['minNumberOfEntrants'] = undefined;
/**
 * ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
 * @member {Date} scheduledStartDate
 */
ContestAllOf.prototype['scheduledStartDate'] = undefined;
/**
 * ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
 * @member {Date} scheduledEndDate
 */
ContestAllOf.prototype['scheduledEndDate'] = undefined;
/**
 * ISO8601 timestamp for when a Competition started. All records are stored in UTC time zone
 * @member {Date} actualStartDate
 */
ContestAllOf.prototype['actualStartDate'] = undefined;
/**
 * ISO8601 timestamp for when a Competition ended. All records are stored in UTC time zone
 * @member {Date} actualEndDate
 */
ContestAllOf.prototype['actualEndDate'] = undefined;
/**
 * @member {module:model/Strategy} strategies
 */
ContestAllOf.prototype['strategies'] = undefined;
/**
 * @member {module:model/ContestStatus} status
 */
ContestAllOf.prototype['status'] = undefined;
/**
 * The code of the contest
 * @member {Number} statusCode
 */
ContestAllOf.prototype['statusCode'] = undefined;
/**
 * Additional constraints
 * @member {Array.<String>} constraints
 */
ContestAllOf.prototype['constraints'] = undefined;
// Implement ModelDefault interface:
/**
 * Ziqni id of the model
 * @member {String} id
 */
ModelDefault.prototype['id'] = undefined;
/**
 * This is the space name which is linked to the account
 * @member {String} spaceName
 */
ModelDefault.prototype['spaceName'] = undefined;
/**
 * ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
 * @member {Date} created
 */
ModelDefault.prototype['created'] = undefined;
// Implement OptionalModelFields interface:
/**
 * @member {Object.<String, Object>} customFields
 */
OptionalModelFields.prototype['customFields'] = undefined;
/**
 * A list of id's used to tag models
 * @member {Array.<String>} tags
 */
OptionalModelFields.prototype['tags'] = undefined;
/**
 * @member {Object.<String, String>} metadata
 */
OptionalModelFields.prototype['metadata'] = undefined;




export default Contest;

