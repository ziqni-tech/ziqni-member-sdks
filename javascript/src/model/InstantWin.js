/**
 * ZIQNI Member API
 * The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.
 *
 * The version of the OpenAPI document: 1.0.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InstantWinAllOf from './InstantWinAllOf';
import InstantWinTile from './InstantWinTile';
import ModelDefault from './ModelDefault';
import OptionalModelFields from './OptionalModelFields';

/**
 * The InstantWin model module.
 * @module model/InstantWin
 * @version 1.0.10
 */
class InstantWin {
    /**
     * Constructs a new <code>InstantWin</code>.
     * @alias module:model/InstantWin
     * @implements module:model/InstantWinAllOf
     * @implements module:model/ModelDefault
     * @implements module:model/OptionalModelFields
     * @param instantWinType {Number} 
     * @param tiles {Array.<module:model/InstantWinTile>} 
     * @param id {String} Ziqni id of the model
     */
    constructor(instantWinType, tiles, id) { 
        InstantWinAllOf.initialize(this, instantWinType, tiles);ModelDefault.initialize(this, id);OptionalModelFields.initialize(this);
        InstantWin.initialize(this, instantWinType, tiles, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, instantWinType, tiles, id) { 
        obj['instantWinType'] = instantWinType;
        obj['tiles'] = tiles;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>InstantWin</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstantWin} obj Optional instance to populate.
     * @return {module:model/InstantWin} The populated <code>InstantWin</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstantWin();
            InstantWinAllOf.constructFromObject(data, obj);
            ModelDefault.constructFromObject(data, obj);
            OptionalModelFields.constructFromObject(data, obj);

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('termsAndConditions')) {
                obj['termsAndConditions'] = ApiClient.convertToType(data['termsAndConditions'], 'String');
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = ApiClient.convertToType(data['constraints'], ['String']);
            }
            if (data.hasOwnProperty('statusCode')) {
                obj['statusCode'] = ApiClient.convertToType(data['statusCode'], 'Number');
            }
            if (data.hasOwnProperty('instantWinType')) {
                obj['instantWinType'] = ApiClient.convertToType(data['instantWinType'], 'Number');
            }
            if (data.hasOwnProperty('tiles')) {
                obj['tiles'] = ApiClient.convertToType(data['tiles'], [InstantWinTile]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('spaceName')) {
                obj['spaceName'] = ApiClient.convertToType(data['spaceName'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('customFields')) {
                obj['customFields'] = ApiClient.convertToType(data['customFields'], {'String': Object});
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
        }
        return obj;
    }


}

/**
 * @member {String} name
 */
InstantWin.prototype['name'] = undefined;

/**
 * @member {String} description
 */
InstantWin.prototype['description'] = undefined;

/**
 * @member {String} termsAndConditions
 */
InstantWin.prototype['termsAndConditions'] = undefined;

/**
 * Additional constraints, if set means true [optinRequiredForEntrants, hasRules, hasRewards]
 * @member {Array.<String>} constraints
 */
InstantWin.prototype['constraints'] = undefined;

/**
 * @member {Number} statusCode
 */
InstantWin.prototype['statusCode'] = undefined;

/**
 * @member {Number} instantWinType
 */
InstantWin.prototype['instantWinType'] = undefined;

/**
 * @member {Array.<module:model/InstantWinTile>} tiles
 */
InstantWin.prototype['tiles'] = undefined;

/**
 * Ziqni id of the model
 * @member {String} id
 */
InstantWin.prototype['id'] = undefined;

/**
 * This is the space name which is linked to the account
 * @member {String} spaceName
 */
InstantWin.prototype['spaceName'] = undefined;

/**
 * ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
 * @member {Date} created
 */
InstantWin.prototype['created'] = undefined;

/**
 * @member {Object.<String, Object>} customFields
 */
InstantWin.prototype['customFields'] = undefined;

/**
 * A list of id's used to tag models
 * @member {Array.<String>} tags
 */
InstantWin.prototype['tags'] = undefined;

/**
 * @member {Object.<String, String>} metadata
 */
InstantWin.prototype['metadata'] = undefined;


// Implement InstantWinAllOf interface:
/**
 * @member {String} name
 */
InstantWinAllOf.prototype['name'] = undefined;
/**
 * @member {String} description
 */
InstantWinAllOf.prototype['description'] = undefined;
/**
 * @member {String} termsAndConditions
 */
InstantWinAllOf.prototype['termsAndConditions'] = undefined;
/**
 * Additional constraints, if set means true [optinRequiredForEntrants, hasRules, hasRewards]
 * @member {Array.<String>} constraints
 */
InstantWinAllOf.prototype['constraints'] = undefined;
/**
 * @member {Number} statusCode
 */
InstantWinAllOf.prototype['statusCode'] = undefined;
/**
 * @member {Number} instantWinType
 */
InstantWinAllOf.prototype['instantWinType'] = undefined;
/**
 * @member {Array.<module:model/InstantWinTile>} tiles
 */
InstantWinAllOf.prototype['tiles'] = undefined;
// Implement ModelDefault interface:
/**
 * Ziqni id of the model
 * @member {String} id
 */
ModelDefault.prototype['id'] = undefined;
/**
 * This is the space name which is linked to the account
 * @member {String} spaceName
 */
ModelDefault.prototype['spaceName'] = undefined;
/**
 * ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
 * @member {Date} created
 */
ModelDefault.prototype['created'] = undefined;
// Implement OptionalModelFields interface:
/**
 * @member {Object.<String, Object>} customFields
 */
OptionalModelFields.prototype['customFields'] = undefined;
/**
 * A list of id's used to tag models
 * @member {Array.<String>} tags
 */
OptionalModelFields.prototype['tags'] = undefined;
/**
 * @member {Object.<String, String>} metadata
 */
OptionalModelFields.prototype['metadata'] = undefined;




export default InstantWin;

