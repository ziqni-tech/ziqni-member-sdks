/**
 * ZIQNI Member API
 * The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.
 *
 * The version of the OpenAPI document: 1.0.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QuerySortBy from './QuerySortBy';

/**
 * The FileRequest model module.
 * @module model/FileRequest
 * @version 1.0.17
 */
class FileRequest {
    /**
     * Constructs a new <code>FileRequest</code>.
     * 
     * @alias module:model/FileRequest
     */
    constructor() { 
        
        FileRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FileRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileRequest} obj Optional instance to populate.
     * @return {module:model/FileRequest} The populated <code>FileRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileRequest();

            if (data.hasOwnProperty('ids')) {
                obj['ids'] = ApiClient.convertToType(data['ids'], ['String']);
            }
            if (data.hasOwnProperty('sortBy')) {
                obj['sortBy'] = ApiClient.convertToType(data['sortBy'], [QuerySortBy]);
            }
            if (data.hasOwnProperty('skip')) {
                obj['skip'] = ApiClient.convertToType(data['skip'], 'Number');
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('repositoryId')) {
                obj['repositoryId'] = ApiClient.convertToType(data['repositoryId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['ids'])) {
            throw new Error("Expected the field `ids` to be an array in the JSON data but got " + data['ids']);
        }
        if (data['sortBy']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sortBy'])) {
                throw new Error("Expected the field `sortBy` to be an array in the JSON data but got " + data['sortBy']);
            }
            // validate the optional field `sortBy` (array)
            for (const item of data['sortBy']) {
                QuerySortBy.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['repositoryId'] && !(typeof data['repositoryId'] === 'string' || data['repositoryId'] instanceof String)) {
            throw new Error("Expected the field `repositoryId` to be a primitive type in the JSON string but got " + data['repositoryId']);
        }

        return true;
    }


}



/**
 * 
 * @member {Array.<String>} ids
 */
FileRequest.prototype['ids'] = undefined;

/**
 * 
 * @member {Array.<module:model/QuerySortBy>} sortBy
 */
FileRequest.prototype['sortBy'] = undefined;

/**
 * 
 * @member {Number} skip
 */
FileRequest.prototype['skip'] = undefined;

/**
 * 
 * @member {Number} limit
 */
FileRequest.prototype['limit'] = undefined;

/**
 * 
 * @member {String} repositoryId
 */
FileRequest.prototype['repositoryId'] = undefined;






export default FileRequest;

