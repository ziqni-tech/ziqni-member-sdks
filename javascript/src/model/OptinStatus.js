/**
 * ZIQNI Member API
 * The ZIQNI Member-API is the primary resource used to build services and widgets for your members [customers, players, patients, etc]. The service is Stomp websokets with SOCK.js even though the system is decribed using OpenApi schema for convenience.
 *
 * The version of the OpenAPI document: 1.0.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OptinStatus model module.
 * @module model/OptinStatus
 * @version 1.0.17
 */
class OptinStatus {
    /**
     * Constructs a new <code>OptinStatus</code>.
     * 
     * @alias module:model/OptinStatus
     * @param entityType {String} The type of this entity like Achievement, Competition, or Contest
     * @param entityId {String} The unique identifier of this entity
     * @param statusCode {Number} Processing = 0, NotEntered = 5, Entering = 10, Entrant = 15, Preparing = 20, Running = 25, Completing = 30, Completed = 35
     * @param status {String} Processing = 0, NotEntered = 5, Entering = 10, Entrant = 15,\\             \\ Preparing = 20, Running = 25, Completing = 30, Completed = 35
     * @param points {Number} The current points total
     */
    constructor(entityType, entityId, statusCode, status, points) { 
        
        OptinStatus.initialize(this, entityType, entityId, statusCode, status, points);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, entityType, entityId, statusCode, status, points) { 
        obj['entityType'] = entityType;
        obj['entityId'] = entityId;
        obj['statusCode'] = statusCode;
        obj['status'] = status;
        obj['points'] = points;
    }

    /**
     * Constructs a <code>OptinStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OptinStatus} obj Optional instance to populate.
     * @return {module:model/OptinStatus} The populated <code>OptinStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OptinStatus();

            if (data.hasOwnProperty('entityType')) {
                obj['entityType'] = ApiClient.convertToType(data['entityType'], 'String');
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('statusCode')) {
                obj['statusCode'] = ApiClient.convertToType(data['statusCode'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('percentageComplete')) {
                obj['percentageComplete'] = ApiClient.convertToType(data['percentageComplete'], 'Number');
            }
            if (data.hasOwnProperty('points')) {
                obj['points'] = ApiClient.convertToType(data['points'], 'Number');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'Number');
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], {'String': 'Number'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OptinStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OptinStatus</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OptinStatus.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['entityType'] && !(typeof data['entityType'] === 'string' || data['entityType'] instanceof String)) {
            throw new Error("Expected the field `entityType` to be a primitive type in the JSON string but got " + data['entityType']);
        }
        // ensure the json data is a string
        if (data['entityId'] && !(typeof data['entityId'] === 'string' || data['entityId'] instanceof String)) {
            throw new Error("Expected the field `entityId` to be a primitive type in the JSON string but got " + data['entityId']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

OptinStatus.RequiredProperties = ["entityType", "entityId", "statusCode", "status", "points"];

/**
 * The type of this entity like Achievement, Competition, or Contest
 * @member {String} entityType
 */
OptinStatus.prototype['entityType'] = undefined;

/**
 * The unique identifier of this entity
 * @member {String} entityId
 */
OptinStatus.prototype['entityId'] = undefined;

/**
 * Processing = 0, NotEntered = 5, Entering = 10, Entrant = 15, Preparing = 20, Running = 25, Completing = 30, Completed = 35
 * @member {Number} statusCode
 */
OptinStatus.prototype['statusCode'] = undefined;

/**
 * Processing = 0, NotEntered = 5, Entering = 10, Entrant = 15,\\             \\ Preparing = 20, Running = 25, Completing = 30, Completed = 35
 * @member {String} status
 */
OptinStatus.prototype['status'] = undefined;

/**
 * What percentage has been completed so far, this is a number between 0 and 100
 * @member {Number} percentageComplete
 */
OptinStatus.prototype['percentageComplete'] = undefined;

/**
 * The current points total
 * @member {Number} points
 */
OptinStatus.prototype['points'] = undefined;

/**
 * The current position of the member
 * @member {Number} position
 */
OptinStatus.prototype['position'] = undefined;

/**
 * The user defined values used in the rules builder
 * @member {Object.<String, Number>} params
 */
OptinStatus.prototype['params'] = undefined;






export default OptinStatus;

