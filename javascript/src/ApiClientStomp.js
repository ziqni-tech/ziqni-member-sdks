/**
 * Ziqni Gamification Cloud API
 * This is the gamification cloud for Ziqni
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import superagent from "superagent";
import querystring from "querystring";

const StompJs = require('@stomp/stompjs');
const SockJS = require('sockjs-client');

/**
* @module ApiClient
* @version 0.0.1
*/

/**
* Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an
* application to use this class directly - the *Api and model classes provide the public API for the service. The
* contents of this file should be regarded as internal but are documented for completeness.
* @alias module:ApiClient
* @class
*/
class ApiClientStomp {
    /**
     * @type CompatClient
     */
    client

    /**
     * The base URL against which to resolve every API call's (relative) path.
     * Overrides the default value set in spec file if present
     * @param {String} basePath
     */
    constructor(basePath = 'wss://member-api.ziqni.com/ws') {
        /**
         * The base URL against which to resolve every API call's (relative) path.
         * @type {String}
         * @default https://member-api.ziqni.com
         */
        this.basePath = basePath.replace(/\/+$/, '');

        /**
         * The authentication methods to be included for all API calls.
         * @type {Array.<String>}
         */
        this.authentications = {
            'OAuth2': {type: 'oauth2'}
        }

        /**
         * The default HTTP headers to be included for all API calls.
         * @type {Array.<String>}
         * @default {}
         */
        this.defaultHeaders = {
            'User-Agent': 'OpenAPI-Generator/0.0.1/Javascript'
        };

        /**
         * The default HTTP timeout for all API calls.
         * @type {Number}
         * @default 60000
         */
        this.timeout = 60000;

        /**
         * If set to false an additional timestamp parameter is added to all API GET calls to
         * prevent browser caching
         * @type {Boolean}
         * @default true
         */
        this.cache = true;

        /**
         * If set to true, the client will save the cookies from each server
         * response, and return them in the next request.
         * @default false
         */
        this.enableCookies = false;

        /*
         * Used to save and return cookies in a node.js (non-browser) setting,
         * if this.enableCookies is set to true.
         */
        if (typeof window === 'undefined') {
          this.agent = new superagent.agent();
        }

        /*
         * Allow user to override superagent agent
         */
         this.requestAgent = null;

        /*
         * Allow user to add superagent plugins
         */
        this.plugins = null;

        this.rpcCallBacks = new Map();

        this.client = new StompJs.Client({
            brokerURL: this.basePath,
            connectHeaders: {
                login: 'Bearer',
                passcode: 'eyJhbGciOiJIUzI1NiJ9.eyJhcGlfa2V5X2lkIjoicXhtcXFZRUJUZVV0U0VzNEVJLWgiLCJtZW1iZXJfcmVmZXJlbmNlX2lkIjoiVGVzdF9rZXktMDYwNzg0NGYtMjU1Yy00ZDE5LTg1YTAtYzQzNmMxZDRmNTVlIiwiYWNjb3VudF9pZCI6IkY3bThkSHdCc3ctT0gzTUVvVzIzIiwic3BhY2VfbmFtZSI6ImZpcnN0LXNwYWNlIiwibmFtZSI6IlRlc3RfbmFtZS0zYWE1YzRlZS1jY2VlLTRiZWMtYjU5My1kYTdiMzAwZWU4OTAiLCJtZW1iZXJfdHlwZSI6IkluZGl2aWR1YWwiLCJtZW1iZXJfaWQiOiJ3LVVlSElJQnVwTjhDRjN6YzBoeiIsInJlc291cmNlX2FjY2VzcyI6eyJ6aXFuaS1nYXBpIjp7InJvbGVzIjpbIlB1YmxpYyIsIk1lbWJlciIsIlZpZXdBY2hpZXZlbWVudHMiLCJWaWV3QXdhcmRzIiwiQ2xhaW1Bd2FyZHMiLCJWaWV3Q29tcGV0aXRpb25zIiwiVmlld0NvbnRlc3RzIiwiVmlld0ZpbGVzIiwiVmlld01lbWJlcnMiLCJNZW1iZXJzT3B0aW4iLCJWaWV3TWVzc2FnZXMiLCJDb25uZWN0UHJveHkiLCJWaWV3UmV3YXJkcyIsIlZpZXdSdWxlcyJdfX0sInN1YiI6InctVWVISUlCdXBOOENGM3pjMGh6IiwianRpIjoiNjlkZjQzODEtZDE3YS00ZWQ0LWJjY2UtZjRkZTA5NTEwYTc3IiwiaWF0IjoxNjU4NzM5MDIwLCJleHAiOjE2NjA4OTkwMjB9.j4RCenIJAsH513CJgEWvLA9xn8Q1uVVNY-aZfKKo3a0', // 'JWT token you get from https://api.ziqni.com/swagger-ui/#/member-token/createMemberToken',
            },
            debug: function (str) {
                console.log(str);
            },
            reconnectDelay: 5000,
            heartbeatIncoming: 4000,
            heartbeatOutgoing: 4000,
        });

        this.client.webSocketFactory = function () {
            return new SockJS('https://member-api.ziqni.com/ws');
        };

        this.client.onConnect =  (frame) => {
            if (frame.command === 'CONNECTED') {
                const rpcCallbackSubscription = this.client.subscribe("/user/queue/rpc-results", this.handleRpcCallback);
                console.log('rpcCallbackSubscription', rpcCallbackSubscription);
                const sysCallbackSubscription = this.client.subscribe("/user/queue/callbacks", this.handleSysCallback);
                console.log('sysCallbackSubscription', sysCallbackSubscription);
            }
            // Do something, all subscribes must be done is this callback
            // This is needed because this will be executed after a (re)connect
        };

        this.client.onStompError = function (frame) {
            // Will be invoked in case of error encountered at Broker
            // Bad login/passcode typically will cause an error
            // Complaint brokers will set `message` header with a brief message. Body may contain details.
            // Compliant brokers will terminate the connection after any error
            console.log('Broker reported error: ' + frame.headers['message']);
            console.log('Additional details: ' + frame.body);
        };

    }

    /**
    * Returns a string representation for an actual parameter.
    * @param param The actual parameter.
    * @returns {String} The string representation of <code>param</code>.
    */
    connect(param) {
        this.client.activate();
    }

    uuidv4() {
        return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
            (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
        );
    }

    handleRpcCallback = (message) => {
        if (message.body) {
            const  messageId = message.headers['message-id'];
            const callback = this.rpcCallBacks && this.rpcCallBacks.get(messageId)

            if(callback) {
                callback(JSON.parse(message.body));
                this.rpcCallBacks.delete(messageId);
            }
            // ToDo: Handle messages with unknown message id

        } else {
            console.log('message with empty body', message)
            // ToDo: Handle message with empty body
        }
    };

    handleSysCallback = (message) => {
        // ToDo: Handle system messages
        // called when the client receives a STOMP message from the server
        if (message.body) {
            alert("got message with body " + message.body)
        } else {
            alert("got empty message");
        }
    };

    sendRpc(destination, message, callback){
        // private Map<String, Object> query;
        // private Map<String, Object> path;
        // private T body;

        const messageId = this.uuidv4();
        const messageHeaders = { 'message-id': messageId };

        this.client.publish({destination, headers: messageHeaders, body: JSON.stringify(message)});
        this.rpcCallBacks.set(messageId, callback);
    }
}



/**
* The default API  Stomp client implementation.
* @type {module:ApiClientStomp}
*/
ApiClientStomp.instance = new ApiClientStomp();
export default ApiClientStomp;
