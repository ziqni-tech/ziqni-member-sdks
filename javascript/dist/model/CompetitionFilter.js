/**
 * Ziqni Gamification Cloud API
 * This is the gamification cloud for Ziqni
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import CompetitionStatus from './CompetitionStatus';
import CompetitionType from './CompetitionType';
import QuerySortBy from './QuerySortBy';
import RangeQuery from './RangeQuery';
/**
 * The CompetitionFilter model module.
 * @module model/CompetitionFilter
 * @version 0.0.1
 */

class CompetitionFilter {
  /**
   * Constructs a new <code>CompetitionFilter</code>.
   * @alias module:model/CompetitionFilter
   */
  constructor() {
    CompetitionFilter.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  static initialize(obj) {}
  /**
   * Constructs a <code>CompetitionFilter</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CompetitionFilter} obj Optional instance to populate.
   * @return {module:model/CompetitionFilter} The populated <code>CompetitionFilter</code> instance.
   */


  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new CompetitionFilter();

      if (data.hasOwnProperty('tags')) {
        obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
      }

      if (data.hasOwnProperty('startDate')) {
        obj['startDate'] = RangeQuery.constructFromObject(data['startDate']);
      }

      if (data.hasOwnProperty('endDate')) {
        obj['endDate'] = RangeQuery.constructFromObject(data['endDate']);
      }

      if (data.hasOwnProperty('productIds')) {
        obj['productIds'] = ApiClient.convertToType(data['productIds'], ['String']);
      }

      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], [CompetitionStatus]);
      }

      if (data.hasOwnProperty('competitionType')) {
        obj['competitionType'] = ApiClient.convertToType(data['competitionType'], [CompetitionType]);
      }

      if (data.hasOwnProperty('sortBy')) {
        obj['sortBy'] = ApiClient.convertToType(data['sortBy'], [QuerySortBy]);
      }

      if (data.hasOwnProperty('ids')) {
        obj['ids'] = ApiClient.convertToType(data['ids'], ['String']);
      }

      if (data.hasOwnProperty('skip')) {
        obj['skip'] = ApiClient.convertToType(data['skip'], 'Number');
      }

      if (data.hasOwnProperty('limit')) {
        obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
      }

      if (data.hasOwnProperty('constraints')) {
        obj['constraints'] = ApiClient.convertToType(data['constraints'], ['String']);
      }
    }

    return obj;
  }

}
/**
 * @member {Array.<String>} tags
 */


CompetitionFilter.prototype['tags'] = undefined;
/**
 * @member {module:model/RangeQuery} startDate
 */

CompetitionFilter.prototype['startDate'] = undefined;
/**
 * @member {module:model/RangeQuery} endDate
 */

CompetitionFilter.prototype['endDate'] = undefined;
/**
 * @member {Array.<String>} productIds
 */

CompetitionFilter.prototype['productIds'] = undefined;
/**
 * @member {Array.<module:model/CompetitionStatus>} status
 */

CompetitionFilter.prototype['status'] = undefined;
/**
 * @member {Array.<module:model/CompetitionType>} competitionType
 */

CompetitionFilter.prototype['competitionType'] = undefined;
/**
 * @member {Array.<module:model/QuerySortBy>} sortBy
 */

CompetitionFilter.prototype['sortBy'] = undefined;
/**
 * @member {Array.<String>} ids
 */

CompetitionFilter.prototype['ids'] = undefined;
/**
 * @member {Number} skip
 */

CompetitionFilter.prototype['skip'] = undefined;
/**
 * @member {Number} limit
 */

CompetitionFilter.prototype['limit'] = undefined;
/**
 * Specify the constraints that need to be applied to the filter.
 * @member {Array.<String>} constraints
 */

CompetitionFilter.prototype['constraints'] = undefined;
export default CompetitionFilter;