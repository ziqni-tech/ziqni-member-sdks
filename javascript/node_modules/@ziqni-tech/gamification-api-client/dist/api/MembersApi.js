"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _MemberOptinRequest = _interopRequireDefault(require("../model/MemberOptinRequest"));

var _MemberRequest = _interopRequireDefault(require("../model/MemberRequest"));

var _MemberResponse = _interopRequireDefault(require("../model/MemberResponse"));

var _MemberSessionRequest = _interopRequireDefault(require("../model/MemberSessionRequest"));

var _MemberSessionResponse = _interopRequireDefault(require("../model/MemberSessionResponse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
* Members service.
* @module api/MembersApi
* @version 0.0.1
*/
var MembersApi = /*#__PURE__*/function () {
  /**
  * Constructs a new MembersApi. 
  * @alias module:api/MembersApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function MembersApi(apiClient) {
    _classCallCheck(this, MembersApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Callback function to receive the result of the getMember operation.
   * @callback module:api/MembersApi~getMemberCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MemberResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get member information by member reference id
   * Returns member information for the provided member reference id
   * @param {module:model/MemberRequest} memberRequest 
   * @param {module:api/MembersApi~getMemberCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MemberResponse}
   */


  _createClass(MembersApi, [{
    key: "getMember",
    value: function getMember(memberRequest, callback) {
      var postBody = memberRequest; // verify the required parameter 'memberRequest' is set

      if (memberRequest === undefined || memberRequest === null) {
        throw new Error("Missing the required parameter 'memberRequest' when calling getMember");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _MemberResponse["default"];
      return this.apiClient.callApi('/gc/member-info', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getMemberOptinInfo operation.
     * @callback module:api/MembersApi~getMemberOptinInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get member optin information
     * Returns a list of member optin information
     * @param {module:model/MemberOptinRequest} memberOptinRequest 
     * @param {module:api/MembersApi~getMemberOptinInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberResponse}
     */

  }, {
    key: "getMemberOptinInfo",
    value: function getMemberOptinInfo(memberOptinRequest, callback) {
      var postBody = memberOptinRequest; // verify the required parameter 'memberOptinRequest' is set

      if (memberOptinRequest === undefined || memberOptinRequest === null) {
        throw new Error("Missing the required parameter 'memberOptinRequest' when calling getMemberOptinInfo");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _MemberResponse["default"];
      return this.apiClient.callApi('/gc/member-manage-optin', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getMemberSession operation.
     * @callback module:api/MembersApi~getMemberSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberSessionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get member session by member reference id
     * Returns member's active session information.
     * @param {module:model/MemberSessionRequest} memberSessionRequest 
     * @param {module:api/MembersApi~getMemberSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberSessionResponse}
     */

  }, {
    key: "getMemberSession",
    value: function getMemberSession(memberSessionRequest, callback) {
      var postBody = memberSessionRequest; // verify the required parameter 'memberSessionRequest' is set

      if (memberSessionRequest === undefined || memberSessionRequest === null) {
        throw new Error("Missing the required parameter 'memberSessionRequest' when calling getMemberSession");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _MemberSessionResponse["default"];
      return this.apiClient.callApi('/gc/member-session', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);

  return MembersApi;
}();

exports["default"] = MembersApi;