"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ContestStatus = _interopRequireDefault(require("./ContestStatus"));

var _RoundType = _interopRequireDefault(require("./RoundType"));

var _Strategy = _interopRequireDefault(require("./Strategy"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * The ContestAllOf model module.
 * @module model/ContestAllOf
 * @version 0.0.1
 */
var ContestAllOf = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>ContestAllOf</code>.
   * @alias module:model/ContestAllOf
   */
  function ContestAllOf() {
    _classCallCheck(this, ContestAllOf);

    ContestAllOf.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(ContestAllOf, null, [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>ContestAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContestAllOf} obj Optional instance to populate.
     * @return {module:model/ContestAllOf} The populated <code>ContestAllOf</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ContestAllOf();

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }

        if (data.hasOwnProperty('termsAndConditions')) {
          obj['termsAndConditions'] = _ApiClient["default"].convertToType(data['termsAndConditions'], 'String');
        }

        if (data.hasOwnProperty('competitionId')) {
          obj['competitionId'] = _ApiClient["default"].convertToType(data['competitionId'], 'String');
        }

        if (data.hasOwnProperty('round')) {
          obj['round'] = _ApiClient["default"].convertToType(data['round'], 'Number');
        }

        if (data.hasOwnProperty('roundType')) {
          obj['roundType'] = _RoundType["default"].constructFromObject(data['roundType']);
        }

        if (data.hasOwnProperty('groupStage')) {
          obj['groupStage'] = _ApiClient["default"].convertToType(data['groupStage'], 'Number');
        }

        if (data.hasOwnProperty('groupStageLabel')) {
          obj['groupStageLabel'] = _ApiClient["default"].convertToType(data['groupStageLabel'], 'String');
        }

        if (data.hasOwnProperty('maxNumberOfEntrants')) {
          obj['maxNumberOfEntrants'] = _ApiClient["default"].convertToType(data['maxNumberOfEntrants'], 'Number');
        }

        if (data.hasOwnProperty('minNumberOfEntrants')) {
          obj['minNumberOfEntrants'] = _ApiClient["default"].convertToType(data['minNumberOfEntrants'], 'Number');
        }

        if (data.hasOwnProperty('scheduledStartDate')) {
          obj['scheduledStartDate'] = _ApiClient["default"].convertToType(data['scheduledStartDate'], 'Date');
        }

        if (data.hasOwnProperty('scheduledEndDate')) {
          obj['scheduledEndDate'] = _ApiClient["default"].convertToType(data['scheduledEndDate'], 'Date');
        }

        if (data.hasOwnProperty('actualStartDate')) {
          obj['actualStartDate'] = _ApiClient["default"].convertToType(data['actualStartDate'], 'Date');
        }

        if (data.hasOwnProperty('actualEndDate')) {
          obj['actualEndDate'] = _ApiClient["default"].convertToType(data['actualEndDate'], 'Date');
        }

        if (data.hasOwnProperty('strategies')) {
          obj['strategies'] = _Strategy["default"].constructFromObject(data['strategies']);
        }

        if (data.hasOwnProperty('status')) {
          obj['status'] = _ContestStatus["default"].constructFromObject(data['status']);
        }

        if (data.hasOwnProperty('statusCode')) {
          obj['statusCode'] = _ApiClient["default"].convertToType(data['statusCode'], 'Number');
        }

        if (data.hasOwnProperty('constraints')) {
          obj['constraints'] = _ApiClient["default"].convertToType(data['constraints'], ['String']);
        }
      }

      return obj;
    }
  }]);

  return ContestAllOf;
}();
/**
 * @member {String} name
 */


ContestAllOf.prototype['name'] = undefined;
/**
 * @member {String} description
 */

ContestAllOf.prototype['description'] = undefined;
/**
 * @member {String} termsAndConditions
 */

ContestAllOf.prototype['termsAndConditions'] = undefined;
/**
 * A unique identifier of a Competition
 * @member {String} competitionId
 */

ContestAllOf.prototype['competitionId'] = undefined;
/**
 * To what round does the contest belong
 * @member {Number} round
 */

ContestAllOf.prototype['round'] = undefined;
/**
 * @member {module:model/RoundType} roundType
 */

ContestAllOf.prototype['roundType'] = undefined;
/**
 * Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2
 * @member {Number} groupStage
 */

ContestAllOf.prototype['groupStage'] = undefined;
/**
 * The name of the group stages
 * @member {String} groupStageLabel
 */

ContestAllOf.prototype['groupStageLabel'] = undefined;
/**
 * Maximum number of entrants for the contest
 * @member {Number} maxNumberOfEntrants
 */

ContestAllOf.prototype['maxNumberOfEntrants'] = undefined;
/**
 * Minimum number of entrants for the contest
 * @member {Number} minNumberOfEntrants
 */

ContestAllOf.prototype['minNumberOfEntrants'] = undefined;
/**
 * ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
 * @member {Date} scheduledStartDate
 */

ContestAllOf.prototype['scheduledStartDate'] = undefined;
/**
 * ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
 * @member {Date} scheduledEndDate
 */

ContestAllOf.prototype['scheduledEndDate'] = undefined;
/**
 * ISO8601 timestamp for when a Competition started. All records are stored in UTC time zone
 * @member {Date} actualStartDate
 */

ContestAllOf.prototype['actualStartDate'] = undefined;
/**
 * ISO8601 timestamp for when a Competition ended. All records are stored in UTC time zone
 * @member {Date} actualEndDate
 */

ContestAllOf.prototype['actualEndDate'] = undefined;
/**
 * @member {module:model/Strategy} strategies
 */

ContestAllOf.prototype['strategies'] = undefined;
/**
 * @member {module:model/ContestStatus} status
 */

ContestAllOf.prototype['status'] = undefined;
/**
 * The code of the contest
 * @member {Number} statusCode
 */

ContestAllOf.prototype['statusCode'] = undefined;
/**
 * Additional constraints
 * @member {Array.<String>} constraints
 */

ContestAllOf.prototype['constraints'] = undefined;
var _default = ContestAllOf;
exports["default"] = _default;