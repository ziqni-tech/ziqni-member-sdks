/*
 * Ziqni Member Cloud API
 * This is the Member cloud for Ziqni
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.member.sdk.api;

import com.ziqni.member.sdk.ApiException;
import com.ziqni.member.sdk.data.LoadMessageData;
import com.ziqni.member.sdk.model.*;
import com.ziqni.member.sdk.util.ApiClientFactoryUtil;
import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

/**
 * API tests for MessagesApi
 */

public class MessagesApiTest implements tests.utils.CompleteableFutureTestWrapper {

    private final MessagesApiWs api ;
    private  final LoadMessageData loadMessageData;

    public MessagesApiTest() throws Exception {
        this.api = ApiClientFactoryUtil.initApiClientFactory().getMessagesApi();
        this.loadMessageData=new LoadMessageData();
    }

    /**
     * Get messages by member reference id
     *
     * Returns a list of messages for the provided member ref id and applied filters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessagesTest() throws ApiException {
        var response = $(api.getMessages(loadMessageData.getRequest()));

        assertNotNull(response);
        assertNotNull(response.getData());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

    }

    @Test
    public void updateMessageStatusTest() throws ApiException, InterruptedException {
        var response = $(api.getMessages(loadMessageData.getRequest()));
        var id = "04prrZUBOj_U9-LQGMM4";
        var updateMessageStateRequest = new UpdateMessageStateRequest()
                .id(List.of(id))
                .status(MessageStatus.READ);

        var updateResponse = $(api.updateMessagesState(List.of(updateMessageStateRequest)));

        Thread.sleep(2000);
        var request = loadMessageData.getRequest();
        request.getMessageFilter().addIdsItem(id);
        var getResponse = $(api.getMessages(request));

        assertNotNull(updateResponse);
        assertNotNull(updateResponse.getResults());
        assertNotNull(updateResponse.getErrors());
        assertTrue(updateResponse.getErrors().isEmpty(), "Should have no errors");

    }

    @Test
    public void filterMessagesByStatusTest() throws ApiException {
        var request = loadMessageData.getRequest();
        request.getMessageFilter().addStatusItem(MessageStatus.READ);
        var response = $(api.getMessages(request));

        assertNotNull(response);
        assertNotNull(response.getData());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

    }

    @Test
    public void getMessagesSortByCreatedDateTest() throws ApiException {
        var request = loadMessageData.getRequest();
        request.getMessageFilter().addSortByItem(new QuerySortBy().queryField("created").order(SortOrder.DESC));
        var response = $(api.getMessages(request));

        assertNotNull(response);
        assertNotNull(response.getData());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

        // Check descending order
        var messages = response.getData();
        assertFalse(messages.isEmpty(), "Messages list should not be empty");

        for (int i = 0; i < messages.size() - 1; i++) {
            var currentCreated = messages.get(i).getCreated();
            var nextCreated = messages.get(i + 1).getCreated();
            assertTrue(currentCreated.compareTo(nextCreated) >= 0,
                    String.format("Message at index %d with created %s should be >= message at index %d with created %s",
                            i, currentCreated, i + 1, nextCreated));
        }
    }
    
}
