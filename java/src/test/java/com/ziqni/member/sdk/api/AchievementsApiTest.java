/*
 * Ziqni Member Cloud API
 * This is the Member cloud for Ziqni
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.member.sdk.api;

import com.ziqni.member.sdk.ApiException;
import com.ziqni.member.sdk.data.LoadAchievementsData;
import com.ziqni.member.sdk.model.AchievementFilter;
import com.ziqni.member.sdk.model.AchievementRequest;
import com.ziqni.member.sdk.model.DateRange;
import com.ziqni.member.sdk.model.NumberRange;
import com.ziqni.member.sdk.util.ApiClientFactoryUtil;
import org.junit.jupiter.api.*;

import java.time.OffsetDateTime;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

/**
 * API tests for AchievementsApi
 */
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class AchievementsApiTest implements tests.utils.CompleteableFutureTestWrapper{

    private AchievementsApiWs api;
    private LoadAchievementsData loadAchievementsData;

    @BeforeAll
    public void start() throws Exception {
        this.api = ApiClientFactoryUtil.initApiClientFactory().getAchievementsApi();
        this.loadAchievementsData = new LoadAchievementsData();
        
    }

    @AfterAll
    public  void stop(){
        ApiClientFactoryUtil.stop();
    }

    /**
     * Get achievements by member reference id
     *
     * Returns a list of achievements for the provided member ref id and applied filters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMemberAchievementsTest() throws Exception {
        var response = $(api.getAchievements(loadAchievementsData.getRequest().languageKey("de")));

        assertNotNull(response);
        assertNotNull(response.getData());
        assertNotNull(response.getErrors());
        Assertions.assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        Assertions.assertFalse(response.getData().isEmpty(), "Should have results");
    }

    @Test
    public void getPublicAchievementsTest() throws Exception {
        var response = $(api.getAchievements(loadAchievementsData.getRequest()));

        assertNotNull(response);
        assertNotNull(response.getData());
        assertNotNull(response.getErrors());
        Assertions.assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        Assertions.assertFalse(response.getData().isEmpty(), "Should have results");
    }

    @Test
    public void getMemberAchievementsWithScheduledEndDatesTest() throws Exception {
        final var achievementFilter = new AchievementFilter();
        achievementFilter.includeOptInState(true);
        achievementFilter.skip(0);
        achievementFilter.limit(20);
        achievementFilter.statusCode(new NumberRange()
                .moreThan(1L)
                .lessThan(1000L));
        achievementFilter.addProductIdsItem("hIlqeJAB8AyZ3Dx3dSqP");
        achievementFilter.endDate(new DateRange()
                .before(OffsetDateTime.parse("2025-09-03T13:39:32.000Z"))
                .after(OffsetDateTime.parse("2024-09-03T13:38:32.000Z")));

        final var achievementRequest = new AchievementRequest()
                .achievementFilter(achievementFilter);

        final var response = $(api.getAchievements(achievementRequest));

        assertNotNull(response);
        assertNotNull(response.getData());
        assertNull(response.getErrors());
        Assertions.assertFalse(response.getData().isEmpty(), "Should have results");
    }

}
