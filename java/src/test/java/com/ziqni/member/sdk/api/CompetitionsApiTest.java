/*
 * Ziqni Member Cloud API
 * This is the Member cloud for Ziqni
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.member.sdk.api;

import com.ziqni.admin.client.model.MemberTokenRequest;
import com.ziqni.member.sdk.ApiClientFactoryWs;
import com.ziqni.member.sdk.ApiException;
import com.ziqni.member.sdk.configuration.ApiClientConfig;
import com.ziqni.member.sdk.data.LoadCompetitionsData;
import com.ziqni.member.sdk.data.LoadRewardsData;
import com.ziqni.member.sdk.util.ApiClientFactoryUtil;
import com.ziqni.member.sdk.util.TestMemberTokenLoader;
import org.junit.jupiter.api.*;

import java.util.Objects;

import static com.ziqni.member.sdk.util.TestMemberTokenLoader.TEST_MEMBER_TOKEN;
import static java.util.stream.Collectors.toList;
import static org.junit.jupiter.api.Assertions.*;

/**
 * API tests for CompetitionsApi
 */

public class CompetitionsApiTest implements tests.utils.CompleteableFutureTestWrapper {

    private final CompetitionsApiWs api;
    private final LoadCompetitionsData loadCompetitionsData;


    public CompetitionsApiTest() throws Exception {
        TestMemberTokenLoader testMemberTokenLoader = new TestMemberTokenLoader();
        MemberTokenRequest tokenRequest = new MemberTokenRequest()
                .apiKey(testMemberTokenLoader.getApiKey())
                .expires(6000)
                .isReferenceId(true)
                .member(TEST_MEMBER_TOKEN)
                .resource("ziqni-gapi");

        // ApiClientConfig.setIdentityAuthorization(testMemberTokenLoader.setMemberTokenRequest(tokenRequest));
        ApiClientConfig.setIdentityAuthorization(null);
        ApiClientFactoryUtil.initApiClientFactory();
        this.api = ApiClientFactoryWs.getCompetitionsApi();
        this.loadCompetitionsData = new LoadCompetitionsData();
    }

    /**
     * Get competitions by member reference id
     *
     * Returns a list of competitions for the provided member ref id and applied filters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMemberCompetitionsTest() throws ApiException {
        var response = api.getCompetitions(loadCompetitionsData.getRequest()).join();

        assertNotNull(response);
        assertNotNull(response.getData());
        final var actual = response.getData().stream().filter(competition -> Objects.nonNull(competition.getMemberTagsFilter())).collect(toList());

        assertTrue( actual.size()>0);
        assertNotNull(response.getErrors());
        Assertions.assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        Assertions.assertFalse(response.getData().isEmpty(), "Should have results");

    }

    @Test
    public void getPublicCompetitionsTest() throws Exception {

        var response = api.getCompetitions(loadCompetitionsData.getRequest()).join();

        assertNotNull(response);
        assertNotNull(response.getData());
        assertNotNull(response.getErrors());
        Assertions.assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        Assertions.assertFalse(response.getData().isEmpty(), "Should have results");
    }
    
}
